SET DEFINE OFF;

/
CREATE OR REPLACE PACKAGE DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES
AS

TYPE t_array IS TABLE OF VARCHAR2(50)
INDEX BY BINARY_INTEGER;

/**
* Documentaci¿n para TYPE 'Lr_ServicioLiberaFactib'.
*
* Tipo de datos para el retorno de la informaci¿n correspondiente a los servicios para liberar factibilidad
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.0 17-10-2017
*/
TYPE Lr_ServicioLiberaFactib IS RECORD (
  ID_SERVICIO               DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
  ID_SERVICIO_TECNICO       DB_COMERCIAL.INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO%TYPE, 
  EMPRESA_COD               DB_COMERCIAL.INFO_EMPRESA_ROL.EMPRESA_COD%TYPE,
  REGION                    DB_GENERAL.ADMI_CANTON.REGION%TYPE,
  JURISDICCION              DB_INFRAESTRUCTURA.ADMI_JURISDICCION.NOMBRE_JURISDICCION%TYPE,
  CIUDAD                    DB_GENERAL.ADMI_CANTON.NOMBRE_CANTON%TYPE,
  CODIGO_TIPO_MEDIO         DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO.CODIGO_TIPO_MEDIO%TYPE,
  USR_VENDEDOR              DB_COMERCIAL.INFO_SERVICIO.USR_VENDEDOR%TYPE,
  CLIENTE                   VARCHAR2(200), 
  LOGIN                     DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
  ID_DETALLE_SOLICITUD      DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
  FECHA_FACTIBILIDAD        VARCHAR2(20),
  DIAS_FACTIBLES            FLOAT,
  AUTOMATICA                VARCHAR2(2),
  NOMBRE_SERVICIO           VARCHAR2(250),
  DIAS_FACTIBLES_REPORTE    NUMBER
);

/**
* Documentaci¿n para TYPE 'Lt_ServiciosLiberaFactib'.
* Tabla para almacenar la data enviada con la informaci¿n correspondiente a los servicios para liberar factibilidad
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.0 18-10-2017
*/
TYPE Lt_ServiciosLiberaFactib
IS
  TABLE OF Lr_ServicioLiberaFactib INDEX BY PLS_INTEGER;

  /*
  *Se agregan types necesarios para generaci¿n de reporte de producto secure cpe.
  * @author Antonio Ayala <afayala@telconet.ec>
  * @version 1.0 03-09-2021
  */

  TYPE Lr_ListadoPagos IS RECORD(TOTAL_REGISTRO NUMBER);
  --
  TYPE Lt_Result IS TABLE OF Lr_ListadoPagos;
  --
  TYPE Lrf_Result IS REF CURSOR;

  /**
   * P_EJECUTA_CPM_OLTS
   * Procedimiento que ejecuta los cambios de planes masivos pendientes de todos los olts
   * 
   * @param Pn_IdOlt        IN NUMBER Id de un olt
   * @param Pv_UsrCreacion  IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_IpCreacion   IN VARCHAR2 Ip de creaci¿n
   * @param Pv_Status       OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje      OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 28-11-2019
   *
   */
  PROCEDURE P_EJECUTA_CPM_OLTS(
    Pn_IdOlt        IN NUMBER,
    Pv_UsrCreacion  IN VARCHAR2,
    Pv_IpCreacion   IN VARCHAR2,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2);

  /**
   * P_UPDATE_INFO_SERVICIO
   * Procedimiento que actualiza el registro asociado a la tabla INFO_SERVICIO
   * 
   * @param Pr_InfoServicio     IN DB_COMERCIAL.INFO_SERVICIO%ROWTYPE Registro de la tabla INFO_SERVICIO
   * @param Pv_Mensaje          OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 15-10-2019
   *
   */
  PROCEDURE P_UPDATE_INFO_SERVICIO(
    Pr_InfoServicio IN DB_COMERCIAL.INFO_SERVICIO%ROWTYPE,
    Pv_Mensaje      OUT VARCHAR2);

  /**
   * P_UPDATE_INFO_DETALLE_ELEMENTO
   * Procedimiento que actualiza el registro asociado a la tabla INFO_DETALLE_ELEMENTO
   * 
   * @param Pr_InfoDetalleElemento  IN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE Registro de la tabla INFO_DETALLE_ELEMENTO
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 15-10-2019
   *
   */
  PROCEDURE P_UPDATE_INFO_DETALLE_ELEMENTO(
    Pr_InfoDetalleElemento  IN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_INSERT_SERVICIO_PROD_CARACT
   * Procedimiento que crea el registro de una caracter¿stica asociada a un servicio
   * 
   * @param Pn_IdServicio                   IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pn_IdProducto                   IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE Id del producto
   * @param Pv_EstadoAdmiProdCaract         IN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ESTADO%TYPE Estado de la asociaci¿n entre el producto 
   *                                                                                                 y la caracter¿stica
   * @param Pv_DescripcionCaracteristica    IN DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE Descripci¿n de la caracter¿stica
   * @param Pv_ValorServicioProdCaract      IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE Valor del servicio producto caracter¿stica
   * @param Pv_EstadoServicioProdCaract     IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.ESTADO%TYPE Estado del servicio producto caracter¿stica
   * @param Pv_UsrCreacion                  IN Usuario de creaci¿n del registro
   * @param Pv_Mensaje                      OUT Mensaje de la creaci¿n del registro
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 08-10-2019
   *
   */
  PROCEDURE P_INSERT_SERVICIO_PROD_CARACT(
    Pn_IdServicio                   IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdProducto                   IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE,
    Pv_EstadoAdmiProdCaract         IN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ESTADO%TYPE,
    Pv_DescripcionCaracteristica    IN DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE,
    Pv_ValorServicioProdCaract      IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE,
    Pv_EstadoServicioProdCaract     IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.ESTADO%TYPE,
    Pv_UsrCreacion                  IN VARCHAR2,
    Pv_Mensaje                      OUT VARCHAR2);

  /**
   * P_ELIMINA_CARACTS_MCAFEE
   * Procedimiento que elimina las caracter¿sticas asociadas a un servicio Internet Protegido con tecnolog¿a McAfee
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE Login del punto
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_ValoresCaracts           OUT VARCHAR2 Cadena con los valores de las caracter¿sticas asociadas a la tecnolog¿a McAfee
   * @param Pv_ValoresCaractsReporte    OUT VARCHAR2 Cadena con los valores de las caracter¿sticas necesarias para el reporte de tecnolog¿a McAfee
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 14-10-2019
   *
   */
  PROCEDURE P_ELIMINA_CARACTS_MCAFEE(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2);

  /**
   * P_CREA_CARACTS_KASPERSKY
   * Procedimiento que crea las caracter¿sticas asociadas a un servicio Internet Protegido con tecnolog¿a Kaspersky
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pn_IdProducto               IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE Id del Producto Internet Protegido
   * @param Pv_ValorSpcSuscriberId      IN VARCHAR2 Valor de la caracter¿stica SUSCRIBER_ID asociada al servicio
   * @param Pv_ValorSpcCodigoProducto   IN VARCHAR2 Valor de la caracter¿stica CODIGO_PRODUCTO asociada al servicio
   * @param Pv_ValorSpcAntivirus        IN VARCHAR2 Valor de la caracter¿stica ANTIVIRUS asociada al servicio
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje                  OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 04-10-2019
   *
   */
  PROCEDURE P_CREA_CARACTS_KASPERSKY(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdProducto               IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE,
    Pv_ValorSpcSuscriberId      IN VARCHAR2,
    Pv_ValorSpcCodigoProducto   IN VARCHAR2,
    Pv_ValorSpcAntivirus        IN VARCHAR2,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_Mensaje                  OUT VARCHAR2);

  /**
   * P_INVOCA_WEB_SERVICE_GMS
   * Procedimiento que invoca al web service provisto por GMS para la activaci¿n de licencias de Internet Protegido con tecnolog¿a Kaspersky
   * 
   * @param Pr_RegInfoServicioWsGms IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms Registro con la data que ser¿ enviada al web service de GMS
   * @param Pv_TipoTransaccion      IN VARCHAR2 Tipo de transacci¿n que se ejecutar¿ en el web service de GMS
   * @param Pv_Status               OUT VARCHAR2 Estado obtenido de la respuesta del web service de GMS
   * @param Pv_SuscriberId          OUT VARCHAR2 SuscriberId obtenido de la respuesta del web service de GMS
   * @param Pcl_MensajeErrorHtml    OUT CLOB Cadena con el mensaje de error obtenido de la respuesta del web service de GMS
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 04-10-2019
   *
   */
  PROCEDURE P_INVOCA_WEB_SERVICE_GMS(   
    Pr_RegInfoServicioWsGms IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms,
    Pv_TipoTransaccion      IN  VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_SuscriberId          OUT VARCHAR2,
    Pcl_MensajeErrorHtml    OUT CLOB);

  /**
   * P_CORTE_I_PROTEGIDO
   * Procedimiento que crea el registro de una caracter¿stica asociada a un servicio
   * 
   * @param Pn_IdServicio                   IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pr_RegInfoServicioWsGms         IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms Registro con la data que ser¿ enviada al 
   *                                                                                              web service de GMS
   * @param Pv_DescripcionProducto          IN DB_COMERCIAL.ADMI_PRODUCTO.DESCRIPCION_PRODUCTO%TYPE Descripci¿n del producto
   * @param Pv_TipoServicio                 IN VARCHAR2 Si es producto de un plan o un servicio adicional
   * @param Pv_MsjHistoAdicional            IN VARCHAR2 Mensaje adicional del historial del servicio 
   * @param Pv_UsrCreacion                  IN Usuario de creaci¿n del registro
   * @param Pv_Status                       OUT Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje                      OUT Mensaje de la ejecuci¿n del procedimiento
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 08-10-2019
   *
   */
  PROCEDURE P_CORTE_I_PROTEGIDO(
    Pn_IdServicio           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pr_RegInfoServicioWsGms IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms,
    Pv_DescripcionProducto  IN DB_COMERCIAL.ADMI_PRODUCTO.DESCRIPCION_PRODUCTO%TYPE,
    Pv_TipoServicio         IN VARCHAR2,
    Pv_MsjHistoAdicional    IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_ACTIVA_I_PROTEGIDO_EN_PLAN
   * Procedimiento que invoca al web service provisto por GMS para la activaci¿n de licencias de Internet Protegido con tecnolog¿a Kaspersky
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 07-10-2019
   *
   */
  PROCEDURE P_ACTIVA_I_PROTEGIDO_EN_PLAN(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_MIGRA_SERV_I_PROTEGIDO_PLAN
   * Procedimiento que realiza la migraci¿n de las licencias de Internet Protegido de tecnolog¿a McAfee a Kaspersky incluidas en el plan
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 07-10-2019
   *
   */
  PROCEDURE P_MIGRA_SERV_I_PROTEGIDO_PLAN(   
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_CREA_SERVICIO_I_PROTEGIDO
   * Procedimiento que crea el nuevo servicio de Internet Protegido migrado a Kaspersky
   * 
   * @param Pr_RegPuntoInternetXOlt         IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pr_ProductoInternetProtegido    IN DB_COMERCIAL.ADMI_PRODUCTO%ROWTYPE Registro con la data del producto
   * @param Pn_PrecioVentaServicio          IN NUMBER Precio de venta del servicio
   * @param Pv_UsrCreacion                  IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status                       OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje                      OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * @param Pn_IdServicioNuevo              IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio creado
   * @param Pn_IdOrdenTrabajoNuevo          IN DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE Id de la orden de trabajo asociado al servicio
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 07-10-2019
   *
   */
  PROCEDURE P_CREA_SERVICIO_I_PROTEGIDO(
    Pr_RegPuntoInternetXOlt         IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pr_ProductoInternetProtegido    IN DB_COMERCIAL.ADMI_PRODUCTO%ROWTYPE,
    Pn_PrecioVentaServicio          IN NUMBER,
    Pv_UsrCreacion                  IN VARCHAR2,
    Pv_Status                       OUT VARCHAR2, 
    Pv_Mensaje                      OUT VARCHAR2,
    Pn_IdServicioNuevo              OUT DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdOrdenTrabajoNuevo          OUT DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE);

  /**
   * P_MIGRA_SERV_I_PROTEGIDO_ADICS
   * Procedimiento que realiza la migraci¿n de las licencias de Internet Protegido adicionales de tecnolog¿a McAfee a Kaspersky
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pv_GestionaLicencias    OUT VARCHAR2 SI o NO se gestionan licencias adicionales de servicios Internet Protegido
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 07-10-2019
   *
   */
  PROCEDURE P_MIGRA_SERV_I_PROTEGIDO_ADICS(
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2);

  /**
   * P_MIGRACION_I_PROTEGIDO_X_PTO
   * Procedimiento que realiza el proceso de migraci¿n de servicios Internet Protegido McAfee a Kaspersky por punto
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pv_GestionaLicencias    OUT VARCHAR2 SI o NO se gestionan licencias de servicios Internet Protegido de un punto
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 03-10-2019
   *
   */
  PROCEDURE P_MIGRACION_I_PROTEGIDO_X_PTO(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2);

  /**
   * P_MIGRA_SERVICIOS_MCAFEE_ERROR
   * Procedimiento que obtiene la data que fue cancelada de servicios McAfee y que ser¿ enviada a Digiway para su posterior cancelaci¿n
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 15-10-2019
   *
   */
  PROCEDURE P_MIGRA_SERVICIOS_MCAFEE_ERROR;

  /**
   * P_MIGRACION_I_PROTEGIDO_X_OLT
   * Procedimiento que realiza el proceso de migraci¿n de servicios Internet Protegido McAfee a Kaspersky por olt
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 03-10-2019
   *
   */
  PROCEDURE P_MIGRACION_I_PROTEGIDO_X_OLT;

/**
* SPLIT
*
* Funcion de igual que la funci¿n xplode de php, recibe un string, el delimitador y devuelve un array
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 21/08/2014
* @param number p_in_string
* @param string p_delim
*
* @return array t_array
*/
FUNCTION SPLIT (p_in_string VARCHAR2, p_delim VARCHAR2) RETURN t_array;


/**
* INFRP_LIBERA_VLAN
*
* PROCEDIMIENTO QUE LIBERA LAS VLANS QUE NO ESTAN ENLAZADAS A NINGUN SERVICIO
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 0 13/03/2017
*
* @author John Vera <javera@telconet.ec>
* @version 1.1 30/05/2017 Se modifico para que funcione en la base de produccion
*/
PROCEDURE INFRP_LIBERA_VLAN;

/**
* INFRP_LIBERA_INTERFACE_SW
*
* PROCEDIMIENTO QUE LIBERA LOS PUERTOS DE SW QUE SE ENCUENTRA EN ESTADO RESERVED M¿S
* D¿AS DE LO PERMITIDO
*
* @author Jes¿s Bozada <jbozada@telconet.ec>
* @version 1.0 18/09/2017
* @since 1.0
*/
PROCEDURE INFRP_LIBERA_INTERFACE_SW;

/**
* INFRP_SOLICITUDES_MIGRACION_IP
*
* Procedimiento que crea las solicitudes de migracion y cambio de plan del elemento
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 21/08/2014
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.1 16-11-2015
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.2 08-03-2016  Se agrega almacenamiento de caracteristica precio anterior y frecuencia
* @param number Pv_IdElemento
* @param string Pv_Servicios
* @param string Pv_UsuarioCrea
*
* @return string Lv_MensaError
*/

PROCEDURE INFRP_SOLICITUDES_MIGRACION_IP(   Pv_Servicios IN VARCHAR2,
                                            Pv_UsuarioCrea IN VARCHAR2,
                                            Lv_MensaError OUT VARCHAR2);

/**
* INFRP_PERFIL_EQUIVALENTE
*
* Procedimiento que obtiene el perfil equivalente del plan solicitado
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 05/04/2016
* @param varchar2 Pn_IdPlan
* @param number   Pn_IdOlt
* @param varchar2 Pv_Perfil
* @param varchar2 Pv_Marca
* @param varchar2 Pv_TipoNegocio
* @param varchar2 Pv_AprovisionamientoIp
* @param varchar2 Pv_TipoEjecucion
* @param varchar2 Pv_EmpresaCod
*
* @return string Lv_PerfilEqui
*/

PROCEDURE INFRP_PERFIL_EQUIVALENTE(
                                          Pn_IdPlan                     IN NUMBER,
                                          Pn_IdOlt                      IN NUMBER,
                                          Pv_Perfil                     IN VARCHAR2,
                                          Pv_Marca                      IN VARCHAR2,
                                          Pv_TipoNegocio                IN VARCHAR2,
                                          Pv_AprovisionamientoIp        IN VARCHAR2,
                                          Pv_TipoEjecucion              IN VARCHAR2,
                                          Pv_EmpresaCod                 IN VARCHAR2,
                                          Lv_PerfilEqui                 OUT VARCHAR2);

  /**
  * INFRF_GET_TRAZA_ELEMENTOS
  *
  * PROCEDIMIENTO QUE devuelve la trazabilidad de un elemento, recibe el interface del elemento inicial
  *
  * @author John Vera            <javera@telconet.ec>
  * @version 1.0 09/04/2014
  * @param number Pn_interfaceInicial
  * @param string Pv_tipoElementoPadre
  *
  * @return string Lv_traza
  */

FUNCTION INFRF_GET_TRAZA_ELEMENTOS(
    Pn_interfaceInicial  IN NUMBER,
    Pv_tipoElementoPadre    IN VARCHAR2)
  RETURN VARCHAR2;

  /**
  * INFRP_PROCESA_MIGRA_TG
  *
  * PROCEDIMIENTO DE MIGRACION DE CLIENTES TELCOGRAPH
  *
  * @author Jes¿s Bozada <jbozada@telconet.ec>
  * @version 1.0 17/05/2018
  * @since 1.0
  *
  * @author Jes¿s Bozada <jbozada@telconet.ec>
  * @version 1.1 12/11/2018    Se agrega campo server ip para nueva carga masiva de servicios pendientes por inconsistencias en PROD
  * @since 1.0
  */
  PROCEDURE INFRP_PROCESA_MIGRA_TG;

  /**
  * INFRP_CLONAR_SPLITTER
  *
  * PROCEDIMIENTO QUE CLONA UN SPLITTER TECNP_CLONAR_SPLITTER
  *
  * @author John Vera            <javera@telconet.ec>
  * @version 1.0 03/10/2014
  *
  * @author Jesus Bozada         <jbozada@telconet.ec>
  * @version 1.1 21/12/2015      Se agregan validaciones para servicios originados por reubicacion
  *                              - Se setea estado de servicio origen de reubicacion a estado Reubicado
  *                              - Se agreaga historial a servicio origen de reubicacion
  *
  * @author Lizbeth Cruz         <mlcruz@telconet.ec>
  * @version 1.2 20/06/2019      Se realizan modificaciones a las consultas de los cursores para tomar en cuenta los servicios Small Business
  *                              y TelcoHome que se encuentran en la red Gpon. Adem¿s se modifica el tipo medio de los enlaces creados, puesto que 
  *                              desde la opci¿n en Telcos, estos enlaces se crean con la ¿ltima milla Fibra ¿ptica
  *
  *
  * @param string Pv_IdSplitterOrigen
  * @param string Pv_NombreElemento
  * @param string Pv_IdInterfaceSplitterL1
  * @param string Pv_UsuarioCrea
  *
  * @return string Lv_MensaError
  */
  PROCEDURE INFRP_CLONAR_SPLITTER(
      Pv_IdSplitterOrigen      IN INFO_ELEMENTO.ID_ELEMENTO%TYPE,
      Pv_NombreElemento        IN INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE,
      Pv_IdInterfaceSplitterL1 IN INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE,
      Pv_idEmpresa             IN VARCHAR2,
      Pv_UsuarioCrea           IN VARCHAR2,
      Pv_IpIngresa             IN VARCHAR2,
      Lv_MensaError OUT VARCHAR2);

 /**
* INFRP_FINALIZAR_PROCESO_MASIVO
*
* PROCEDIMIENTO QUE FINALIZA LOS PROCESOS MASIVOS QUE TIENEN MAS DE UNA SEMANA
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 03/10/2014
*
* @author John Vera <javera@telconet.ec>
* @version 1.1 05/04/2016 reduce a 1 dia los procesos masivos y se consideran los cancelar clientes
*/
PROCEDURE INFRP_FINALIZAR_PROCESO_MASIVO; 

/*
* INFRF_GET_ELEMENTOS_INTERFAZ
* 
* Este metodo recibe una interfaz de un elemento y nos devuelve todos los elementos que salen de esta interfaz segun el tipo del elemento 
* y el nivel, devuelve en un solo string separados por "|"
* ID_ELEMENTO, NOMBRE_ELEMENTO, ID_INTERFACE_ELEMENTO, NOMBRE_TIPO_ELEMENTO, NIVEL, ELEMENTO_CONTENEDOR;
* 
* @param integer $interfaceElementoId  
* @param integer $tipoElementoPadre 
* @param integer $nivel 
* 
* @author  John Vera <javera@telconet.ec>
* @version 1.0 15-04-2015 
* @version 1.1 09-09-2015 modificado John Vera
*      
*/

FUNCTION INFRF_GET_ELEMENTOS_INTERFAZ(
    Pn_interfaceInicial IN NUMBER,
    Pv_tipoElemento     IN VARCHAR2,
    Pn_nivelElemento    IN NUMBER)
  RETURN VARCHAR2;

/*
* INFRF_GET_DETALLE_VALOR
* 
* Funcion que devuelve el detalle valor de un elemento dado el id del elemento y el nombre del detalle
* 
* @param varchar2 Pn_detalleNombre  
* @param number   Pn_idElemento 
* @param varchar2 Pn_estado
* 
* @author  Allan Suarez <arsuarez@telconet.ec>
* @version 1.0 10-02-2016
* 
* @author  Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.1 26-11-2019 Se modifica la forma de obtener el valor del detalle, ya que existen problemas al obtener m¿s de un registro en la consulta
*      
*/
FUNCTION INFRF_GET_DETALLE_VALOR(
    Pn_detalleNombre    IN VARCHAR2,
    Pn_idElemento       IN INFO_ELEMENTO.ID_ELEMENTO%TYPE,
    Pn_estado           IN VARCHAR2)
  RETURN VARCHAR2;


/**
* INFRP_GET_FACTIBILIDAD_WIFI
*
* Procedimiento que verifica si en un nodo wifi hay factibilidad y devuelve los id de los elementos con disponibilidad
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 10/05/2016
* @param number Pn_IdNodoWifi
*
* @return string Lv_resultado
* @return string Lv_MensaError
*/
PROCEDURE INFRP_GET_FACTIBILIDAD_WIFI(
                                        Pn_IdNodoWifi IN NUMBER,
                                        Pn_IdServicio IN NUMBER,
                                        Lv_resultado OUT VARCHAR2,
                                        Lv_MensaError OUT VARCHAR2 );


/**
* INFRP_REVERSA_MIGRACION_PLANES
*
* Procedimiento que reversa clientes de Olt migrado a planes ultra velocidad
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 13/02/2016
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.1 08/03/2016   Se agrega reverso de precio, frecuencia y de registros en tabla de caracteristicas del plan
*                           del servicio
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.2 16/03/2016   Se agrega reverso de tipo de aprovisionamiento de ip
* @param number Pn_IdOlt
* @param string Pv_MarcaOlt
*
* @return string Lv_MensaError
*/

PROCEDURE INFRP_REVERSA_MIGRACION_PLANES(   Pn_IdOlt IN NUMBER,
                                            Pv_MarcaOlt IN VARCHAR2,
                                            Lv_MensaError OUT VARCHAR2);

/**
* INFRP_CIERRA_TAREAS_SOLICITUD
*
* Procedimiento que cierra tareas relacionadas a una solicitud
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 18/02/2016
* @param number Pn_IdDetalleSolicitud
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.1 27-09-2016 - Se modifica el procedure para que en lugar de comparar la observacion del historial se compare la acci¿n,
*                           ya que la observaci¿n cambia dependiendo del servicio. El cambio se realizar¿ para obtener de manera correcta el
*                           el usuario que activa un servicio
*
* @author Richard Cabrera <rcabrera@telconet.ec>
* @version 1.2 11-09-2017 - En la tabla INFO_DETALLE_HISTORIAL se agregan los campos de persona_empresa_rol_id,departamento_origen_id,
*                           departamento_destino_id, accion y en la tabla INFO_TAREA_SEGUIMIENTO se agregan campos estado_tarea, departamento_id y
*                           persona_empresa_rol_id
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @version 1.3 14-10-2019 - Se modifica el procedure para poder finalizar tareas con el estado Pausada.
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.4 11-06-2020 - Se modifica el procedimiento para finalizar tareas de acuerdo al proceso de Regularizar.
*
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @version 1.5 17-08-2020 - Se modifica el procedure para poder finalizar tareas con el estado Asignada.
*
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @author Jean Pierre Nazareno <jnazareno@telconet.ec>
* @version 1.6 25-01-2021 - Se modifica el procedure para finalizar tareas de traslado.
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.7 28-05-2021 - Se quita el commit para la ejecuci¿n de cierre de tareas por el proceso Regularizar
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.8 06-05-2021 - Se modifica el procedimiento para finalizar tareas tomando en cuenta la observaci¿n enviada en el par¿metro Pv_Proceso 
*                           al crear el seguimiento
*
* @return string Lv_MensaError
*/

PROCEDURE INFRP_CIERRA_TAREAS_SOLICITUD(
                                          Pn_IdDetalleSolicitud IN NUMBER,
                                          Pv_Proceso            IN VARCHAR2,
                                          Lv_MensaError        OUT VARCHAR2);


/**
* INFRP_MIGRACION_LOGICA_TELLION
*
* Procedimiento que crea las solicitudes de migracion, 
* cambio de plan del elemento y migracion Logica de clientes TELLION
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 11/03/2016
* @param string Pv_Servicios
* @param string Pv_UsuarioCrea
*
* @return string Lv_MensaError
*/

PROCEDURE INFRP_MIGRACION_LOGICA_TELLION(   Pv_Servicios IN VARCHAR2,
                                            Pv_UsuarioCrea IN VARCHAR2,
                                            Lv_MensaError OUT VARCHAR2);


/**
 * INFRP_CREAR_REDES_Y_SUBREDES
 *
 * Procedimiento que crea redes y subredes de acuerdo al rango solicitado por el sistema.
 *
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.0 23/12/2015
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.1 08-08-2016 - Se agrega parametro Pv_PrefijoRed para la creaci¿n de subredes por un prefijo espec¿fico.

 * @author Allan Suarez <arsuarez@telconet.ec>
 * @version 1.2 23-09-2016 - Se actualiza variable Pv_FinRed para que se reciba directamente el limite de subred a crear

 * @param VARCHAR2 Pv_PrefijoRed  Prefijo con el cual se va a crear la subred clase C.
 * @param VARCHAR2 Pv_InicioRed   Inicio de la red que se desea crear
 * @param VARCHAR2 Pv_FinRed      Fin del intervalo de redes que se deseean
 * @param VARCHAR2 Pv_PrimerOct   Primer Octeto con el cual se crea el catalogo de subredes         
 * @param VARCHAR2 Pv_TercerOct   Tercer Octeto ( C ) con el cual se genera el catalogo de subredes
 * @param VARCHAR2 Pv_tipoUso     Tipo de Uso de la subred generada ( DATOSMPLS , INTMPLS , INTMPLSVSAT , DATOSVSAT )
 * @param VARCHAR2 Pv_tipoPrefijo Tipo del prefijo de subred de la red a ser creada, puede ser 'C' o 'P' ( CIudad o provincia ) servira como
 *                                validador del 3er octeto.
 *
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_CREAR_REDES_Y_SUBREDES( Pv_PrefijoRed  IN VARCHAR2,
                                        Pv_InicioRed   IN INTEGER,
                                        Pv_FinRed      IN INTEGER,
                                        Pv_PrimerOct   IN VARCHAR2,
                                        Pv_TercerOct   IN VARCHAR2,
                                        Pv_tipoUso     IN VARCHAR2,
                                        Pv_tipoPrefijo IN VARCHAR2,
                                        Lv_MensaError  OUT VARCHAR2 );


/**
 * INFRP_SUBNETING
 *
 * Procedimiento que subnetea las redes y subredes existentes.
 *
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.0 23/12/2015
 * @param VARCHAR2 Pv_TipoAccion         Tipo de Accion que se requiere realizar 'asignar' o 'liberar'
 * @param VARCHAR2 Pv_SubredId           Id de la Subred que se desea buscar
 * @param VARCHAR2 Pv_ElementoId         Id del Elemento al cual esta asociado una subred
 * @param VARCHAR2 Pv_SubredPrefijo      Subred que desea buscar la cual contiene los dos primeros octetos
 * @param VARCHAR2 Pv_Uso                Uso que tendr¿ la subred
 * @param VARCHAR2 Pv_Mascara            Mascara de red de la subred que desea buscar
 *
 * @return VARCHAR2 Pn_IdSubredEncontrada
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_SUBNETING(  
            Pv_TipoAccion         IN VARCHAR2,
            --
            Pv_SubredId           IN VARCHAR2, 
            Pv_ElementoId         IN VARCHAR2,
            Pv_SubredPrefijo      IN VARCHAR2,
            --
            Pv_Uso                IN VARCHAR2,
            Pv_Mascara            IN VARCHAR2,
            --
            Pn_IdSubredEncontrada OUT VARCHAR2,
            Lv_MensaError         OUT VARCHAR2 );

--
/**
* INSERT_PROCESO_MASIVO_CAB, realiza un insert en la tabla INFO_PROCESO_MASIVO_CAB
*
* @author Alexander Samaniego <awsamaniego@telconet.ec>
* @version 10-06-2016
* @since 1.0
*
* @param Pr_InfoProcesoMasivoCab    IN INFO_PROCESO_MASIVO_CAB%ROWTYPE                     Recibe un registro para INFO_PROCESO_MASIVO_CAB
* @param Pn_IdInfoProcesoMasivoCab OUT INFO_PROCESO_MASIVO_CAB.ID_PROCESO_MASIVO_CAB%TYPE  Retorna el ID segun la secuencia SEQ_INFO_PROCESO_MASIVO_CAB
* @param Pv_MsnError               OUT VARCHAR2                                            Retorna un mensaje de error
*
*/
PROCEDURE INSERT_PROCESO_MASIVO_CAB(
    Pr_InfoProcesoMasivoCab    IN INFO_PROCESO_MASIVO_CAB%ROWTYPE,
    Pn_IdInfoProcesoMasivoCab OUT INFO_PROCESO_MASIVO_CAB.ID_PROCESO_MASIVO_CAB%TYPE,
    Pv_MsnError               OUT VARCHAR2);
--
/**
* INSERT_PROCESO_MASIVO_DET, realiza un insert en la tabla INFO_PROCESO_MASIVO_DET
*
* @author Alexander Samaniego <awsamaniego@telconet.ec>
* @version 10-06-2016
* @since 1.0
*
* @param Pr_InfoProcesoMasivoDet    IN INFO_PROCESO_MASIVO_DET%ROWTYPE                     Recibe un registro para INFO_PROCESO_MASIVO_DET
* @param Pn_IdInfoProcesoMasivoDet OUT INFO_PROCESO_MASIVO_DET.ID_PROCESO_MASIVO_DET%TYPE  Retorna el ID segun la secuencia SEQ_INFO_PROCESO_MASIVO_DET
* @param Pv_MsnError               OUT VARCHAR2                                            Retorna un mensaje de error
*
*/
PROCEDURE INSERT_PROCESO_MASIVO_DET(
    Pr_InfoProcesoMasivoDet    IN INFO_PROCESO_MASIVO_DET%ROWTYPE,
    Pn_IdInfoProcesoMasivoDet OUT INFO_PROCESO_MASIVO_DET.ID_PROCESO_MASIVO_DET%TYPE,
    Pv_MsnError               OUT VARCHAR2);
--
/**
* CANCELACION_MASIVA_MD, realiza la busqueda de los servicios In-Corte con mas de 45 dias de la empresa MD
* para luego insertarlos en las tablas de procesos masivos, los estados y los dias para que el servicio
* pueda ser cancelado estan configurados en la tabla de parametros.
*
* @author Alexander Samaniego <awsamaniego@telconet.ec>
* @version 10-06-2016
* @since 1.0
*
* @author Alexander Samaniego <awsamaniego@telconet.ec>
* @version 1.1 29-07-2016 Se agrega filtro por Rol Cliente
* @since 1.0
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 13-02-2020 Se modifica la consulta para obtener los clientes a cancelar por nuevo desarrollo que guardar¿ el id 
*                     del ¿ltimo historial In-Corte v¿lido para realizar correctamente el conteo de d¿as In-Corte
*
* @author Alex Arreaga <atarreaga@telconet.ec>
* @version 18-11-2020 Se agrega validacion para realizar el proceso de generacion de NDI agrupadas.
*
* @author Jonathan Burgos <jsburgos@telconet.ec>
* @version 04-05-2023 Se agrega usuario de creacion por defecto para el proceso de cancelacion masiva.
*
*/
PROCEDURE CANCELACION_MASIVA_MD;
--
/**
* P_REGULARIZA_CLIENTE_RADIO_TN, realiza la regularizacion de un servicio TN con UM Radio
* Incluye :
*            Creacion de radio de BackBone en caso de no existir
*            Creacion de radio de Cliente y generaci¿n de enlaces
*            Actualizacion de tabla InfoServicioTecnico del cliente procesado
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 05-08-2016
* @since 1.0
*
* @param Pn_IdServicio     IN  INFO_SERVICIO.ID_SERVICIO%TYPE                         Identificador de un servicio
* @param Pv_NombreSw       IN  INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE                     Nombre de elemento Switch
* @param Pv_InterfaceSw    IN  INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO%TYPE Puerto de elemento Switch
* @param Pv_ValorModeloRbb IN  ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE       Valor del modelo de radio de backbone
* @param Pv_ValorMacRbb    IN  INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE               Valor de mac de radio de backbone
* @param Pv_ValorIpRbb     IN  INFO_IP.IP%TYPE                                        Valor de ip de radio de backbone
* @param Pv_ValorSidRbb    IN  INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE               Valor de sid de radio de backbone
* @param Pv_ValorModeloRc  IN  ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE       Valor de modelo de radio de cliente
* @param Pv_ValorMacRc     IN  INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE               Valor de mac de radio de cliente
* @param Pv_ValorSidRc     IN  INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE               Valor de sid de radio de cliente
* @param Pv_Status         OUT VARCHAR2                                               Status de ejecuci¿n del proceso
* @param Pv_MsnError       OUT VARCHAR2                                               Mensaje de error de resultado de ejecuci¿n
* @param Pv_MsnErrorBd     OUT VARCHAR2                                               Mensaje de error de b/d de resultado de ejecuci¿n
*
*/
PROCEDURE P_REGULARIZA_CLIENTE_RADIO_TN(
    Pn_IdServicio     IN INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_NombreSw       IN INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE,
    Pv_InterfaceSw    IN INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO%TYPE,
    Pv_ValorModeloRbb IN ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
    Pv_ValorMacRbb    IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorIpRbb     IN INFO_IP.IP%TYPE,
    Pv_ValorSidRbb    IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorModeloRc  IN ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
    Pv_ValorMacRc     IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorSidRc     IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_Status         OUT VARCHAR2,
    Pv_MsnError       OUT VARCHAR2,
    Pv_MsnErrorBd     OUT VARCHAR2);

/**
* INFRP_CREAR_VLANS_EN_PE, Crea el catalogo de VLANs para un nuevo PE
* 
* @author Allan Suarez <arsuarez@telconet.ec>
* @version 21-04-2017
* @since 1.0
*
* @param Pv_IdElementoPe     IN  INFO_ELEMENTO.ID_ELEMENTO%TYPE   Referencia del elemento Pe
* @param Pv_usuarioCreacion  OUT VARCHAR2                         Usuario que lanza la ejecucion desde el Telcos
* @param Lv_MensaError       OUT VARCHAR2                         Mensaje de error de b/d de resultado de ejecuci¿n
*
*/    
PROCEDURE INFRP_CREAR_VLANS_EN_PE( Pv_IdElementoPe    IN  INFO_ELEMENTO.ID_ELEMENTO%TYPE,
                                   Pv_usuarioCreacion IN  VARCHAR2,
                                   Lv_MensaError      OUT VARCHAR2);

/**
 * INFRP_OCUPA_SUBREDES
 *
 * Procedimiento que regulariza el estado tanto de los padres como de los hijos ocupados si la subred enviada se encuentra en estado ocupado.
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.0 25/08/2017
 * @param INTEGER Pn_IdSubred           Id de la Subred que se desea buscar
 * @param INTEGER Pn_IdSubredPadre      Id de la Subred padre de la subred enviada en Pn_IdSubred
 * @param VARCHAR2 Pv_Uso                Uso que tendr¿ la subred
 *
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_OCUPA_SUBREDES( Pn_IdSubred           IN INTEGER,
                                Pn_IdSubredPadre      IN INTEGER,
                                Pv_Uso                IN VARCHAR2,
                                Lv_MensaError         OUT VARCHAR2);

/**
 * INFRP_REGULA_REDES_Y_SUBREDES
 *
 * Procedimiento que crea y regulariza el ¿rbol de creaci¿n de subredes de acuerdo al rango solicitado.
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.0 23/08/2017
 *
 * @param VARCHAR2 Pv_PrefijoRed  Prefijo con el cual se va a crear la subred clase C.
 * @param INTEGER  Pn_InicioRed   Inicio de la red que se desea crear
 * @param INTEGER  Pn_FinRed      Fin del intervalo de redes que se deseean
 * @param VARCHAR2 Pv_PrimerOct   Primer Octeto con el cual se crea el catalogo de subredes         
 * @param VARCHAR2 Pv_TercerOct   Tercer Octeto ( C ) con el cual se genera el catalogo de subredes
 * @param VARCHAR2 Pv_Uso         Uso que se le da a la Subred
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_REGULA_REDES_Y_SUBREDES( Pv_PrefijoRed  IN VARCHAR2,
                                        Pn_InicioRed   IN INTEGER,
                                        Pn_FinRed      IN INTEGER,
                                        Pv_PrimerOct   IN VARCHAR2,
                                        Pv_TercerOct   IN VARCHAR2,
                                        Pv_Uso         IN VARCHAR2,
                                        Lv_MensaError  OUT VARCHAR2 );

/**
 * P_LIBERA_RECURSOS_FACTIBILIDAD
 *
 * Procedimiento que libera los recursos de factibilidad de todos los servicio cuyo tiempo de estado 'Factible' sobrepase la cantidad
 * parametrizada por empresa, regi¿n y ¿ltima milla. 
 * Adem¿s se enviar¿ una notificaci¿n con el consolidado de los servicios liberados con los alias parametrizados por empresa, regi¿n 
 * y ¿ltima milla y adicionalmente se enviar¿ un correo al vendedor del servicio notific¿ndole la liberaci¿n de recursos de factibilidad
 * y anulaci¿n de dicho servicio
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.0 16/10/2017
 *
 * @author Anabelle Pe¿aherrera<apenaherrera@telconet.ec>
 * @version 1.1 04/12/2018 - Se agrega que al momento de liberar recursos de factibilidad y anulacion del servicio que se realice el proceso
 *                           de reverso de la factura de contrato Fisico o Digital, se debe validar que se genere NC de Reverso solo si no existe
 *                           ya asociada una NC Activa.
 *
 * @author Josselhin Moreira<kjmoreira@telconet.ec>
 * @version 1.2 04/04/2019 - Se modifica el usuario de creaci¿n de NC a "telcos_liberacionFactib".
 *
 * @author Edgar Holgu¿n <eholguin@telconet.ec>
 * @version 1.3 12/08/2019 - Se modifica el usuario de creaci¿n de NC a "telcos_liberaFactib" .
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.4 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.5 21/06/2021 Se modifica el directorio usado para guardar el archivo temporal que posteriormente es enviado por correo de 
 *                         DIR_FACTIBILIDAD a RESPSOLARIS
 *
 */
PROCEDURE P_LIBERA_RECURSOS_FACTIBILIDAD;

/**
 * P_LIBERA_FACTIB_SERVICIO
 *
 * Procedimiento que libera los recursos de factibilidad de acuerdo a la empresa y ¿ltima milla de un servicio.
 * Costo = 19 Para opci¿n de b¿squeda de la informaci¿n t¿cnica de un servicio
 *
 * @param Pv_PrefijoEmpresa     IN VARCHAR2   Prefijo de la empresa 
 * @param Pn_IdServicioTecnico  IN NUMBER  Id del servicio t¿cnico
 * @param Pv_CodigoUltimaMilla  IN VARCHAR2  C¿digo de la ¿ltima milla del servicio
 *
 * @param Pv_StatusLiberacion   OUT VARCHAR2 Status de liberaci¿n
 * @param Pv_InfoTecnica        OUT VARCHAR2 Informaci¿n t¿cnica del servicio
 * @param Pv_MensajeError       OUT VARCHAR2 Mensaje de error
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.0 19/10/2017
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.1 12/11/2018 Se agrega liberaci¿n de factibilidad para los servicios con ¿ltima milla FTTx
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
 *
 */
PROCEDURE P_LIBERA_FACTIB_SERVICIO(
                                    Pv_PrefijoEmpresa       IN VARCHAR2,
                                    Pn_IdServicioTecnico    IN NUMBER,
                                    Pv_CodigoUltimaMilla    IN VARCHAR2,
                                    Pv_StatusLiberacion     OUT VARCHAR2,
                                    Pv_InfoTecnica          OUT VARCHAR2,
                                    Pv_MensajeError         OUT VARCHAR2 );

/**
 * INTMPLS_CREAR_SUBREDES
 *
 * Procedimiento que libera los recursos de factibilidad de acuerdo a la empresa y ¿ltima milla de un servicio.
 * Costo = 19 Para opci¿n de b¿squeda de la informaci¿n t¿cnica de un servicio
 *
 * @param pn_idElemento       IN NUMBER   Id de elemento padre
 * @param pn_id_subred_padre  IN NUMBER   Id de subred padre
 * @param pn_subred_mascara   IN NUMBER   indica el prefijo de subred
 * @param pn_subred_ip        IN VARCHAR2 ip de subred
 * @param pv_tag              IN VARCHAR2 indica el tab
 * @param pv_uso              IN VARCHAR2 indica cual ser¿ el uso de la subred
 *
 * @author John Vera R <javera@telconet.ec>
 * @version 1.1 02/10/2018 se modifica para que soporte lso prefijos 31
 *
 * @author John Vera R <javera@telconet.ec>
 * @version 1.2 26/10/2018 se corrige como se guardan los campos de gateway, ip inicio y final cuando la m¿scara es 31
 *
 * @author Richard Cabrera <rcabrera@telconet.ec>
 * @version 1.3 10/07/2020 se agrega validacion para identificar si las subredes a crear ya existen en estado Activo y Ocupado
 *
 * @author Richard Cabrera <rcabrera@telconet.ec>
 * @version 1.4 05/05/2021 se agrega validacion por USO para evitar subredes duplicadas.
 *
 */
PROCEDURE INTMPLS_CREAR_SUBREDES( pn_idElemento       IN NUMBER,
                                  pn_id_subred_padre  IN NUMBER,
                                  pn_subred_ip        IN VARCHAR2,
                                  pn_subred_mascara   IN NUMBER ,
                                  pv_tag              IN VARCHAR2,
                                  pv_uso              in varchar2,
                                  pv_msg_error        OUT VARCHAR2);


  /**
   * P_LIBERA_PUERTO_WIFI
   *
   * Procedimiento que libera los recursos de los servicios INTERNET WIFI
   *
   * @param Pn_IdServicio           IN NUMBER  Id del servicio
   * @param Pn_IdServicioTecnico    IN NUMBER  Id del servicio t¿cnico
   * @param Pn_IdServicioTecnico    IN NUMBER  Id de la interface del elemento conector
   * @param Pv_StatusLiberacion     OUT VARCHAR2 Status de liberaci¿n
   * @param Pv_MensajeError         OUT VARCHAR2 Mensaje de error
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 12/11/2018
   */
  PROCEDURE P_LIBERA_PUERTO_WIFI(
      Pn_IdServicio             IN NUMBER,
      Pn_IdServicioTecnico      IN NUMBER,
      Pn_InterfaceEleConectorId IN NUMBER,
      Pn_IdProducto             IN NUMBER,
      Pv_StatusLiberacion OUT VARCHAR2,
      Pv_MensajeError OUT VARCHAR2 );

  /**
   * F_GET_SERVICIOS_X_CONCENTRADOR
   *
   * Funci¿n que verifica si el servicio concentrador tiene extremos enlazados
   *
   * @param Fn_IdServicio IN NUMBER Id del servicio
   * @return VARCHAR2 Mensaje de error
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 12/11/2018
   */
  FUNCTION F_GET_SERVICIOS_X_CONCENTRADOR(
      Fn_IdServicio IN NUMBER)
    RETURN VARCHAR2;

  /**
   * P_ELIMINA_DEPENDENCIA_MISMA_UM
   *
   * Funci¿n que elimina las caracter¿sticas de servicio misma ¿ltima milla asociadas a otro servicios
   *
   * @param Pn_IdServicio   IN NUMBER Id del servicio
   * @param Pv_Status       OUT VARCHAR2 Status del proceso
   * @param Pv_MensajeError OUT VARCHAR2 Mensaje de error
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 13/11/2018
   */
  PROCEDURE P_ELIMINA_DEPENDENCIA_MISMA_UM(
      Pn_IdServicio IN NUMBER,
      Pv_UsrCreacion IN VARCHAR2,
      Pv_Status OUT VARCHAR2,
      Pv_MensajeError OUT VARCHAR2 );


  /**
   * P_RESERVAR_VLAN_PE
   *
   * Procedimiento encargada de reservar de forma masiva una VLAN en todos los PE de donde sale
   * un servicio de NEDETEL anillo 0
   *
   * @author Richard Cabrera <rcabrera@telconet.ec>
   * @version 1.0 22/08/2019
   *
   */
PROCEDURE P_RESERVAR_VLAN_PE(PN_PERSONA_EMP_ROL IN NUMBER,PV_VLAN IN VARCHAR2);

 /**
   * P_CONTEO_SERVICIOS
   *
   * Funci¿n que genera conteo de servicios que tienen Macfee
   *
   * @param Pn_IdServicio   IN NUMBER Id del servicio
   * @param Pn_Conteo       OUT NUMBER Numero de servicios que no tienen Mcafee
   * @param Pv_MensajeError OUT VARCHAR2 Mensaje de error
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 03/10/2019
   */
  PROCEDURE P_CONTEO_SERVICIOS(
      Pn_IdElemento   IN NUMBER,
      Pn_Reintento    IN NUMBER,
      Pn_Conteo       OUT NUMBER,
      Pv_MensajeError OUT VARCHAR2 );
 /**
   * P_REENVIO_ERROR_MIGRA_X_OLT
   * Procedimiento que obtiene la data que tuvo errores en la migraci¿n masiva para su posterior env¿o al siguiente d¿a
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 15-11-2019
   *
   */
  PROCEDURE P_REENVIO_ERROR_MIGRA_X_OLT;                                

  /**
   * P_ACTIVA_I_PROTEGIDO_REINT
   * Procedimiento que invoca al web service provisto por GMS para la activaci¿n de licencias de Internet Protegido con tecnolog¿a Kaspersky
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pn_TotalNumReintentos   IN NUMBER N¿mero de reintentos
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 18-11-2019
   *
   */
  PROCEDURE P_ACTIVA_I_PROTEGIDO_REINT(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pn_TotalNumReintentos   IN NUMBER,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_ACTUALIZA_REINTENTO
   * Procedimiento que actualiza el numero de reintentos
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE Login del punto
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_ValoresCaracts           OUT VARCHAR2 Cadena con los valores de las caracter¿sticas asociadas a la tecnolog¿a McAfee
   * @param Pv_ValoresCaractsReporte    OUT VARCHAR2 Cadena con los valores de las caracter¿sticas necesarias para el reporte de tecnolog¿a McAfee
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 18-11-2019
   *
   */
  PROCEDURE P_ACTUALIZA_REINTENTO(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2);  

  /**
   * P_REINTENTO_I_PROTEGIDO_ADICS
   * Procedimiento que realiza reintento de activaci¿n de las licencias de Internet Protegido adicionales
   * 
   * @param Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt Registro con la data del punto
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Estado de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pv_GestionaLicencias    OUT VARCHAR2 SI o NO se gestionan licencias adicionales de servicios Internet Protegido
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 18-11-2019
   *
   */
  PROCEDURE P_REINTENTO_I_PROTEGIDO_ADICS(
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2);

  /**
   * P_ELIMINA_CARACTS_REINT
   * Procedimiento que elimina las caracter¿sticas asociadas a un servicio Internet Protegido con tecnolog¿a McAfee
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE Login del punto
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_ValoresCaracts           OUT VARCHAR2 Cadena con los valores de las caracter¿sticas asociadas a la tecnolog¿a McAfee
   * @param Pv_ValoresCaractsReporte    OUT VARCHAR2 Cadena con los valores de las caracter¿sticas necesarias para el reporte de tecnolog¿a McAfee
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 16-12-2019
   *
   */
  PROCEDURE P_ELIMINA_CARACTS_REINT(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2);    

 /**
   * P_UPLOAD_CSV_CPM
   * Procedimiento para realizar la subida de un archivo csv para realizar el cambio de plan masivo
   * 
   * @param Pn_IdArchivoCsvCpm  IN VARCHAR2 Nombre del archivo
   * @param Pv_UsrCreacion      IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status           OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje          OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 24-12-2019
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 08-01-2020 Se reemplaza el caracter de retorno de carro por un caracter vac¿o
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 22-01-2020 Se agrega el error de la excepci¿n cuando no es posible adjuntar el archivo con el consolidado de la creaci¿n 
   *                         de solicitudes de cambio de plan masivo
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.4 16-06-2021 Se modifica los par¿metros que recibe la funci¿n debido al cambio de lectura del archivo subido para el cambio de plan
   *                         masivo desde el NFS
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.5 16-08-2021 Se parametriza el mapeo de la url usada para leer el contenido de los archivos subidos en la opci¿n de cambio de plan
   *                         masivo, reemplazando la url en formato https a http(nosites). Este problema ocurre directamente en producci¿n. 
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.6 08-09-2021 Se modifica el nombre del parámetro con los remitentes y asunto del correo de EXPORTAR_ARCHIVO_CORTE_MASIVO a 
   *                         EXPORTAR_ARCHIVO_CAMBIO_PLAN_MASIVO. No se afecta el proceso, sólo se modifica el nombre por error de descripción
   *
   */
  PROCEDURE P_UPLOAD_CSV_CPM(
    Pn_IdArchivoCsvCpm  IN NUMBER,
    Pv_UsrCreacion      IN VARCHAR2,
    Pv_Status           OUT VARCHAR2,
    Pv_Mensaje          OUT VARCHAR2);


 /**
   * P_ACTUALIZA_INFORMACION_CORTE
   * Procedimiento para generar la informaci¿n de corte v¿lida, que debe ser tomada en cuenta en el proceso de cancelaci¿n masiva
   * 
   * @param Pn_IdServicio           IN NUMBER Id del servicio
   * @param Pn_IdUltHistoInCorte    IN NUMBER Id del ¿ltimo historial In-Corte v¿lido que debe ser tomado en cuenta para la cancelaci¿n masiva
   * @param Pv_TipoProceso          IN VARCHAR2 Proceso que ejecuta el procedimiento: CORTE, CANCELACION 
   * @param Pv_Observacion          IN VARCHAR2 Observaci¿n del registro
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_IpCreacion           IN VARCHAR2 Ip de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 13-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Alberto Arias <farias@telconet.ec>
   * @version 1.2 17-05-2023 Se modifica validación del ID del historial del servicio para validar cuando llega en 0
   */
  PROCEDURE P_ACTUALIZA_INFORMACION_CORTE(
    Pn_IdServicio           IN NUMBER,
    Pn_IdUltHistoInCorte    IN NUMBER,
    Pv_TipoProceso          IN VARCHAR2,
    Pv_Observacion          IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_IpCreacion           IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

 /**
   * P_ENVIO_CORREO_ERROR_INFOCORTE
   * Procedimiento que env¿a un correo al no actualizarse de manera correcta la informaci¿n de corte usada para la cancelaci¿n masiva de MD
   * 
   * @param Pn_IdServicio           IN NUMBER Id del servicio
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 17-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_ENVIO_CORREO_ERROR_INFOCORTE(
    Pn_IdServicio   IN NUMBER,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2);

 /**
   * P_INACTIVA_INFOCORTE_X_CANCEL
   * Procedimiento que inactiva la informaci¿n de corte de los servicios que fueron cancelados en el proceso de cancelaci¿n masiva
   * 
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de ejecuci¿n
   * @param Pv_IpCreacion           IN VARCHAR2 Ip de ejecuci¿n
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 18-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_INACTIVA_INFOCORTE_X_CANCEL(
    Pv_UsrCreacion  IN VARCHAR2,
    Pv_IpCreacion   IN VARCHAR2,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2);

  /**
   * Procedimiento que realiza una solicitud de agregar equipo del
   * listado de un grid
   * @param  Pcl_JsonSolicitud      - Json enviado por Telcos
   *          Pn_NumeroRegistro     - N¿meros de registros enviados por ticket
   *          Pv_MensajeError       - Mensaje de error del sistemas
   *          Pv_Respuesta          - Respuesta de la petici¿n.
   * 
   * @author afayala <afayala@telconet.ec>
   * @version 1.0 20/03/2020 
   *
   * @author afayala <afayala@telconet.ec>
   * @version 1.1 29/04/2020 
   * Se agreg¿ variable de Usuario de creaci¿n de la generaci¿n de solicitud
   *
   * @author afayala <afayala@telconet.ec>
   * @version 1.2 19/05/2022 Se modifica programación para guardar los archivos .csv  
   *                         usando el microservicio para guardado de archivos en el NFS
   */
  PROCEDURE P_GEN_SOLICITUD_EQUIPO(
                                  Pcl_JsonSolicitud   IN  CLOB,
                                  Pn_NumeroRegistro   IN  INTEGER,
                                  Pv_UsuarioCreacion  IN  VARCHAR2,
                                  Pv_MensajeError     OUT VARCHAR2,
                                  Pv_Respuesta        OUT VARCHAR2) ;

 /**
   * P_ELIMINA_SOLS_DUAL_BAND_SERV
   * Procedimiento que elimina las solicitudes asociadas a servicios dual band
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE Id de la solicitud v¿lida para gesti¿n de
                                                                                                         equipos Dual Band
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pcl_DetalleSolsEliminadas   OUT CLOB Detalle de las solicitudes eliminadas
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 17-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_ELIMINA_SOLS_DUAL_BAND_SERV(
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2,
    Pcl_DetalleSolsEliminadas   OUT CLOB
  );

 /**
   * P_REGU_SOL_EQUIPOS_X_SERVICIO
   * Procedimiento que regulariza las solicitudes para gesti¿n de equipos Dual Band
   * 
   * @param Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos Tipo de datos de clientes a verificar
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 17-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 08-07-2020 Se modifica funci¿n por aumento de par¿metros en el procedimiento P_VERIF_EQUIPOS_W_Y_EXTENDER
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_REGU_SOL_EQUIPOS_X_SERVICIO(  
    Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2);

 /**
   * P_REGULA_EQUIPOS_W_Y_EXTENDER
   * Procedimiento que ejecutar¿ la regularizaci¿n de solicitudes de gesti¿n de equipos Dual Band para clientes que hayan ejecutado un cambio de plan
   * masivo a partir de noviembre del 2019 y que posterior hayan ejecutado un cambio de plan masivo individual a partir de enero del 2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 17-02-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 14-07-2020 Se modifica la consulta para agregar m¿s campos al tipo de dato Lr_DataClientesVerificaEquipos
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_REGULA_EQUIPOS_W_Y_EXTENDER;

  /**
   * P_CONTROL_BW_INTERFACE
   * Procedimiento para el control de ancho de banda (Fase2).
   * Se compara las capacidades de las interfaces Telcos Vs Equipos de la red
   * para determinar si se ejecuta un updgrade o un downgrade
   *
   * @author Felix Caicedo <facaicedo@telconet.ec>
   * @version 1.0 17-06-2020
   *
   * @author Felix Caicedo <facaicedo@telconet.ec>
   * @version 1.1 15-07-2020 - Se agrega un intervalo en la comparaci¿n de la capacidad de las interfaces
   *
   * @author Felix Caicedo <facaicedo@telconet.ec>
   * @version 1.2 29-10-2020 - Se agrega el ratio para la validaci¿n y control de ejecuciones del procedimiento
   *
   */
  PROCEDURE P_CONTROL_BW_INTERFACE;

 /**
   * P_CANCEL_ELIM_SERVS_DUAL_BAND
   * Procedimiento que cancela o elimina los servicios Wifi o Extender Dual Band adicionales
   * 
   * @param Pn_IdPunto                  IN DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE Id del punto
   * @param Pv_NombreTecnicoProducto    IN DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE Nombre técnico del producto a cancelarse/eliminarse
   * @param Pn_IdServicioUnicoACancelar IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio único que debe cancelarse
   * @param Pn_IdServicioANoCancelar    IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio que no debe cancelarse
   * @param Pv_EliminaDataTecnica       IN VARCHAR2 Se debe actualizar la data técnica
   * @param Pv_ObsProcesoEjecutante     IN VARCHAR2 Observación de proceso que ejecuta
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creación
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creación
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecución del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecución del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 01-07-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 20-07-2020 Se agrega el estado In-Corte de servicios Dual Band que serán cancelados/eliminados
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 16-12-2021 Se corrigen los caracteres especiales por las tildes correspondientes ya que nuevamente el paquete tiene caracteres 
   *                         especiales
   *
   */
  PROCEDURE P_CANCEL_ELIM_SERVS_DUAL_BAND(
    Pn_IdPunto                  IN DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE,
    Pv_NombreTecnicoProducto    IN DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE,
    Pn_IdServicioUnicoACancelar IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdServicioANoCancelar    IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_EliminaDataTecnica       IN VARCHAR2,
    Pv_ObsProcesoEjecutante     IN VARCHAR2,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_IpCreacion               IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2);

 /**
   * P_CREA_SERVICIO_DUAL_BAND
   * Procedimiento que crea un servicio un Wifi Dual Band o Extender Dual Band de manera autom¿tica
   * 
   * @param Pr_InfoCreacionServDualBand IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoCreacionServicioDb Informaci¿n adicional del servicio a crear
   * @param Pn_IdElementoClienteSt      IN DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID%TYPE Id del servicio ¿nico que debe cancelarse
   * @param Pn_IdInterfaceEleClienteSt  IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio que no debe cancelarse
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pn_IdServicioNuevo          OUT VARCHAR2 Id del servicio nuevo que se crear¿
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 01-07-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 20-07-2020 Se modifica la observaci¿n del servicio
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 20-09-2020 Se agrega nuevo par¿metro para especificar si el servicio adicional dual band tiene precio de venta = 0
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_CREA_SERVICIO_DUAL_BAND(
    Pr_InfoCreacionServDualBand IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoCreacionServicioDb,
    Pn_IdElementoClienteSt      IN DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID%TYPE,
    Pn_IdInterfaceEleClienteSt  IN DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_IpCreacion               IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2, 
    Pv_MsjError                 OUT VARCHAR2,
    Pn_IdServicioNuevo          OUT DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE);

 /**
   * P_EJECUTA_CAMBIOPLAN_DUAL_BAND
   * Procedimiento que ejecuta el cambio de plan respecto a equipos Dual Band
   * 
   * @param Pr_RegClienteAVerificar     IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos Registro con la información del servicio a
   *                                                                                                    verificar
   * @param Pn_IdPlanAnterior           IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE Id del plan anterior
   * @param Pn_IdPlanNuevo              IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE Id del plan nuevo
   * @param Pv_ObsProcesoEjecutante     IN VARCHAR2 Observación del proceso que invoca el procedimiento
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creación
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creación
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecución del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecución del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 01-07-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 22-07-2020 Se invoca función P_CREA_SOL_AGREGAR_DUAL_BAND que contiene toda la programación de la creación de solicitud de agregar
   *                         equipo con sus respectivos detalles de equipos dual band
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 22-09-2020 Se agregan las validaciones respectivas para nuevo flujo de cambio de plan tomando en cuenta el nuevo producto W+AP
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 01-02-2021 Se agregan los parámetros de proceso ejecutante y observación de proceso ejecutante, ya que la opción será usada 
   *                         desde el cambio de plan masivo
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.4 15-04-2021 Se agrega validación para no eliminar por regularización la solicitud de cambio de ont por agregación de extender.
   *                         Además, se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.5 16-12-2021 Se agrega validación para que los planes que incluyen Wifi y Extender dual band con tecnología ZTE no continúen con
   *                         el flujo existente de Huawei. Además, se corrigen los caracteres especiales por las tildes correspondientes ya que 
   *                         nuevamente el paquete tiene caracteres especiales
   *
   */
  PROCEDURE P_EJECUTA_CAMBIOPLAN_DUAL_BAND(
    Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
    Pn_IdPlanAnterior       IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pn_IdPlanNuevo          IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pv_ObsProcesoEjecutante IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_IpCreacion           IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2);

 /**
   * P_EJECUTA_PROCESOS_CAMBIOPLAN
   * Procedimiento que ejecuta el cambio de plan respecto a equipos Dual Band
   * 
   * @param Pn_IdServicioInternet       IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio de Internet
   * @param Pn_IdPlanAnterior           IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE Id del plan anterior
   * @param Pn_IdPlanNuevo              IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE Id del plan nuevo
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creación
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creación
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecución del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecución del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 01-07-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se valida que la solicitud de agregar equipo no sea de cambio de ont por agregar extender, 
   *                         para evitar que se elimine en el proceso de regularización. Además, se corrigen los caracteres especiales por 
   *                         las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 16-12-2021 Se corrigen los caracteres especiales por las tildes correspondientes ya que nuevamente el paquete tiene caracteres 
   *                         especiales
   *
   * @author Emmanuel Martillo <emartillo@telconet.ec>
   * @version 1.3 03-03-2023 Se agrega parametro por codigo de empresa para busqueda de Informacion del Servicio a Verificar 
   *                         para ecuanet, pueda seguir el flujo de MD. 
   *
   */
  PROCEDURE P_EJECUTA_PROCESOS_CAMBIOPLAN(
    Pn_IdServicioInternet IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdPlanAnterior     IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pn_IdPlanNuevo        IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pv_UsrCreacion        IN VARCHAR2,
    Pv_IpCreacion         IN VARCHAR2,
    Pv_Status             OUT VARCHAR2, 
    Pv_MsjError           OUT VARCHAR2);

 /**
   * P_CLONACION_SOLICITUDES
   * Procedimiento que clona las solicitudes parametrizadas desde un servicio origen a un servicio destino
   * 
   * @param Pr_DataGeneralClienteDestino    IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataGeneralCliente Registro con la informaci¿n del servicio destino
   * @param Pn_IdServicioOrigen             IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pv_ProcesoEjecutante            IN VARCHAR2 Proceso que ejecuta el procedimiento
   * @param Pv_UsrCreacion                  IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_IpCreacion                   IN VARCHAR2 Ip de creaci¿n
   * @param Pv_Status                       OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                     OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 01-07-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 14-07-2020 Se inicializa correctamente la variable Lv_CreaHistorialesServicios = 'NO'
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_CLONACION_SOLICITUDES(
    Pr_DataGeneralClienteDestino  IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataGeneralCliente,
    Pn_IdServicioOrigen           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_ProcesoEjecutante          IN VARCHAR2,
    Pv_UsrCreacion                IN VARCHAR2,
    Pv_IpCreacion                 IN VARCHAR2,
    Pv_Status                     OUT VARCHAR2,
    Pv_MsjError                   OUT VARCHAR2);

 /**
   * P_ELIMINA_SOLS_GESTIONA_ONT
   * Procedimiento que elimina las solicitudes de 'SOLICITUD CAMBIO EQUIPO POR SOPORTE', 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO', 
   * y 'SOLICITUD CAMBIO DE MODEM INMEDIATO' asociadas al CPE ONT
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio
   * @param Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE Id de la solicitud v¿lida para gesti¿n de
                                                                                                         equipo
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * @param Pcl_DetalleSolsEliminadas   OUT CLOB Detalle de las solicitudes eliminadas
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 22-02-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_ELIMINA_SOLS_GESTIONA_ONT(
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2,
    Pcl_DetalleSolsEliminadas   OUT CLOB);

 /**
   * P_CREA_SOL_AGREGAR_DUAL_BAND
   * Procedimiento que crea una SOLICITUD AGREGAR EQUIPO para los equipos dual band
   * 
   * @param Pr_RegClienteAVerificar     IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos Registro con la informaci¿n del servicio a
   *                                                                                                    verificar
   * @param Pn_IdServicioOrigen         IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio, para el caso del traslado es del servicio 
   *                                                                                   origen
   * @param Pv_CreaSolCaractWdb         IN VARCHAR2 'SI' o 'NO' se crea la caracter¿stica WIFI DUAL BAND asociada a la solicitud
   * @param Pv_CreaSolCaractEdb         IN VARCHAR2 'SI' o 'NO' se crea la caracter¿stica EXTENDER DUAL BAND asociada a la solicitud
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creaci¿n
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecuci¿n del procedimiento
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 22-07-2020
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 24-09-2020 Se realizan modificaciones que permitan agregar una solicitud de agregar equipo asociada a un servicio W+AP que a¿n le 
   *                         falta por instalar el Extender
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   */
  PROCEDURE P_CREA_SOL_AGREGAR_DUAL_BAND(
      Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
      Pn_IdServicioOrigen     IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
      Pv_CreaSolCaractWdb     IN VARCHAR2,
      Pv_CreaSolCaractEdb     IN VARCHAR2,
      Pv_UsrCreacion          IN VARCHAR2,
      Pv_IpCreacion           IN VARCHAR2,
      Pv_Status               OUT VARCHAR2,
      Pv_MsjError             OUT VARCHAR2);

 /**
   * P_GENERA_SOLS_POR_TRASLADO
   * Procedimiento que gestiona las solicitudes asociadas a equipos al realizar un traslado
   * 
   * @param Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE Id del servicio destino
   * @param Pv_CodEmpresa               IN VARCHAR2 Id de la empresa
   * @param Pv_ObsProcesoEjecutante     IN VARCHAR2 'SI' o 'NO' se crea la característica EXTENDER DUAL BAND asociada a la solicitud
   * @param Pv_UsrCreacion              IN VARCHAR2 Usuario de creación
   * @param Pv_IpCreacion               IN VARCHAR2 Ip de creación
   * @param Pv_Status                   OUT VARCHAR2 Status de la ejecución del procedimiento
   * @param Pv_MsjError                 OUT VARCHAR2 Mensaje de error de la ejecución del procedimiento 
   * 
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 22-07-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 24-09-2020 Se realizan cambios en la función debido a cambios externos por flujo de producto W+AP
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 16-12-2021 Se agrega validación para que los planes que incluyen Wifi y Extender dual band con tecnología ZTE no continúen con
   *                         el flujo existente de Huawei. Además, se corrigen los caracteres especiales por las tildes correspondientes ya que 
   *                         nuevamente el paquete tiene caracteres especiales
   *
   */
  PROCEDURE P_GENERA_SOLS_POR_TRASLADO(
    Pn_IdServicio           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_CodEmpresa           IN VARCHAR2,
    Pv_ObsProcesoEjecutante IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_IpCreacion           IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2);

  /**
   * P_GET_CSV_PUNTOS_CORTE_MASIVO
   * Procedimiento que obtiene el archivo CSV generado por el usuario desde la consulta de puntos para cortar masivamente
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 13-08-2020
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.1 15-04-2021 Se corrigen los caracteres especiales por las tildes correspondientes
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.2 14-06-2021 Se modifica programaci¿n para guardar los archivos .csv generados al exportar los registros de los clientes 
   *                         que se cortar¿n, usando el microservicio para guardado de archivos en el NFS
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.3 20-09-2021 Se agrega al CSV la información de los filtros de fecha de creación y tipos de documentos
   *
   * @author Javier Hidalgo <jihidalgo@telconet.ec>
   * @version 1.4 11-10-2022 Se agrega al CSV la información de los filtros de instalados hasta y archivo adjunto/doc.
   *                            Ademas, se agregan nuevas columnas Fecha de Activación, Identificacion y Es Excluido.
   *
   * @author Jessenia Piloso <jpiloso@telconet.ec>
   * @version 1.5 15-03-2023 Se agrega el parametro CodEmpresa en la respuesta del Json para consultar por empresa 
   *                         los parametros en la tabla ADMI_GESTION_DIRECTORIOS y para enviar el prefijo de la empresa en el insert 
   *                          de la tabla INFO_DOCUMENTO.
   *
   * @param  Pcl_JsonFiltrosBusqueda  IN CLOB Json con los filtros para la consulta
   * @param  Pv_UsrConsulta           IN VARCHAR2 Usuario que realiza la consulta en el corte masivo
   * @param  Pv_Status                OUT VARCHAR2 Status de procedimiento
   * @param  Pv_MsjError              OUT VARCHAR2 Mensaje de error
   * @param  Pn_IdDocumento           OUT NUMBER Id del archivo csv generado
   *
   */
  PROCEDURE P_GET_CSV_PUNTOS_CORTE_MASIVO(
    Pcl_JsonFiltrosBusqueda IN CLOB,
    Pv_UsrConsulta          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2,
    Pn_IdDocumento          OUT NUMBER);

  /**
   * P_ELIMINA_CSVS_CORTE_MASIVO
   * Procedimiento que elimina los archivos generados por corte masivo
   *
   * @author Lizbeth Cruz <mlcruz@telconet.ec>
   * @version 1.0 16-08-2020
   *
   */
  PROCEDURE P_ELIMINA_CSVS_CORTE_MASIVO;

  /**
   * P_UPGRADE_SERVICIOS_POR_RAZON_SOCIAL
   * Procedimiento para actualizar las capacidades a todos los servicios de un cliente que no superen un valor m¿nimo de BW
   *
   * @author Felix Caicedo <facaicedo@telconet.ec>
   * @version 1.0 15-10-2020
   *
   * @param  Pcl_JsonRequest          IN CLOB [
    *               strRazonSocial              VARCHAR2 - Razon social de los clientes a obtener los servicios
   *                strExtHistorial             VARCHAR2 - Historial en los servicios actualizados
   *                strIdProductos              VARCHAR2 - Id de los productos a actualizar separados por coma
   *                strIdProductosNotBw         VARCHAR2 - Id de los productos que no actualizan capacidad en los equipos
   *                intBwMinimo                 NUMBER   - Capacidad minima que debe tener el servicio
   *                intBwAumento                NUMBER   - Capacidad aumentar al servicio
   *                booleanProporcional         BOOLEAN  - Boolean que identifica si se aumenta propocional a la capacidad o el valor fijo
   *                intBwMinimoInterface        VARCHAR2 - Capacidad minima que debe tener la interface para ejecutar script networking
   *                booleanPrintResult          BOOLEAN  - Boolean que permite imprimir las salidas DBMS
   *                booleanDowngrade            BOOLEAN  - Boolean que permite bajar bw
   *            ]
   * @param  Pv_Status                OUT VARCHAR2 Status de procedimiento
   * @param  Pv_Mensaje               OUT VARCHAR2 Mensaje de procedimiento
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.2 13-11-2020 Se agrega validaci¿n si es downgrade o upgrade
   */
  PROCEDURE P_UPGRADE_SERVICIOS_CLIENTE(
    Pcl_JsonRequest         IN CLOB,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);


  /**
   * SUBNETEAR_CLASE_B
   * Procedimiento que subnetea una ip de clase B
   *
   * @author Richard Cabrera <rcabrera@telconet.ec>
   * @version 1.0 22-09-2020
   *
   * @author Richard Cabrera <rcabrera@telconet.ec>
   * @version 1.1 05/05/2021 se agrega validacion por USO para evitar subredes duplicadas
   *
   */
  PROCEDURE SUBNETEAR_CLASE_B( pn_idElemento       IN NUMBER,
	                       pv_subred_ip        IN VARCHAR2,
	                       pv_subred_mascara   IN VARCHAR2,
	                       pv_uso              IN VARCHAR2,
	                       pv_tipo             IN VARCHAR2,
	                       pv_msg_error        OUT VARCHAR2);

  /**
   * P_GENERAR_MASIVO_CONTROL_BW
   * Procedimiento para generar los procesos masivos de upgrade/downgrade, tareas internas y reporte correo unificado
   * de las ejecuciones del control de ancho de banda de las interfaces.
   *
   * @param  Pv_TipoMasivo            IN VARCHAR2 Tipo de la ejecucion
   * @param  Pn_IdParametroEjecucion  IN NUMBER Id de la ejecucion
   * @param  Pn_IdElemento            IN NUMBER Id del elemento
   * @param  Pn_IdInterface           IN NUMBER Id de la interface
   * @param  Pv_Ciudad                IN VARCHAR2 Nombre de la ciudad
   * @param  Pv_Historial             IN VARCHAR2 Datos del historial
   * @param  Pv_UserWs                IN VARCHAR2 Usuario de creacion
   * @param  Pcl_Capacidades          IN CLOB Json de las capacidades
   * @param  Pv_Status                OUT VARCHAR2 Status de procedimiento
   * @param  Pv_Mensaje               OUT VARCHAR2 Mensaje de procedimiento
   *
   * @author Felix Caicedo <facaicedo@telconet.ec>
   * @version 1.0 29-10-2020
   */
  PROCEDURE P_GENERAR_MASIVO_CONTROL_BW(
      Pv_TipoMasivo             IN VARCHAR2,
      Pn_IdParametroEjecucion   IN NUMBER,
      Pn_IdElemento             IN NUMBER,
      Pn_IdInterface            IN NUMBER,
      Pv_Ciudad                 IN VARCHAR2,
      Pv_Historial              IN VARCHAR2,
      Pv_UserWs                 IN VARCHAR2,
      Pcl_Capacidades           IN CLOB,
      Pv_Status                 OUT VARCHAR2,
      Pv_Mensaje                OUT VARCHAR2);

  /**
   * P_UPLOAD_CSV_POLICY_SCOPE
   * Procedimiento para realizar la subida de un archivo csv para realizar la creaci¿n de Policy y Scopes
   * 
   * @param Pv_NombreArchivoPsm     IN VARCHAR2 Nombre del archivo
   * @param Pv_ExtensionArchivoPsm  IN VARCHAR2 Extensi¿n del archivo
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Alberto Arias <farias@telconet.ec>
   * @version 1.1 03/10/2022 se modifica el proceso para leer un archivo desde nfs y no de directorio local
   *
   * @param Pn_IdArchivoCsvCpm      IN VARCHAR2 ID del archivo guardado en el nfs
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creación
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecución del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecución del procedimiento
   * 
   */
  PROCEDURE P_UPLOAD_CSV_POLICY_SCOPE(
    Pn_IdArchivoCsvCpm      IN NUMBER,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_VALIDA_LINEA_CSV_PSM
   * Procedimiento para validar una l¿nea de un archivo csv
   * 
   * @param Pv_ContenidoLinea       IN VARCHAR2 Contenido de la l¿nea
   * @param Pv_DelimitadorCampo     IN VARCHAR2 Delimitador de los campos de la l¿nea CSV
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_TipoError            OUT VARCHAR2 Tipo de error de la l¿nea
   * @param Pr_RegDataPorProcesar   OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm Registro para procesar la generaci¿n masiva
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 03-03-2021
   *
   */
   PROCEDURE P_VALIDA_LINEA_CSV_PSM(
    Pv_ContenidoLinea           IN VARCHAR2,
    Pv_DelimitadorCampo         IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_TipoError                OUT VARCHAR2,
    Pr_RegDataPorProcesar       OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm);

    /**
    * SUBNETEAR_SUBRED_HIJAS
    *
    * Procedimiento que subnetea las subredes hijas de subredes ya existentes y actualiza el elemento y el uso
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.0 07-08-2021
    */
    PROCEDURE SUBNETEAR_SUBRED_HIJAS(
        pn_idElementoAnt    IN NUMBER,
        pn_idElementoNuevo  IN NUMBER,
        pv_subred_ip        IN VARCHAR2,
        pv_subred_mascara   IN VARCHAR2,
        pv_usoAnterior      IN VARCHAR2,
        pv_usoNuevo         IN VARCHAR2,
        pv_tipo             IN VARCHAR2,
        pv_status           OUT VARCHAR2,
        pv_mensaje          OUT VARCHAR2);

  /**
   * P_NOTIFICA_FIN_SEGURIDAD_CPE
   *
   * PROCEDIMIENTO QUE ENV¿A NOTIFICACIONES POR LICENCIAS A CADUCAR
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 23/07/2021
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.1 02/09/2021 se agrega llamada a webservice para actualizaci¿n de fechas a expirarse
   *
   */
   PROCEDURE P_NOTIFICA_FIN_SEGURIDAD_CPE;

  /*
  * Documentaci¿n para PROCEDURE 'P_GET_SECURE_CPE'.
  * Procedure que me permite obtener lista de productos secure cpe seg¿n filtros enviados como par¿metros.
  *
  * PARAMETROS:
  * @Param number         Pn_EmpresaId  (empresa a generar el reporte)
  * @Param varchar2       Pv_PrefijoEmpresa   Prefijo de empresa en sesion
  * @Param varchar2       Pv_UsrSesion  Usuario en sesion
  * @Param varchar2       Pv_FechaCreacionDesde (rango inicial para consulta por fecha de creaci¿n del documento)
  * @Param varchar2       Pv_FechaCreacionHasta (rango final para consulta por fecha de creaci¿n del documento)
  * @Param number         Pn_Start (Rango inicial de consulta)
  * @Param number         Pn_Limit (Rango final consulta) 
  * @param number         Pn_TotalRegistros  OUT  ( Total de registros obtenidos de la consulta )
  * @param SYS_REFCURSOR  Pr_Documentos      OUT  ( Cursor con los documentos obtenidos de la consulta )
  * @author Antonio Ayala <afayala@telconet.ec>
  * @version 1.0 03-09-2021
  */

  PROCEDURE P_GET_SECURE_CPE(
    Pn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Pv_PrefijoEmpresa               IN  VARCHAR2,
    Pv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Pv_FechaCreacionDesde           IN  VARCHAR2,
    Pv_FechaCreacionHasta           IN  VARCHAR2,
    Pn_Start                        IN  NUMBER,
    Pn_Limit                        IN  NUMBER,
    Pn_TotalRegistros               OUT NUMBER,
    Pc_Documentos                   OUT SYS_REFCURSOR
  );

  /*
  * Documentaci¿n para la funci¿n 'F_GET_SECURE_CPE'.
  * Funci¿n que me permite obtener lista de productos Secure Cpe seg¿n filtros enviados como par¿metros.
  *
  * PARAMETROS:
  * @Param varchar2 Fn_EmpresaCod (empresa a generar el reporte)
  * @Param varchar2 Fv_PrefijoEmpresa   Prefijo de empresa en sesion
  * @Param varchar2 Fv_UsrSesion  Usuario en sesion
  * @Param varchar2 Fv_FechaCreacionDesde (rango inicial para consulta por fecha de creaci¿n del documento)
  * @Param varchar2 Fv_FechaCreacionHasta (rango final para consulta por fecha de creaci¿n del documento)
  * @Param number   Fn_Start   Rango inicial de consulta
  * @Param number   Fn_Limit   Rango final de consulta
  * @param number   Fn_TotalRegistros  OUT  ( Total de registros obtenidos de la consulta )
  * @author Antonio Ayala <afayala@telconet.ec>
  * @version 1.0 03-09-2021
  */

  FUNCTION F_GET_SECURE_CPE(
    Fn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Fv_PrefijoEmpresa               IN  VARCHAR2,
    Fv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Fv_EmailUsrSesion               IN  VARCHAR2,
    Fv_FechaCreacionDesde           IN  VARCHAR2,
    Fv_FechaCreacionHasta           IN  VARCHAR2,
    Fn_Start                        IN  NUMBER,
    Fn_Limit                        IN  NUMBER,
    Fn_TotalRegistros               IN  NUMBER
  )
    RETURN SYS_REFCURSOR;

  /*
  * Funcion que sirve para obtener el total de los registros consultados
  * @author Antonio Ayala <afayala@telconet.ec>
  * @version 1.0  03-09-2021
  * @param  CLOB  Lcl_Consulta  Sql que se consulta
  * @return NUMBER              Cantidad de registros
  */
  --
  FUNCTION F_GET_COUNT_REFCURSOR(
      Lcl_Consulta IN CLOB)
    RETURN NUMBER; 

  /*
  * Documentaci¿n para PROCEDURE 'P_REPORTE_SECURE_CPE'.
  * Procedure que me permite generar reporte de productos secure cpe en formato csv y enviarlo por mail seg¿n filtros enviados como par¿metros.
  *
  * PARAMETROS:
  * @Param number   Pn_EmpresaId  (empresa a generar el reporte)
  * @Param varchar2 Pv_PrefijoEmpresa   Prefijo de empresa en sesion
  * @Param varchar2 Pv_UsrSesion  Usuario en sesion
  * @Param varchar2 Pv_EmailUsrSesion   Email de usuario en sesi¿n
  * @Param varchar2 Pv_FechaCreacionDesde (rango inicial para consulta por fecha de creaci¿n del documento)
  * @Param varchar2 Pv_FechaCreacionHasta (rango final para consulta por fecha de creaci¿n del documento)
  * @author Antonio Ayala <afayala@telconet.ec>
  * @version 1.0 03-09-2021
  */

  PROCEDURE P_REPORTE_SECURE_CPE(
    Pn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Pv_PrefijoEmpresa               IN  VARCHAR2,
    Pv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Pv_EmailUsrSesion               IN  VARCHAR2,
    Pv_FechaCreacionDesde           IN  VARCHAR2,
    Pv_FechaCreacionHasta           IN  VARCHAR2
  );

  /**
   * P_UPLOAD_CSV_RUTAS
   * Procedimiento para realizar la subida de un archivo csv para realizar la creaci¿n de Rutas
   * 
   * @param Pv_NombreArchivoPsm     IN VARCHAR2 Nombre del archivo
   * @param Pv_ExtensionArchivoPsm  IN VARCHAR2 Extensi¿n del archivo
   * @param Pv_UsrCreacion          IN VARCHAR2 Usuario de creaci¿n
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_Mensaje              OUT VARCHAR2 Mensaje de la ejecuci¿n del procedimiento
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 01-06-2021
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.1 07-06-2022 Se parametriza el mapeo de la url usada para leer el contenido de los archivos subidos en la opci�n de subida
   *                         de rutas masivo, reemplazando la url en formato https a http(nosites). Este problema ocurre directamente 
   *                         en produccion.
   *
   * @author Steven Ruano <sruano@telconet.ec>
   * @version 1.2 11-11-2022 Se modifico cursor de extraccion de cadenas para mas de
   *                         4000 caracteres.
   */
  PROCEDURE P_UPLOAD_CSV_RUTAS(
    Pn_IdArchivoCsvPsm      IN NUMBER,
    Pv_NombreArchivoPsm     IN VARCHAR2,
    Pv_ExtensionArchivoPsm  IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2);

  /**
   * P_VALIDA_REG_TABLA_RUTAS
   * Procedimiento para validar registros de la tabla temporal TEMP_RUTA_CAB
   * 
   * @param Pv_ContenidoLinea       IN  DB_INFRAESTRUCTURA.TEMP_RUTA_CAB%ROWTYPE
   * @param Pv_Status               OUT VARCHAR2 Status de la ejecuci¿n del procedimiento
   * @param Pv_TipoError            OUT VARCHAR2 Tipo de error de la l¿nea
   * @param Pr_RegDataPorProcesar   OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm Registro para procesar la generaci¿n masiva
   * 
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.0 07-01-2022
   *
   * @author Antonio Ayala <afayala@telconet.ec>
   * @version 1.1 23-06-2022 Se agrega insert en la tabla INFO_DETALLE_ELEMENTO por el campo UBICADO EN
   */
   PROCEDURE P_VALIDA_REG_TABLA_RUTAS(
    Pv_ContenidoLinea           IN  DB_INFRAESTRUCTURA.TEMP_RUTA_CAB%ROWTYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_TipoError                OUT VARCHAR2,
    Pv_ErrorElemento            OUT CLOB,
    Pr_RegDataPorProcesar       OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarRutas);


       /**
   * P_CARGA_ADMI_PARAMETRO_CAB
   * Procedimiento para llenar las tablas de ADMI PARAMETRO CAB
   *
   * @param Pv_NombreParametro  IN VARCHAR2
   * @param Pv_Descripcion      IN VARCHAR2
   * @param Pv_Modulo           IN VARCHAR2
   * @param Pv_Estado           IN VARCHAR2
   * @param Pv_UsrCreacion      IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_ADMI_PARAMETRO_CAB(
     Pv_NombreParametro  IN VARCHAR2,
     Pv_Descripcion      IN VARCHAR2,
     Pv_Modulo           IN VARCHAR2,
     Pv_Estado           IN VARCHAR2,
     Pv_UsrCreacion      IN VARCHAR2);
     
   
  /**
   * P_CARGA_ADMI_PARAMETRO_DET
   * Procedimiento para llenar las tablas de ADMI PARAMETRO DET
   *
   * @param Pv_NombreParametro    IN VARCHAR2
   * @param Pv_EstadoParametro    IN VARCHAR2
   * @param Pv_Descripcion        IN VARCHAR2
   * @param Pv_Valor1             IN VARCHAR2
   * @param Pv_Valor2             IN VARCHAR2
   * @param Pv_Valor3             IN VARCHAR2
   * @param Pv_Valor4             IN VARCHAR2
   * @param Pv_Estado             IN VARCHAR2
   * @param Pv_EmpresaCod         IN INTEGER,
   * @param Pv_Valor7             IN VARCHAR2
   * @param Pv_UsrCreacion        IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_ADMI_PARAMETRO_DET
   (
    Pv_NombreParametro  IN VARCHAR2,
    Pv_EstadoParametro  IN VARCHAR2,
    Pv_Descripcion      IN VARCHAR2,
    Pv_Valor1           IN VARCHAR2,
    Pv_Valor2           IN VARCHAR2,
    Pv_Valor3           IN VARCHAR2,
    Pv_Estado           IN VARCHAR2,
    Pv_EmpresaCod       IN INTEGER,
    Pv_Valor7           IN VARCHAR2,
    Pv_UsrCreacion      IN VARCHAR2);
  
  /**
   * P_INS_TIPO_MARCA_MODELO_DET
   * Procedimiento para insertar los valores de tipo marca y modelo en parametro det
   * 
   * @param Pv_NombreTipoElemento      IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */  
  PROCEDURE P_INS_TIPO_MARCA_MODELO_DET;
    
  /**
   * P_CARGA_ELEMENTO_TIPO
   * Procedimiento para insertar parámetros de carga en ELEMENTO TIPO
   * 
   * @param Pv_NombreTipoElemento      IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_ELEMENTO_TIPO(
    Pv_NombreTipoElemento      IN VARCHAR2);
    
  /**
   * P_CARGA_ELEMENTO_MARCA
   * Procedimiento para insertar parámetros de carga en ELEMENTO MARCA
   * 
   * @param Pv_NombreTipoElemento      IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_ELEMENTO_MARCA (
    Pv_NombreMarcaElemento     IN VARCHAR2);
      
  /**
   * P_CARGA_ELEMENTO_MODELO
   * Procedimiento para insertar parámetros de carga en ELEMENTO MODELO
   * 
   * @param Pv_NombreModeloElemento       IN VARCHAR2
   * @param Pv_NombreMarcaElemento        IN VARCHAR2
   * @param Pv_NombreTipoElemento         IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_ELEMENTO_MODELO (
    Pv_NombreModeloElemento   IN VARCHAR2,
    Pv_NombreMarcaElemento    IN VARCHAR2,
    Pv_NombreTipoElemento     IN VARCHAR2);
       
  /**
   * P_CARGA_EL_NODOS__DET
   * Procedimiento para insertar parámetros de carga en ADMI PARAMETRO DET
   * 
   * @param Pv_NombreModeloElemento       IN VARCHAR2
   * @param Pv_NombreMarcaElemento        IN VARCHAR2
   * @param Pv_NombreTipoElemento         IN VARCHAR2
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_CARGA_EL_NODOS__DET (
    Pv_NombreTipoElemento     IN VARCHAR2);
    
  /**
   * P_INS_TIPO_MARCA_MODELO_EL
   * Procedimiento para llenar las tablas de TIPO, MARCA Y MODELO
   *
   * @author Luis Farro <lfarro@telconet.ec>
   * @version 1.0 23-01-2023
   */
   PROCEDURE P_INS_TIPO_MARCA_MODELO_EL;
   

END INFRK_TRANSACCIONES;
/


CREATE OR REPLACE PACKAGE BODY DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES
AS
  PROCEDURE P_EJECUTA_CPM_OLTS(
    Pn_IdOlt        IN NUMBER,
    Pv_UsrCreacion  IN VARCHAR2,
    Pv_IpCreacion   IN VARCHAR2,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2)
  AS
    Lv_UsrCreacion              VARCHAR2(15);
    Lv_IpCreacion               VARCHAR2(15);
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_DetalleValorInicioCpm    VARCHAR2(6) := 'INICIO';
    Lv_DetalleNombreCpm         VARCHAR2(28) := 'CAMBIO_PLAN_MASIVO_MD';
    Lrf_OltsCpm                 SYS_REFCURSOR;
    Ln_TotalOltsCpm             NUMBER;
    Lv_Status                   VARCHAR2(5);
    Lv_Mensaje                  VARCHAR2(4000);
    Le_Exception                EXCEPTION;
    Ln_IdDetalleOltCpm          DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE;
    Lr_RegOltCpm                DB_INFRAESTRUCTURA.INKG_TYPES.Lr_OltCpm;
    Lt_TOltsCpm                 DB_INFRAESTRUCTURA.INKG_TYPES.Lt_OltsCpm;
    Ln_IndxOltsCpm              NUMBER;
    Lr_InfoDetalleElemento      DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE;
    Lr_InfoHistorialElemento    DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE;
    CURSOR Lc_GetDetOltCpm(Cn_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE, Cv_DetalleNombre INFO_DETALLE_ELEMENTO.DETALLE_NOMBRE%TYPE)
    IS
      SELECT DE.ID_DETALLE_ELEMENTO
      FROM INFO_DETALLE_ELEMENTO DE
      WHERE DE.ELEMENTO_ID    = Cn_IdElemento
      AND DE.DETALLE_NOMBRE   = Cv_DetalleNombre
      AND ROWNUM = 1;
  BEGIN
    IF Pv_UsrCreacion IS NULL THEN
      Lv_UsrCreacion := 'ejecutaCpmAutom';
    ELSE
      Lv_UsrCreacion := Pv_UsrCreacion;
    END IF;
    IF Pv_IpCreacion IS NULL THEN
      Lv_IpCreacion := '127.0.0.1';
    ELSE
      Lv_IpCreacion := Pv_IpCreacion;
    END IF;
    --Se obtiene el listado de olts que se encuentran listos para iniciar el cambio de plan masivo
    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_OLTS_INICIO_CPM( 'SI',
                                                        'NO',
                                                        Pn_IdOlt,
                                                        NULL,
                                                        NULL,
                                                        Lv_Status,
                                                        Lv_Mensaje,
                                                        Lrf_OltsCpm,
                                                        Ln_TotalOltsCpm
                                                      );
    IF Lv_Status = 'OK' THEN
      LOOP
        FETCH Lrf_OltsCpm BULK COLLECT INTO Lt_TOltsCpm LIMIT 100;
        Ln_IndxOltsCpm := Lt_TOltsCpm.FIRST;
        WHILE (Ln_IndxOltsCpm IS NOT NULL)
        LOOP
          Lr_RegOltCpm          := Lt_TOltsCpm(Ln_IndxOltsCpm);
          Ln_IdDetalleOltCpm    := 0;
          OPEN Lc_GetDetOltCpm(Lr_RegOltCpm.ID_ELEMENTO, Lv_DetalleNombreCpm);
          FETCH Lc_GetDetOltCpm INTO Ln_IdDetalleOltCpm;
          CLOSE Lc_GetDetOltCpm; 

          IF Ln_IdDetalleOltCpm IS NOT NULL AND Ln_IdDetalleOltCpm > 0 THEN
            Lr_InfoDetalleElemento                      := NULL;
            Lr_InfoDetalleElemento.ID_DETALLE_ELEMENTO  := Ln_IdDetalleOltCpm;
            Lr_InfoDetalleElemento.DETALLE_VALOR        := Lv_DetalleValorInicioCpm;
            Lr_InfoDetalleElemento.DETALLE_DESCRIPCION  := 'Proceso de Cambio de Plan Iniciado';
            Lr_InfoDetalleElemento.USR_CREACION         := Lv_UsrCreacion;
            Lr_InfoDetalleElemento.FE_CREACION          := CURRENT_TIMESTAMP;
            Lr_InfoDetalleElemento.IP_CREACION          := Lv_IpCreacion;
            DB_INFRAESTRUCTURA.INFRK_DML.P_UPDATE_INFO_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          ELSE
            Lr_InfoDetalleElemento                      := NULL;
            Lr_InfoDetalleElemento.ELEMENTO_ID          := Lr_RegOltCpm.ID_ELEMENTO;
            Lr_InfoDetalleElemento.DETALLE_NOMBRE       := Lv_DetalleNombreCpm;
            Lr_InfoDetalleElemento.DETALLE_VALOR        := Lv_DetalleValorInicioCpm;
            Lr_InfoDetalleElemento.DETALLE_DESCRIPCION  := 'Proceso de Cambio de Plan Iniciado';
            Lr_InfoDetalleElemento.USR_CREACION         := Lv_UsrCreacion;
            Lr_InfoDetalleElemento.IP_CREACION          := Lv_IpCreacion;
            Lr_InfoDetalleElemento.ESTADO               := Lv_EstadoActivo;
            DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
          Lr_InfoHistorialElemento                  := NULL;
          Lr_InfoHistorialElemento.ELEMENTO_ID      := Lr_RegOltCpm.ID_ELEMENTO;
          Lr_InfoHistorialElemento.ESTADO_ELEMENTO  := Lv_EstadoActivo;
          Lr_InfoHistorialElemento.OBSERVACION      := 'Inicia cambio de plan masivo en OLT';
          Lr_InfoHistorialElemento.USR_CREACION     := Lv_UsrCreacion;
          Lr_InfoHistorialElemento.IP_CREACION      := Lv_IpCreacion;
          DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_InfoHistorialElemento, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          Ln_IndxOltsCpm := Lt_TOltsCpm.NEXT(Ln_IndxOltsCpm);
        END LOOP;
        EXIT WHEN Lrf_OltsCpm%NOTFOUND;
      END LOOP;
      CLOSE Lrf_OltsCpm;
    ELSE
      RAISE Le_Exception;
    END IF;
    COMMIT;
    Pv_Status   := 'OK';
    Pv_Mensaje  := 'Proceso de cambio de plan masivo iniciado correctamente';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_EJECUTA_CPM_OLTS', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'Ha ocurrido un problema con la ejecuci¿n del cambio de plan masivo. Por favor comun¿quese con Sistemas!';
    Lv_Mensaje := 'Error en la ejecuci¿n del cambio de plan masivo de todos los olts ' || SQLCODE || ' - ERROR_STACK: ' 
                  || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_EJECUTA_CPM_OLTS', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    --
  END P_EJECUTA_CPM_OLTS;

  PROCEDURE P_UPDATE_INFO_SERVICIO(
    Pr_InfoServicio IN DB_COMERCIAL.INFO_SERVICIO%ROWTYPE,
    Pv_Mensaje      OUT VARCHAR2)
  AS
  BEGIN
    UPDATE DB_COMERCIAL.INFO_SERVICIO
    SET    ESTADO  = Pr_InfoServicio.ESTADO
    WHERE  ID_SERVICIO = Pr_InfoServicio.ID_SERVICIO;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Mensaje := 'Error en P_UPDATE_SERVICIO - ' || SQLCODE ||
                  ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                  ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
  END P_UPDATE_INFO_SERVICIO;

  PROCEDURE P_UPDATE_INFO_DETALLE_ELEMENTO(
    Pr_InfoDetalleElemento  IN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE,
    Pv_Mensaje              OUT VARCHAR2)
  AS
  BEGIN
    UPDATE DB_COMERCIAL.INFO_DETALLE_ELEMENTO
    SET    DETALLE_VALOR  = Pr_InfoDetalleElemento.DETALLE_VALOR
    WHERE  ELEMENTO_ID = Pr_InfoDetalleElemento.ELEMENTO_ID
    AND    DETALLE_NOMBRE = Pr_InfoDetalleElemento.DETALLE_NOMBRE;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Mensaje := 'Error en P_UPDATE_INFO_DETALLE_ELEMENTO - ' || SQLCODE ||
                  ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                  ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
  END P_UPDATE_INFO_DETALLE_ELEMENTO;

  PROCEDURE P_INSERT_SERVICIO_PROD_CARACT(
    Pn_IdServicio                   IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdProducto                   IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE,
    Pv_EstadoAdmiProdCaract         IN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ESTADO%TYPE,
    Pv_DescripcionCaracteristica    IN DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE,
    Pv_ValorServicioProdCaract      IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE,
    Pv_EstadoServicioProdCaract     IN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.ESTADO%TYPE,
    Pv_UsrCreacion                  IN VARCHAR2,
    Pv_Mensaje                      OUT VARCHAR2)
  AS
  BEGIN
    INSERT
    INTO DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    (
      ID_SERVICIO_PROD_CARACT,
      SERVICIO_ID,
      PRODUCTO_CARACTERISITICA_ID,
      VALOR,
      FE_CREACION,
      USR_CREACION,
      ESTADO
    )
    VALUES
    (
      DB_COMERCIAL.SEQ_INFO_SERVICIO_PROD_CARACT.NEXTVAL,
      Pn_IdServicio,
      ( SELECT APC.ID_PRODUCTO_CARACTERISITICA
        FROM DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
        ON APC.CARACTERISTICA_ID = AC.ID_CARACTERISTICA
        WHERE APC.PRODUCTO_ID = Pn_IdProducto
        AND APC.ESTADO = Pv_EstadoAdmiProdCaract
        AND AC.DESCRIPCION_CARACTERISTICA = Pv_DescripcionCaracteristica
        AND ROWNUM = 1
      ),
      Pv_ValorServicioProdCaract,
      SYSDATE,
      Pv_UsrCreacion,
      Pv_EstadoServicioProdCaract
    );
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Mensaje  := 'No se ha podido crear el registro de la asociaci¿n del servicio con ID ' || Pn_IdServicio 
                    || ' y la caracter¿stica ' || Pv_DescripcionCaracteristica || ' con valor ' || Pv_ValorServicioProdCaract ;
  END P_INSERT_SERVICIO_PROD_CARACT;

  PROCEDURE P_ELIMINA_CARACTS_MCAFEE(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2)
  AS
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_Sku                          VARCHAR2(3) := 'SKU';
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lv_Password                     VARCHAR2(8) := 'PASSWORD';
    Lv_PartnerRef                   VARCHAR2(10) := 'PARTNERREF';
    Lv_CustomerContextId            VARCHAR2(17) := 'CUSTOMERCONTEXTID';
    Lv_Referencia                   VARCHAR2(10) := 'REFERENCIA';
    Lv_ValorSpcCorreoElectronico    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcTieneInternet        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCantDispositivos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcSku                  DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcNumeroReintentos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPassword             DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPartnerRef           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCustomerContextId    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcReferencia           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lv_ValoresCaracts               VARCHAR2(4000);
  BEGIN
    Lv_ValorSpcCorreoElectronico    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CorreoElectronico);
    IF Lv_ValorSpcCorreoElectronico IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CorreoElectronico || ': ' || Lv_ValorSpcCorreoElectronico || '<br>';
    END IF;

    Lv_ValorSpcTieneInternet        := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_TieneInternet);
    IF Lv_ValorSpcTieneInternet IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_TieneInternet || ': ' || Lv_ValorSpcTieneInternet || '<br>';
    END IF;

    Lv_ValorSpcCantDispositivos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CantDispositivos);
    IF Lv_ValorSpcCantDispositivos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CantDispositivos || ': ' || Lv_ValorSpcCantDispositivos || '<br>';
    END IF;

    Lv_ValorSpcSku                  := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Sku);
    IF Lv_ValorSpcSku IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Sku || ': ' || Lv_ValorSpcSku || '<br>';
    END IF;

    Lv_ValorSpcNumeroReintentos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_NumeroReintentos);
    IF Lv_ValorSpcNumeroReintentos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_NumeroReintentos || ': ' || Lv_ValorSpcNumeroReintentos || '<br>';
    END IF;

    Lv_ValorSpcPassword             := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Password);
    IF Lv_ValorSpcPassword IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Password || ': ' || Lv_ValorSpcPassword || '<br>';
    END IF;

    Lv_ValorSpcPartnerRef           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_PartnerRef);
    IF Lv_ValorSpcPartnerRef IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_PartnerRef || ': ' || Lv_ValorSpcPartnerRef || '<br>';
    END IF;


    Lv_ValorSpcCustomerContextId    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CustomerContextId);
    IF Lv_ValorSpcCustomerContextId IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_CustomerContextId || ': ' || Lv_ValorSpcCustomerContextId || '<br>';
    END IF;

    Lv_ValorSpcReferencia           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Referencia);
    IF Lv_ValorSpcReferencia IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Referencia || ': ' || Lv_ValorSpcReferencia || '<br>';
    END IF;

    Pv_ValoresCaractsReporte :=    Lv_ValorSpcPartnerRef || ';' || 
                                    Lv_ValorSpcCustomerContextId || ';' ||
                                    Lv_ValorSpcSku || ';' ||
                                    Pv_Login || ';' ||
                                    Lv_ValorSpcCorreoElectronico || ';';


    UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    SET ESTADO                     = Lv_EstadoEliminado,
      FE_ULT_MOD                   = SYSDATE,
      USR_ULT_MOD                  = Pv_UsrCreacion
    WHERE ID_SERVICIO_PROD_CARACT IN
      (SELECT ISC.ID_SERVICIO_PROD_CARACT
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
      JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
      JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
      WHERE ISC.SERVICIO_ID             = Pn_IdServicio
      AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_CorreoElectronico, Lv_TieneInternet, Lv_CantDispositivos, Lv_Sku, Lv_NumeroReintentos,
                                            Lv_Password, Lv_PartnerRef, Lv_CustomerContextId, Lv_Referencia )
      AND ISC.ESTADO                    = Lv_EstadoActivo
      AND APC.ESTADO                    = Lv_EstadoActivo
      );
    IF Lv_ValoresCaracts IS NOT NULL THEN 
      Lv_ValoresCaracts := 'PROCESO: MIGRACION MASIVA<br>' || Lv_ValoresCaracts;
    END IF;
    Pv_Status           := 'OK';
    Pv_ValoresCaracts  := Lv_ValoresCaracts;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status                := 'ERROR';
    Pv_ValoresCaracts        := 'No se ha podido eliminar las caracter¿sticas asociadas al servicio con tecnolog¿a McAfee con ID ' || Pn_IdServicio;
    Pv_ValoresCaractsReporte := '';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_MCAFEE', 
                                            'Error al eliminar las caracter¿sticas McAfee - ' || SQLCODE ||
                                            ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_CARACTS_MCAFEE;

  PROCEDURE P_CREA_CARACTS_KASPERSKY(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdProducto               IN DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE,
    Pv_ValorSpcSuscriberId      IN VARCHAR2,
    Pv_ValorSpcCodigoProducto   IN VARCHAR2,
    Pv_ValorSpcAntivirus        IN VARCHAR2,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_Mensaje                  OUT VARCHAR2)
  AS
    Lv_Antivirus        VARCHAR2(9) := 'ANTIVIRUS';
    Lv_CodigoProducto   VARCHAR2(15) := 'CODIGO_PRODUCTO';
    Lv_SuscriberId      VARCHAR2(12) := 'SUSCRIBER_ID';
    Lv_EstadoActivo     VARCHAR2(6) := 'Activo';
    Lv_Mensaje          VARCHAR2(4000);
    Le_Exception        EXCEPTION;
  BEGIN
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                          Pn_IdProducto,
                                                                          Lv_EstadoActivo,
                                                                          Lv_SuscriberId,
                                                                          Pv_ValorSpcSuscriberId,
                                                                          Lv_EstadoActivo,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Mensaje
                                                                        );
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                          Pn_IdProducto,
                                                                          Lv_EstadoActivo,
                                                                          Lv_CodigoProducto,
                                                                          Pv_ValorSpcCodigoProducto,
                                                                          Lv_EstadoActivo,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Mensaje
                                                                        );
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    IF DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio, Lv_Antivirus) IS NULL THEN
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                            Pn_IdProducto,
                                                                            Lv_EstadoActivo,
                                                                            Lv_Antivirus,
                                                                            Pv_ValorSpcAntivirus,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;
    Pv_Status := 'OK';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY',
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido crear las caracter¿sticas asociadas al servicio con tecnolog¿a Kaspersky con ID ' || Pn_IdServicio;

    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY',
                                            'Error al crear las caracter¿sticas Kaspersky - ' || SQLCODE ||
                                            ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CREA_CARACTS_KASPERSKY;

  PROCEDURE P_INVOCA_WEB_SERVICE_GMS(   
    Pr_RegInfoServicioWsGms IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms,
    Pv_TipoTransaccion      IN  VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_SuscriberId          OUT VARCHAR2,
    Pcl_MensajeErrorHtml    OUT CLOB)
  AS
    Lv_UrlWs                VARCHAR2(200);
    Lv_PasswordWs           VARCHAR2(500);
    Lv_CodigoProductoWs     VARCHAR2(200);
    Ln_LongitudRequest      NUMBER;
    Ln_LongitudIdeal        NUMBER:= 32767;
    Ln_Offset               NUMBER:= 1;
    Ln_Buffer               VARCHAR2(2000);
    Ln_Amount               NUMBER := 2000;
    Lv_Metodo               VARCHAR2(10);
    Lv_Version              VARCHAR2(10);
    Lv_Aplicacion           VARCHAR2(50);
    Lcl_Request             CLOB;
    Lhttp_Request           UTL_HTTP.REQ;
    Lhttp_Response          UTL_HTTP.RESP;
    Lcl_Response            CLOB;
    Lv_NombreParamAntivirus VARCHAR2(27) := 'ANTIVIRUS_PLANES_Y_PRODS_MD';
    Lv_Nuevo                VARCHAR2(5) := 'NUEVO';
    Lv_CodEmpresa           VARCHAR2(2) := '18';
    Lv_EstadoActivo         VARCHAR2(6) := 'Activo';
    Lv_BodyCharset          VARCHAR2(5);
    Ln_CountErrores         NUMBER;
    Lcl_MensajeErrorHtml    CLOB;
    Le_Exception            EXCEPTION;
    CURSOR Lc_GetInfoWsGms
    IS
      SELECT DET.VALOR7 AS URL, DET.VALOR5 AS PASSWORD, DET.VALOR4 AS CODIGO_PRODUCTO
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Lv_NombreParamAntivirus
      AND DET.EMPRESA_COD        = Lv_CodEmpresa
      AND DET.VALOR1             = Lv_Nuevo
      AND CAB.ESTADO             = Lv_EstadoActivo
      AND DET.ESTADO             = Lv_EstadoActivo;
  BEGIN
    OPEN Lc_GetInfoWsGms;
    FETCH Lc_GetInfoWsGms INTO Lv_UrlWs, Lv_PasswordWs, Lv_CodigoProductoWs;
    CLOSE Lc_GetInfoWsGms;
    Lv_Metodo       := 'POST';
    Lv_Version      := ' HTTP/1.1';
    Lv_Aplicacion   := 'application/json';
    Lv_BodyCharset  := 'UTF-8';
    Lcl_Request     := '{';
    Lcl_Request     := Lcl_Request || '"Password":"' || Lv_PasswordWs ||'",';
    IF Pv_TipoTransaccion = 'Activacion' THEN
      Lcl_Request     := Lcl_Request || '"Cliente":' || '{"Identificacion":"' || Pr_RegInfoServicioWsGms.Identificacion ||'",';
      Lcl_Request     := Lcl_Request || '"Email":"' || Pr_RegInfoServicioWsGms.Email ||'",';
      Lcl_Request     := Lcl_Request || '"Nombres":"' || Pr_RegInfoServicioWsGms.Nombres ||'",';
      Lcl_Request     := Lcl_Request || '"Apellidos":"' || Pr_RegInfoServicioWsGms.Apellidos ||'"},';
      Lcl_Request     := Lcl_Request || '"Producto":' || '{"Cantidad":' || Pr_RegInfoServicioWsGms.Cantidad ||',';
      Lcl_Request     := Lcl_Request || '"CodigoProducto":"' || Lv_CodigoProductoWs ||'"},';
    ELSE
      Lcl_Request     := Lcl_Request || '"Cliente":{},';
      Lcl_Request     := Lcl_Request || '"Producto":{},';
    END IF;

    Lcl_Request     := Lcl_Request || '"TipoTransaccion":"' || Pv_TipoTransaccion ||'",';
    Lcl_Request     := Lcl_Request || '"SuscriberId":"' || Pr_RegInfoServicioWsGms.SuscriberId || '"';
    Lcl_Request     := Lcl_Request ||'}';

    Lhttp_Request := UTL_HTTP.BEGIN_REQUEST(Lv_UrlWs, Lv_Metodo);
    UTL_HTTP.SET_HEADER(Lhttp_Request, 'Content-Type', Lv_Aplicacion);
    UTL_HTTP.SET_HEADER(Lhttp_Request, 'Accept', Lv_Aplicacion);
    UTL_HTTP.SET_BODY_CHARSET(Lhttp_Request, Lv_BodyCharset);
    Ln_LongitudRequest    := DBMS_LOB.getlength(Lcl_Request);
    IF Ln_LongitudRequest <= Ln_LongitudIdeal THEN
      UTL_HTTP.SET_HEADER(Lhttp_Request, 'Content-Length', LENGTH(Lcl_Request));
      UTL_HTTP.WRITE_TEXT(Lhttp_Request, Lcl_Request);
    ELSE
      UTL_HTTP.SET_HEADER(Lhttp_Request, 'Transfer-Encoding', 'chunked');
      WHILE (Ln_Offset < Ln_LongitudRequest)
      LOOP
        DBMS_LOB.READ(Lcl_Request, Ln_Amount, Ln_Offset, Ln_Buffer);
        UTL_HTTP.WRITE_TEXT(Lhttp_Request, Ln_Buffer);
        Ln_Offset := Ln_Offset + Ln_Amount;
      END LOOP;
    END IF;
    Lhttp_Response := UTL_HTTP.GET_RESPONSE(Lhttp_Request);
    IF Lhttp_Response.STATUS_CODE = 200 THEN
      UTL_HTTP.READ_TEXT(Lhttp_Response, Lcl_Response);
      APEX_JSON.PARSE(Lcl_Response);
      Pv_Status         := APEX_JSON.GET_VARCHAR2('status');
      Pv_SuscriberId    := APEX_JSON.GET_VARCHAR2('SuscriberId');
      IF Pv_Status = 'ERROR' THEN
        Ln_CountErrores := APEX_JSON.GET_COUNT(p_path => 'result');
        FOR i IN 1 .. Ln_CountErrores LOOP
          Lcl_MensajeErrorHtml :=   Lcl_MensajeErrorHtml || 
                                    '<tr>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                            APEX_JSON.GET_NUMBER(p_path => 'result[%d].ErrorCode', p0 => i) || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                            APEX_JSON.GET_VARCHAR2(p_path => 'result[%d].ErrorDescription', p0 => i) ||
                                        '</td>' ||
                                    '</tr>';
        END LOOP;
        IF Lcl_MensajeErrorHtml IS NOT NULL THEN
          Pcl_MensajeErrorHtml  :=  '<b>Detalle de errores</b><br />' ||
                                    '<table cellpadding="5">' ||
                                        '<tr>' ||
                                            '<td valign="center">' ||
                                                '<div>' ||
                                                    '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                        '<thead>' ||
                                                            '<tr>' ||
                                                                '<th style="border: 1px solid; padding:4px;"><b>C¿digo</b></th>' ||
                                                                '<th style="border: 1px solid; padding:4px;"><b>Descripci¿n</b></th>' ||
                                                            '</tr>' ||
                                                        '</thead>' ||
                                                        '<tbody>' ||
                                                            Lcl_MensajeErrorHtml ||
                                                        '</tbody>' ||
                                                    '</table>' ||
                                                '</div>' ||
                                            '</td>' ||
                                        '</tr>' ||
                                    '</table>';
        END IF;
      END IF;
      UTL_HTTP.END_RESPONSE(Lhttp_Response);
    ELSE
      Pcl_MensajeErrorHtml := 'Problemas al ejecutar el Ws Kaspersky (Intermitencia). <br>STATUS_CODE:' || Lhttp_Response.STATUS_CODE;
      RAISE Le_Exception;
    END IF;
    EXCEPTION
    WHEN Le_Exception THEN
      Pv_Status             := 'ERROR';
      UTL_HTTP.END_RESPONSE(Lhttp_Response);
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS', 
                                            Pcl_MensajeErrorHtml || '---REQUEST---' || Lcl_Request, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    WHEN UTL_HTTP.END_OF_BODY THEN
      Pv_Status             := 'ERROR';
      Pcl_MensajeErrorHtml  := 'No se ha podido realizar el env¿o de la petici¿n al web service';
      UTL_HTTP.END_RESPONSE(Lhttp_Response); 
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS', 
                                            'No se ha podido realizar el env¿o de la petici¿n al web service - Error UTL_HTTP.end_of_body', 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

    WHEN UTL_HTTP.TOO_MANY_REQUESTS THEN
      Pv_Status             := 'ERROR';
      Pcl_MensajeErrorHtml  := 'Demasiadas peticiones abiertas al web service de GMS';
      UTL_HTTP.END_RESPONSE(Lhttp_Response); 
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS', 
                                            Pcl_MensajeErrorHtml, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    WHEN OTHERS THEN
      Pv_Status             := 'ERROR';
      Pcl_MensajeErrorHtml  := 'Problemas al realizar la petici¿n al web service';
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS', 
                                            'Error al consumir el web service de GMS - ' || SQLCODE ||
                                            ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_INVOCA_WEB_SERVICE_GMS;

  PROCEDURE P_CORTE_I_PROTEGIDO(
    Pn_IdServicio           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pr_RegInfoServicioWsGms IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms,
    Pv_DescripcionProducto  IN DB_COMERCIAL.ADMI_PRODUCTO.DESCRIPCION_PRODUCTO%TYPE,
    Pv_TipoServicio         IN VARCHAR2,
    Pv_MsjHistoAdicional    IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lv_StatusWsGms              VARCHAR2(5);
    Lcl_MensajeErrorHtmlWsGms   CLOB;
    Lv_Mensaje                  VARCHAR2(4000);
    Lr_ServicioHistorial        DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Le_Exception                EXCEPTION;
    Lv_SuscriberId              VARCHAR2(10);
  BEGIN
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS(  Pr_RegInfoServicioWsGms,
                                                                      'Suspension',
                                                                      Lv_StatusWsGms,
                                                                      Lv_SuscriberId,
                                                                      Lcl_MensajeErrorHtmlWsGms);
    IF Lv_StatusWsGms = 'OK' THEN
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pn_IdServicio;
      Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
      Lr_ServicioHistorial.ESTADO       := 'In-Corte';
      Lr_ServicioHistorial.OBSERVACION  := 'Se cort¿ el ' || Pv_TipoServicio || Pv_DescripcionProducto || Pv_MsjHistoAdicional;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    ELSE
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pn_IdServicio;
      Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
      Lr_ServicioHistorial.ESTADO       := 'In-Corte';
      Lr_ServicioHistorial.OBSERVACION  := 'No se ha podido cortar el ' || Pv_TipoServicio || Pv_DescripcionProducto
                                           ||  Pv_MsjHistoAdicional || '<br>' || Lcl_MensajeErrorHtmlWsGms;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;
    Pv_Status := 'OK';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO', 
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido suspender el servicio Internet Protegido con ID ' || Pn_IdServicio;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO', 
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CORTE_I_PROTEGIDO;

  PROCEDURE P_ACTIVA_I_PROTEGIDO_EN_PLAN(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Ln_NumReintentosPermitidos      NUMBER;
    Lv_Valor2InfoDetParam           VARCHAR2(100);
    Lv_Valor4InfoDetParam           VARCHAR2(100);
    Lv_NombreParamAntivirus         VARCHAR2(27) := 'ANTIVIRUS_PLANES_Y_PRODS_MD';
    Lv_Nuevo                        VARCHAR2(5) := 'NUEVO';
    Lv_CodEmpresa                   VARCHAR2(2) := '18';
    Lv_ValorAntivirus               VARCHAR2(100);
    Lv_ValorCodProducto             VARCHAR2(100);
    Lv_NombreParamMaxReintentos     VARCHAR2(28) := 'NUMERO_MAX_REINTENTOS_MCAFEE';
    Lv_Plan                         VARCHAR2(4) := 'PLAN';
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lv_Antivirus                    VARCHAR2(9) := 'ANTIVIRUS';
    Lv_ValorSpcCorreoElectronico    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorCantidadDisp            VARCHAR2(2);
    Lt_CorreosLicencias             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_CorreoLicencias              DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lr_RegWsGms                     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms;
    Lv_StatusWsGms                  VARCHAR2(5);
    Lv_SuscriberIdWsGms             VARCHAR2(10);
    Lcl_MensajeErrorHtmlWsGms       CLOB;
    Lv_EjecutaProcesoError          VARCHAR2(2) := 'NO';
    Lv_Status                       VARCHAR2(13);
    Lv_Mensaje                      VARCHAR2(4000);
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_GetInfoPlantilla             DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lcl_PlantillaInicial            CLOB;
    Lcl_Plantilla                   CLOB;
    Lv_Remitente                    VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lv_CorreosCliente               VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Ln_IndxLoop                     NUMBER;
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lcl_PlantillaInicialOK          CLOB;
    CURSOR Lc_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
    IS
      SELECT
        AP.PLANTILLA
      FROM
        DB_COMUNICACION.ADMI_PLANTILLA AP 
      WHERE
        AP.CODIGO = Cv_CodigoPlantilla
      AND AP.ESTADO <> Lv_EstadoEliminado;
    CURSOR Lc_GetInfoDetParam(  Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE, 
                                Cv_Valor1 DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                Cv_CodEmpresa DB_GENERAL.ADMI_PARAMETRO_DET.EMPRESA_COD%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND DET.EMPRESA_COD        = Cv_CodEmpresa
      AND DET.VALOR1             = Cv_Valor1
      AND CAB.ESTADO             = Lv_EstadoActivo
      AND DET.ESTADO             = Lv_EstadoActivo;
    CURSOR Lc_GetCaractPlan(Cn_IdItem DB_COMERCIAL.INFO_PLAN_DET.ID_ITEM%TYPE,
                            Cv_DescripcionCaract DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT PLAN_PROD_CARACT.VALOR
      FROM DB_COMERCIAL.INFO_PLAN_PRODUCTO_CARACT PLAN_PROD_CARACT
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT  
      ON PROD_CARACT.ID_PRODUCTO_CARACTERISITICA = PLAN_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT  
      ON CARACT.ID_CARACTERISTICA = PROD_CARACT.CARACTERISTICA_ID
      WHERE PLAN_PROD_CARACT.PLAN_DET_ID = Cn_IdItem
      AND CARACT.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaract
      AND ROWNUM = 1;
  BEGIN
    OPEN Lc_GetInfoDetParam(Lv_NombreParamAntivirus, Lv_Nuevo, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_Valor2InfoDetParam, Lv_Valor4InfoDetParam;
    CLOSE Lc_GetInfoDetParam;
    Lv_ValorAntivirus   := Lv_Valor2InfoDetParam;
    Lv_ValorCodProducto := Lv_Valor4InfoDetParam;

    OPEN Lc_GetInfoDetParam(Lv_NombreParamMaxReintentos, Lv_Plan, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_Valor2InfoDetParam, Lv_Valor4InfoDetParam;
    CLOSE Lc_GetInfoDetParam;

    Ln_NumReintentosPermitidos      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_Valor2InfoDetParam,'^\d+')), 1);

    Lv_ValorSpcCorreoElectronico    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                                                    Lv_CorreoElectronico);
    IF Lv_ValorSpcCorreoElectronico IS NULL THEN
      Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'SI');
      Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
      WHILE (Ln_IndxLoop IS NOT NULL)
      LOOP
        Lv_CorreoLicencias  := Lt_CorreosLicencias(Ln_IndxLoop);
        Ln_IndxLoop         := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
      END LOOP;

      IF Lv_CorreoLicencias IS NULL THEN
        Lv_CorreoLicencias := 'SIN CORREO';
      END IF;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_CorreoElectronico,
                                                                            Lv_CorreoLicencias,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_TieneInternet,
                                                                            Lv_Plan,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      OPEN Lc_GetCaractPlan(Pr_RegPuntoInternetXOlt.ID_ITEM_I_PROTEGIDO, Lv_CantDispositivos);
      FETCH Lc_GetCaractPlan INTO Lv_ValorCantidadDisp;
      CLOSE Lc_GetCaractPlan;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_CantDispositivos,
                                                                            COALESCE(Lv_ValorCantidadDisp,'3'),
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_Antivirus,
                                                                            Lv_ValorAntivirus,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    ELSE
      Lv_CorreoLicencias := Lv_ValorSpcCorreoElectronico;
    END IF;

    IF (Lv_CorreoLicencias IS NOT NULL AND Lv_CorreoLicencias <> 'SIN CORREO') THEN
      Lr_RegWsGms.Identificacion  := Pr_RegPuntoInternetXOlt.IDENTIFICACION_CLIENTE;
      Lr_RegWsGms.Email           := Lv_CorreoLicencias;
      IF Pr_RegPuntoInternetXOlt.RAZON_SOCIAL IS NOT NULL THEN
        Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
        Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
      ELSE
        Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.NOMBRES;
        Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.APELLIDOS;
      END IF;
      Lr_RegWsGms.Cantidad      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_ValorCantidadDisp,'^\d+')), 3);
      Lr_RegWsGms.SuscriberId   := 0;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS(  Lr_RegWsGms,
                                                                        'Activacion',
                                                                        Lv_StatusWsGms,
                                                                        Lv_SuscriberIdWsGms,
                                                                        Lcl_MensajeErrorHtmlWsGms);
      IF Lv_StatusWsGms = 'OK' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'Se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                             || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);

        --Env¿o de Correo al Cliente al activarse el servicio Internet Protegido
        OPEN Lc_GetPlantilla('ACTIVAIPMP');
        FETCH Lc_GetPlantilla INTO Lcl_PlantillaInicialOK;
        CLOSE Lc_GetPlantilla;
        Lcl_Plantilla           := Lcl_PlantillaInicialOK;
        Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreCliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
        Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ correo }}', Lv_CorreoLicencias);

        Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'NO');
        Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
        WHILE (Ln_IndxLoop IS NOT NULL)
        LOOP
          Lv_CorreosCliente := Lt_CorreosLicencias(Ln_IndxLoop) || ',';
          Ln_IndxLoop       := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
        END LOOP;

        IF Lv_CorreosCliente IS NULL THEN
          Lv_CorreosCliente := Lv_Remitente || ',';
        END IF;

        DB_GENERAL.GNRLPCK_UTIL.P_SEND_MAIL_SMTP(   Lv_Remitente, 
                                                    Lv_CorreosCliente, 
                                                    ',', 
                                                    'Bienvenido a NetlifeDefense, el sistema de ' ||
                                                    'seguridad inform¿tica para proteger tu vida digital.', 
                                                    NULL, 
                                                    NULL, 
                                                    Lcl_Plantilla, 
                                                    'text/html; charset=iso-8859-1');

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY(Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                        Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                        Lv_SuscriberIdWsGms,
                                                                        Lv_ValorCodProducto,
                                                                        Lv_ValorAntivirus,
                                                                        Pv_UsrCreacion,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);
        IF Lv_Status = 'ERROR' THEN
          RAISE Le_Exception;
        END IF;
        Pv_Status := 'OK';
        IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
          Lr_RegWsGms.SuscriberId   := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_SuscriberIdWsGms,'^\d+')), 0);
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO(   Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                        Lr_RegWsGms,
                                                                        Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO,
                                                                        'producto ',
                                                                        ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan',
                                                                        Pv_UsrCreacion,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);
          IF Lv_Status = 'ERROR' THEN
            Pv_Status                         := 'ERROR-PROCESO';
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
            Lr_ServicioHistorial.OBSERVACION  := 'No se ha podido cortar las licencias de Internet Protegido';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        END IF;                                         
      ELSE
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'Error en la ejecuci¿n del web service<br>' || Lcl_MensajeErrorHtmlWsGms;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
          Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
          Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
          Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
          Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                               || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan '
                                               || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        ELSE
          Lv_EjecutaProcesoError := 'SI';
        END IF;
      END IF;
    ELSE
      IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n y corte '
                                             || 'del producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO || ' con tecnolog¿a ' 
                                             || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                             || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan '
                                             || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      ELSE
        Lv_EjecutaProcesoError  := 'SI';
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n '
                                             || 'del producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO || ' con tecnolog¿a ' 
                                             || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      END IF;
    END IF;

    IF Lv_EjecutaProcesoError = 'SI' THEN
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_NumeroReintentos,
                                                                            '0',
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      --Env¿a de correo en caso de que se presente un error al activar el servicio Internet Protegido
      Lr_GetInfoPlantilla     := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('ERRORACTIVAIPMP');
      Lcl_PlantillaInicial    := Lr_GetInfoPlantilla.PLANTILLA;
      Lcl_Plantilla           := Lcl_PlantillaInicial;
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreProducto }}', Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ descripcionServicio }}', 'incluido en el plan con tecnolog¿a ' || Lv_ValorAntivirus);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ cliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ login }}', Pr_RegPuntoInternetXOlt.LOGIN);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreJurisdiccion }}', Pr_RegPuntoInternetXOlt.NOMBRE_JURISDICCION);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ tipoServicio }}', 'Plan');
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreServicio }}', Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ observacion | raw }}', 
                                 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan');
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ estadoServicio }}', Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET);
      IF Lr_GetInfoPlantilla.ALIAS_CORREOS IS NOT NULL THEN
        Lr_GetInfoPlantilla.ALIAS_CORREOS := REPLACE(Lr_GetInfoPlantilla.ALIAS_CORREOS, ';', ',') || ',';
      ELSE 
        Lr_GetInfoPlantilla.ALIAS_CORREOS := Lv_Remitente;
      END IF;
      DB_COMUNICACION.CUKG_TRANSACTIONS.P_SEND_MAIL(    Lv_Remitente, 
                                                        Lr_GetInfoPlantilla.ALIAS_CORREOS, 
                                                        'Error en Activacion de ' ||
                                                        Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO ||
                                                        ' - ' || Pr_RegPuntoInternetXOlt.LOGIN,
                                                        SUBSTR(Lcl_Plantilla, 1, 32767), 
                                                        'text/html; charset=iso-8859-1', 
                                                        Lv_Mensaje);
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
      Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
      Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
      Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                           || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan';
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;
    IF Pv_Status IS NULL THEN
      Pv_Status := 'ERROR-PROCESO';
    END IF;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_EN_PLAN', 
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  :=  'No se ha podido realizar la activaci¿n del servicio Internet Protegido incluido en el plan del servicio con ID ' 
                    || Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_EN_PLAN', 
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ACTIVA_I_PROTEGIDO_EN_PLAN;

  PROCEDURE P_MIGRA_SERV_I_PROTEGIDO_PLAN(   
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_Referencia                   VARCHAR2(10) := 'REFERENCIA';
    Lv_MigradoAKaspersky            VARCHAR2(19) := 'MIGRADO_A_KASPERSKY';
    Lv_ErrorInfMigraMasivaMcAfee    VARCHAR2(34) := 'ERROR_INFO_MIGRACION_MASIVA_MCAFEE';
    Lv_ErrorRepMigraMasivaMcAfee    VARCHAR2(37) := 'ERROR_REPORTE_MIGRACION_MASIVA_MCAFEE';
    Lv_ValorSpcReferencia           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValoresCaracts               VARCHAR2(4000);
    Lv_ValoresCaractsReporte        VARCHAR2(4000);
    Lv_Status                       VARCHAR2(13);
    Lv_Mensaje                      VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
  BEGIN
    --Se verifica si el servicio tiene la caracter¿stica REFERENCIA asociada a los servicios activados con tecnolog¿a McAfee
    Lv_ValorSpcReferencia   := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET, 
                                                                                            Lv_Referencia);
    IF Lv_ValorSpcReferencia IS NOT NULL THEN
      --Se cancelar¿n las licencias McAfee de manera l¿gica
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
      Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
      Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
      Lr_ServicioHistorial.OBSERVACION  := 'Se cancel¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO ||
                                           ' con tecnolog¿a MCAFEE incluido en el plan de manera l¿gica ';
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                          Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                          Lv_EstadoActivo,
                                                                          Lv_MigradoAKaspersky,
                                                                          'SI',
                                                                          Lv_EstadoActivo,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Mensaje
                                                                        );
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_MCAFEE(Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                    Pr_RegPuntoInternetXOlt.LOGIN,
                                                                    Pv_UsrCreacion,
                                                                    Lv_Status,
                                                                    Lv_ValoresCaracts,
                                                                    Lv_ValoresCaractsReporte);
    IF Lv_Status = 'ERROR' THEN
      Lv_Mensaje := Lv_ValoresCaracts;
      RAISE Le_Exception;
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                          Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                          Lv_EstadoActivo,
                                                                          Lv_ErrorInfMigraMasivaMcAfee,
                                                                          Lv_ValoresCaracts,
                                                                          Lv_EstadoActivo,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Mensaje
                                                                        );
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                          Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                          Lv_EstadoActivo,
                                                                          Lv_ErrorRepMigraMasivaMcAfee,
                                                                          Lv_ValoresCaractsReporte,
                                                                          Lv_EstadoActivo,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Mensaje
                                                                        );
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    Lv_Status := '';
    --Se activan las licencias de Internet Protegido dentro del plan con tecnolog¿a Kaspersky
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_EN_PLAN(Pr_RegPuntoInternetXOlt, 
                                                                        Pv_UsrCreacion,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);
    IF Lv_Status = 'ERROR' THEN
      RAISE Le_Exception;
    END IF;
    COMMIT;
    Pv_Status := Lv_Status;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_PLAN', 
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'Los servicios Internet Protegido no pudieron ser migrados ya que el proceso present¿ ' ||
                   'problemas, por favor comun¿quese con Sistemas ';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_PLAN',
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_MIGRA_SERV_I_PROTEGIDO_PLAN;

  PROCEDURE P_CREA_SERVICIO_I_PROTEGIDO(
    Pr_RegPuntoInternetXOlt         IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pr_ProductoInternetProtegido    IN DB_COMERCIAL.ADMI_PRODUCTO%ROWTYPE,
    Pn_PrecioVentaServicio          IN NUMBER,
    Pv_UsrCreacion                  IN VARCHAR2,
    Pv_Status                       OUT VARCHAR2, 
    Pv_Mensaje                      OUT VARCHAR2,
    Pn_IdServicioNuevo              OUT DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdOrdenTrabajoNuevo          OUT DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE)
  AS
    Lv_UsrVendedor              VARCHAR2(28);
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_PrefijoEmpresa           VARCHAR2(2) := 'MD';
    Lv_DescripcionEmpleado      DB_GENERAL.ADMI_TIPO_ROL.DESCRIPCION_TIPO_ROL%TYPE := 'Empleado';
    Lv_NumeroOrdenTrabajo       VARCHAR2(30);
    Ln_IdOficinaVendedor        NUMBER;
    Ln_IdOrdenTrabajoServicio   DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE := 0;
    Ln_IdServicioNuevo          DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE := 0;
    Lr_ServicioHistorial        DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_Mensaje                  VARCHAR2(4000);
    Le_Exception                EXCEPTION;
    CURSOR Lc_NumeracionDoc(Cn_IdOficina NUMBER, Cv_Codigo VARCHAR2)
    IS
      SELECT ID_NUMERACION, (NUMERACION_UNO || '-' || NUMERACION_DOS || '-' || LPAD(SECUENCIA,7,'0')) NUMERACION, SECUENCIA
      FROM DB_COMERCIAL.ADMI_NUMERACION
      where OFICINA_ID = Cn_IdOficina
      and CODIGO = Cv_Codigo;
    CURSOR Lc_GetInfoVendedor(Cv_UsrVendedor VARCHAR2)
    IS
      SELECT
        OFICINA_ID
      FROM
        DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL
      WHERE
        ID_PERSONA_ROL = (
          SELECT
            MAX(IPER.ID_PERSONA_ROL)
          FROM
            DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
            JOIN DB_COMERCIAL.INFO_PERSONA IPE ON IPE.ID_PERSONA = IPER.PERSONA_ID
            JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER ON IER.ID_EMPRESA_ROL = IPER.EMPRESA_ROL_ID
            JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO IEG ON IEG.COD_EMPRESA = IER.EMPRESA_COD
            JOIN DB_GENERAL.ADMI_ROL AR ON AR.ID_ROL = IER.ROL_ID
            JOIN DB_GENERAL.ADMI_TIPO_ROL ATR ON AR.TIPO_ROL_ID = ATR.ID_TIPO_ROL
          WHERE
            IPE.LOGIN = Cv_UsrVendedor
            AND   IPER.ESTADO = Lv_EstadoActivo
            AND   IEG.PREFIJO = Lv_PrefijoEmpresa
            AND   ATR.DESCRIPCION_TIPO_ROL = Lv_DescripcionEmpleado
            AND   IPER.DEPARTAMENTO_ID IS NOT NULL
        );
    Lr_NumeracionDoc            Lc_NumeracionDoc%ROWTYPE;
  BEGIN
    Lv_UsrVendedor := Pr_RegPuntoInternetXOlt.USR_VENDEDOR_SERVICIO_INTERNET;
    IF Lv_UsrVendedor IS NOT NULL THEN
      Lv_UsrVendedor := Pr_RegPuntoInternetXOlt.USR_VENDEDOR_PTO;
    END IF;

    OPEN Lc_GetInfoVendedor(Lv_UsrVendedor);
    FETCH Lc_GetInfoVendedor INTO Ln_IdOficinaVendedor;
    CLOSE Lc_GetInfoVendedor;

    IF Ln_IdOficinaVendedor IS NULL THEN
      Ln_IdOficinaVendedor := 58;
    END IF;

    OPEN Lc_NumeracionDoc(Ln_IdOficinaVendedor, 'ORD');
    FETCH Lc_NumeracionDoc INTO Lr_NumeracionDoc;
    IF(Lc_NumeracionDoc%FOUND) THEN
        Lv_NumeroOrdenTrabajo := Lr_NumeracionDoc.NUMERACION;
        UPDATE DB_COMERCIAL.ADMI_NUMERACION SET SECUENCIA= SECUENCIA + 1 WHERE ID_NUMERACION = Lr_NumeracionDoc.ID_NUMERACION;
    ELSE
      Lv_Mensaje := 'No se pudo obtener la numeraci¿n para la orden de trabajo';
      RAISE Le_Exception;    
    END IF;
    CLOSE Lc_NumeracionDoc;

    Ln_IdOrdenTrabajoServicio := DB_COMERCIAL.SEQ_INFO_ORDEN_TRABAJO.NEXTVAL;
    INSERT
    INTO DB_COMERCIAL.INFO_ORDEN_TRABAJO
    (
      ID_ORDEN_TRABAJO,
      NUMERO_ORDEN_TRABAJO,
      PUNTO_ID,
      FE_CREACION,
      USR_CREACION,
      IP_CREACION,
      TIPO_ORDEN,
      OFICINA_ID,
      ESTADO
    )
    VALUES
    (
      Ln_IdOrdenTrabajoServicio,
      Lv_NumeroOrdenTrabajo,
      Pr_RegPuntoInternetXOlt.ID_PUNTO,
      SYSDATE,
      Pv_UsrCreacion,
      '127.0.0.1',
      'N',
      Ln_IdOficinaVendedor,
      'Activa'
    );

    Ln_IdServicioNuevo := DB_COMERCIAL.SEQ_INFO_SERVICIO.NEXTVAL;
    INSERT
    INTO DB_COMERCIAL.INFO_SERVICIO
    (
      ID_SERVICIO,
      PUNTO_ID,
      PRODUCTO_ID,
      ORDEN_TRABAJO_ID,
      ES_VENTA,
      CANTIDAD,
      PRECIO_VENTA,
      FRECUENCIA_PRODUCTO,
      MESES_RESTANTES,
      DESCRIPCION_PRESENTA_FACTURA,
      ESTADO,
      FE_CREACION,
      USR_CREACION,
      IP_CREACION,
      PUNTO_FACTURACION_ID,
      TIPO_ORDEN,
      USR_VENDEDOR
    )
    VALUES
    (
      Ln_IdServicioNuevo,
      Pr_RegPuntoInternetXOlt.ID_PUNTO,
      Pr_ProductoInternetProtegido.ID_PRODUCTO,
      Ln_IdOrdenTrabajoServicio,
      'S',
      1,
      Pn_PrecioVentaServicio,
      1,
      1,
      Pr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO,
      'Pendiente',
      SYSDATE,
      Pv_UsrCreacion,
      '127.0.0.1',
      Pr_RegPuntoInternetXOlt.ID_PTO_FACT_SERVICIO_INTERNET,
      'N',
      Lv_UsrVendedor
    );

    Lr_ServicioHistorial              := NULL;
    Lr_ServicioHistorial.SERVICIO_ID  := Ln_IdServicioNuevo;
    Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
    Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
    Lr_ServicioHistorial.ESTADO       := 'Pendiente';
    Lr_ServicioHistorial.OBSERVACION  := 'Se cre¿ el servicio por migraci¿n de tecnolog¿a';
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
    IF Lv_Mensaje IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    INSERT
    INTO DB_COMERCIAL.INFO_SERVICIO_TECNICO
    (
      ID_SERVICIO_TECNICO,
      SERVICIO_ID,
      TIPO_ENLACE,
      ULTIMA_MILLA_ID
    )
    VALUES
    (
      DB_COMERCIAL.SEQ_INFO_SERVICIO_TECNICO.NEXTVAL,
      Ln_IdServicioNuevo,
      'PRINCIPAL',
      Pr_RegPuntoInternetXOlt.ID_UM_SERVICIO_INTERNET
    );
    Pv_Status               := 'OK';
    Pn_IdServicioNuevo      := Ln_IdServicioNuevo;
    Pn_IdOrdenTrabajoNuevo  := Ln_IdOrdenTrabajoServicio;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_SERVICIO_I_PROTEGIDO',
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido crear correctamente el servicio de Internet Protegido';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_SERVICIO_I_PROTEGIDO',
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CREA_SERVICIO_I_PROTEGIDO;

  PROCEDURE P_MIGRA_SERV_I_PROTEGIDO_ADICS(
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2)
  AS
    Ln_TotalLicenciasAdicionales    NUMBER := 0;
    Ln_PrecioVentaTotalLicencias    NUMBER := 0;
    Ln_LicenciasRestantes           NUMBER;
    Ln_PrecioLicenciasRestantes     NUMBER;
    Lv_AgregaProducto               VARCHAR2(2);
    Lrf_ServsAdicIProtegidoXPto     SYS_REFCURSOR;
    Lv_Status                       VARCHAR2(13);
    Lv_Mensaje                      VARCHAR2(4000);
    Ln_CantidadLicenciasPermitidas  NUMBER;
    Ln_IndxServsAdicIProtegidoXPto  NUMBER;
    Lr_RegServIProtegidoAdicsXPto   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_ServIProtegidoAdicsXPto;
    Lt_TServIProtegidoAdicsXPto     DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ServIProtegidoAdicsXPto;
    Ln_PrecioServIProtegKaspersky   NUMBER;
    Lr_RegServIProtegidoKaspersky   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServIProtegidoKaspersky;
    Lt_TServIProtegidoKaspersky     DB_INFRAESTRUCTURA.INKG_TYPES.Lt_InfoServIProtegidoKaspersky;
    Lr_RegServIProtegidoXActivar    DB_INFRAESTRUCTURA.INKG_TYPES.Lr_ServicioIProtegidoXActivar;
    Lt_TServIProtegidoXActivar      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ServiciosIProtegidoXActivar;
    Ln_IndxServIProtegidoXActivar   NUMBER := 0;
    Lv_ValoresCaracts               VARCHAR2(4000);
    Lv_ValoresCaractsReporte        VARCHAR2(4000);
    Lv_NombreParamAntivirus         VARCHAR2(27) := 'ANTIVIRUS_PLANES_Y_PRODS_MD';
    Lv_Nuevo                        VARCHAR2(5) := 'NUEVO';
    Lv_ValorAntivirus               VARCHAR2(100);
    Lv_ValorCodProducto             VARCHAR2(100);
    Lv_MigradoAKaspersky            VARCHAR2(19) := 'MIGRADO_A_KASPERSKY';
    Lv_ErrorInfMigraMasivaMcAfee    VARCHAR2(34) := 'ERROR_INFO_MIGRACION_MASIVA_MCAFEE';
    Lv_ErrorRepMigraMasivaMcAfee    VARCHAR2(37) := 'ERROR_REPORTE_MIGRACION_MASIVA_MCAFEE';
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_ProductoInternetProtegido    DB_COMERCIAL.ADMI_PRODUCTO%ROWTYPE;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_NombreParamNumLicencias      VARCHAR2(32) := 'ANTIVIRUS_KASPERSKY_LICENCIAS_MD';
    Lv_ModuloParamNumLicencias      VARCHAR2(7) := 'TECNICO';
    Lv_ProcesoParamNumLicencias     VARCHAR2(20) := 'LICENCIAS_PERMITIDAS';
    Lt_ArrayNumLicencias            DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lt_ArrayPrecioLicencias         DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_CodEmpresa                   VARCHAR2(2) := '18';
    Lv_DescripcionProdIProtegido    VARCHAR2(24) := 'I. PROTEGIDO MULTI PAID';
    Ln_IndxServIProtegidoKaspersky  NUMBER;
    Lv_UsrCreacionMigraMcAfee       VARCHAR2(11) := 'MigraMcAfee';
    Ln_IdOrdenTrabajoServicio       DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE;
    Ln_IdServicioNuevo              DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Lt_CorreosLicencias             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lv_Antivirus                    VARCHAR2(9) := 'ANTIVIRUS';
    Lr_RegWsGms                     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms;
    Lv_StatusWsGms                  VARCHAR2(5);
    Lv_SuscriberIdWsGms             VARCHAR2(10);
    Lcl_MensajeErrorHtmlWsGms       CLOB;
    Lv_CorreoLicencias              DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lr_GetInfoPlantilla             DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lcl_PlantillaInicial            CLOB;
    Lcl_Plantilla                   CLOB;
    Lv_Remitente                    VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lv_CorreosCliente               VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Ln_IdMotivoCancel               DB_GENERAL.ADMI_MOTIVO.ID_MOTIVO%TYPE;
    Lv_NombreMotivoCancel           VARCHAR2(30) := 'Cancelacion por Regularizacion';
    Lv_EjecutaProcesoError          VARCHAR2(2);
    Ln_IndxLoop                     NUMBER;
    Lv_Exit                         VARCHAR2(2);
    Lr_InfoServicio                 DB_COMERCIAL.INFO_SERVICIO%ROWTYPE;
    Lv_ExistenServicios             VARCHAR2(2);
    Ln_ContadorOK                   NUMBER := 0;
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lcl_PlantillaInicialOK          CLOB;
    CURSOR Lc_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
    IS
      SELECT
        AP.PLANTILLA
      FROM
        DB_COMUNICACION.ADMI_PLANTILLA AP 
      WHERE
        AP.CODIGO = Cv_CodigoPlantilla
      AND AP.ESTADO <> Lv_EstadoEliminado;
    CURSOR Lc_GetProductoIProtegido
    IS
      SELECT PROD.*
      FROM DB_COMERCIAL.ADMI_PRODUCTO PROD
      WHERE PROD.DESCRIPCION_PRODUCTO = Lv_DescripcionProdIProtegido
      AND PROD.ESTADO = Lv_EstadoActivo
      AND PROD.EMPRESA_COD = Lv_CodEmpresa;
    CURSOR Lc_GetInfoDetParam(  Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE, 
                                Cv_Valor1 DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                Cv_CodEmpresa DB_GENERAL.ADMI_PARAMETRO_DET.EMPRESA_COD%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND DET.EMPRESA_COD        = Cv_CodEmpresa
      AND DET.VALOR1             = Cv_Valor1
      AND CAB.ESTADO             = Lv_EstadoActivo
      AND DET.ESTADO             = Lv_EstadoActivo;
    CURSOR Lc_GetEstadoInternet(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT ESTADO
      FROM DB_COMERCIAL.INFO_SERVICIO 
      WHERE ID_SERVICIO = Cn_IdServicio;
    CURSOR Lc_GetMotivoCancel(Cv_NombreMotivo DB_GENERAL.ADMI_MOTIVO.NOMBRE_MOTIVO%TYPE)
    IS
      SELECT ID_MOTIVO
      FROM DB_GENERAL.ADMI_MOTIVO 
      WHERE NOMBRE_MOTIVO = Cv_NombreMotivo
      AND ROWNUM = 1;
  BEGIN
    OPEN Lc_GetMotivoCancel(Lv_NombreMotivoCancel);
    FETCH Lc_GetMotivoCancel INTO Ln_IdMotivoCancel;
    CLOSE Lc_GetMotivoCancel;

    OPEN Lc_GetInfoDetParam(Lv_NombreParamAntivirus, Lv_Nuevo, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_ValorAntivirus, Lv_ValorCodProducto;
    CLOSE Lc_GetInfoDetParam;

    OPEN Lc_GetProductoIProtegido;
    FETCH Lc_GetProductoIProtegido INTO Lr_ProductoInternetProtegido;
    CLOSE Lc_GetProductoIProtegido;

    OPEN Lc_GetPlantilla('ACTIVAIPMP');
    FETCH Lc_GetPlantilla INTO Lcl_PlantillaInicialOK;
    CLOSE Lc_GetPlantilla;

    Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'SI');
    Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
    WHILE (Ln_IndxLoop IS NOT NULL)
    LOOP
      Lv_CorreoLicencias    := Lt_CorreosLicencias(Ln_IndxLoop);
      Ln_IndxLoop           := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
    END LOOP;

    IF Lv_CorreoLicencias IS NULL THEN
      Lv_CorreoLicencias := 'SIN CORREO';
    END IF;

    Lv_ExistenServicios := 'NO';
    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_SERV_ADICS_I_PROTEGIDO(  Pr_RegPuntoInternetXOlt.ID_PUNTO,
                                                                Lrf_ServsAdicIProtegidoXPto,
                                                                Lv_Status,
                                                                Lv_Mensaje);

    LOOP
      FETCH Lrf_ServsAdicIProtegidoXPto BULK COLLECT INTO Lt_TServIProtegidoAdicsXPto LIMIT 100;
      Ln_IndxServsAdicIProtegidoXPto := Lt_TServIProtegidoAdicsXPto.FIRST;
      WHILE (Ln_IndxServsAdicIProtegidoXPto IS NOT NULL)
      LOOP
        Lv_ExistenServicios           := 'SI';
        Pv_GestionaLicencias          := 'SI';
        Lr_RegServIProtegidoAdicsXPto := Lt_TServIProtegidoAdicsXPto(Ln_IndxServsAdicIProtegidoXPto);
        Lv_Status                     := '';
        Lv_Mensaje                    := '';
        Ln_TotalLicenciasAdicionales  := Ln_TotalLicenciasAdicionales 
                                           + COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lr_RegServIProtegidoAdicsXPto.CANT_DISPOSITIVOS,'^\d+')),0);
        Ln_PrecioVentaTotalLicencias  := Ln_PrecioVentaTotalLicencias + Lr_RegServIProtegidoAdicsXPto.PRECIO_VENTA_SERVICIO;

        Lr_InfoServicio               := NULL;
        Lr_InfoServicio.ESTADO        := 'Cancel';
        Lr_InfoServicio.ID_SERVICIO   := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_SERVICIO(Lr_InfoServicio, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := 'Cancel';
        Lr_ServicioHistorial.MOTIVO_ID    := Ln_IdMotivoCancel;
        Lr_ServicioHistorial.OBSERVACION  := 'Se cancel¿ el servicio ' || Lr_RegServIProtegidoAdicsXPto.DESCRIPCION_PRODUCTO ||
                                               ' con tecnolog¿a MCAFEE de manera l¿gica';
        Lr_ServicioHistorial.ACCION       := 'cancelarCliente';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                              Lr_RegServIProtegidoAdicsXPto.ID_PRODUCTO,
                                                                              Lv_EstadoActivo,
                                                                              Lv_MigradoAKaspersky,
                                                                              'SI',
                                                                              Lv_EstadoActivo,
                                                                              Pv_UsrCreacion,
                                                                              Lv_Mensaje
                                                                            );
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;  

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_MCAFEE(  Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                          Pr_RegPuntoInternetXOlt.LOGIN,
                                                                          Pv_UsrCreacion,
                                                                          Lv_Status,
                                                                          Lv_ValoresCaracts,
                                                                          Lv_ValoresCaractsReporte);
        IF Lv_Status = 'ERROR' THEN
            Lv_Mensaje := Lv_ValoresCaracts;
            RAISE Le_Exception;
        END IF;

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                              Lr_RegServIProtegidoAdicsXPto.ID_PRODUCTO,
                                                                              Lv_EstadoActivo,
                                                                              Lv_ErrorInfMigraMasivaMcAfee,
                                                                              Lv_ValoresCaracts,
                                                                              Lv_EstadoActivo,
                                                                              Pv_UsrCreacion,
                                                                              Lv_Mensaje
                                                                            );
        IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
        END IF;

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                              Lr_RegServIProtegidoAdicsXPto.ID_PRODUCTO,
                                                                              Lv_EstadoActivo,
                                                                              Lv_ErrorRepMigraMasivaMcAfee,
                                                                              Lv_ValoresCaractsReporte,
                                                                              Lv_EstadoActivo,
                                                                              Pv_UsrCreacion,
                                                                              Lv_Mensaje
                                                                            );
        IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
        END IF;

        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := 'Cancel';
        Lr_ServicioHistorial.OBSERVACION  := 'Servicio cancelado por migraci¿n de tecnolog¿a de Internet Protegido';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        Ln_IndxServsAdicIProtegidoXPto := Lt_TServIProtegidoAdicsXPto.NEXT(Ln_IndxServsAdicIProtegidoXPto);
      END LOOP;
      EXIT WHEN Lrf_ServsAdicIProtegidoXPto%NOTFOUND;
    END LOOP;
    CLOSE Lrf_ServsAdicIProtegidoXPto;

    IF Lv_ExistenServicios = 'SI' THEN
      FOR Lr_CurrentRow IN (SELECT COALESCE(TO_NUMBER(REGEXP_SUBSTR(DET.VALOR1,'^\d+')),0) AS NUM_LICENCIAS,
                            COALESCE(TO_BINARY_FLOAT(DET.VALOR2),0) AS PRECIO_LICENCIAS 
                            FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
                            INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
                            ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
                            WHERE CAB.NOMBRE_PARAMETRO = Lv_NombreParamNumLicencias
                            AND CAB.MODULO             = Lv_ModuloParamNumLicencias
                            AND CAB.PROCESO            = Lv_ProcesoParamNumLicencias
                            AND DET.EMPRESA_COD        = Lv_CodEmpresa
                            AND CAB.ESTADO             = Lv_EstadoActivo
                            AND DET.ESTADO             = Lv_EstadoActivo
                            ORDER BY DET.VALOR1 DESC
                            )
      LOOP
          Lt_ArrayNumLicencias(Lt_ArrayNumLicencias.COUNT)          := Lr_CurrentRow.NUM_LICENCIAS;
          Lt_ArrayPrecioLicencias(Lt_ArrayPrecioLicencias.COUNT)    := Lr_CurrentRow.PRECIO_LICENCIAS;
      END LOOP;

      Ln_IndxServIProtegidoKaspersky    := 0;
      Lv_AgregaProducto                 := 'SI';
      Lv_Exit                           := 'NO';
      Ln_LicenciasRestantes             := Ln_TotalLicenciasAdicionales;
      Ln_PrecioLicenciasRestantes       := Ln_PrecioVentaTotalLicencias;
      WHILE (Ln_LicenciasRestantes > 0 AND Ln_PrecioLicenciasRestantes > 0 AND Lv_AgregaProducto = 'SI')
      LOOP
        Ln_IndxLoop := Lt_ArrayNumLicencias.FIRST;
        Lv_Exit     := 'NO';
        WHILE (Ln_IndxLoop IS NOT NULL AND Lv_Exit = 'NO')
        LOOP
          Ln_CantidadLicenciasPermitidas    := Lt_ArrayNumLicencias(Ln_IndxLoop);
          Lv_AgregaProducto                 := 'NO';
          Ln_PrecioServIProtegKaspersky     := Lt_ArrayPrecioLicencias(Ln_IndxLoop);

          IF Ln_PrecioServIProtegKaspersky <= Ln_PrecioLicenciasRestantes THEN
            Ln_LicenciasRestantes       := Ln_LicenciasRestantes - Ln_CantidadLicenciasPermitidas;
            Ln_PrecioLicenciasRestantes := Ln_PrecioLicenciasRestantes - Ln_PrecioServIProtegKaspersky;
            Lr_RegServIProtegidoKaspersky                               := NULL;
            Lr_RegServIProtegidoKaspersky.ID_PRODUCTO                   := Lr_ProductoInternetProtegido.ID_PRODUCTO;
            Lr_RegServIProtegidoKaspersky.DESCRIPCION_PRODUCTO          := Lv_DescripcionProdIProtegido;
            Lr_RegServIProtegidoKaspersky.PRECIO_VENTA_SERVICIO         := Ln_PrecioServIProtegKaspersky;
            Lr_RegServIProtegidoKaspersky.CANT_DISPOSITIVOS             := Ln_CantidadLicenciasPermitidas;
            Lt_TServIProtegidoKaspersky(Ln_IndxServIProtegidoKaspersky) := Lr_RegServIProtegidoKaspersky;
            Ln_IndxServIProtegidoKaspersky                              := Ln_IndxServIProtegidoKaspersky + 1;
            Lv_AgregaProducto                                           := 'SI';
            Lv_Exit                                                     := 'SI';
          END IF;
          Ln_IndxLoop := Lt_ArrayNumLicencias.NEXT(Ln_IndxLoop);
        END LOOP;
      END LOOP;

      Ln_IndxServIProtegidoKaspersky := Lt_TServIProtegidoKaspersky.FIRST;
      WHILE (Ln_IndxServIProtegidoKaspersky IS NOT NULL) LOOP
        Lr_RegServIProtegidoKaspersky   := Lt_TServIProtegidoKaspersky(Ln_IndxServIProtegidoKaspersky);
        Lv_Status                       := '';
        Lv_Mensaje                      := '';
        Ln_IdServicioNuevo              := 0;
        Ln_IdOrdenTrabajoServicio       := 0;
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_I_PROTEGIDO( Pr_RegPuntoInternetXOlt,
                                                                            Lr_ProductoInternetProtegido,
                                                                            Lr_RegServIProtegidoKaspersky.PRECIO_VENTA_SERVICIO,
                                                                            Lv_UsrCreacionMigraMcAfee,
                                                                            Lv_Status,
                                                                            Lv_Mensaje,
                                                                            Ln_IdServicioNuevo,
                                                                            Ln_IdOrdenTrabajoServicio);

        IF Lv_Status = 'OK' THEN
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_MigradoAKaspersky,
                                                                                'SI',
                                                                                Lv_EstadoActivo,
                                                                                Lv_UsrCreacionMigraMcAfee,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          Lr_RegServIProtegidoXActivar                      := NULL;
          Lr_RegServIProtegidoXActivar.ID_SERVICIO          := Ln_IdServicioNuevo;
          Lr_RegServIProtegidoXActivar.ID_PRODUCTO          := Lr_ProductoInternetProtegido.ID_PRODUCTO;
          Lr_RegServIProtegidoXActivar.DESCRIPCION_PRODUCTO := Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO;
          Lr_RegServIProtegidoXActivar.ID_ORDEN_TRABAJO     := Ln_IdOrdenTrabajoServicio;
          Lr_RegServIProtegidoXActivar.CANT_DISPOSITIVOS    := Lr_RegServIProtegidoKaspersky.CANT_DISPOSITIVOS;
          Lt_TServIProtegidoXActivar(Ln_IndxServIProtegidoXActivar) := Lr_RegServIProtegidoXActivar;
          Ln_IndxServIProtegidoXActivar                             := Ln_IndxServIProtegidoXActivar + 1;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_CorreoElectronico,
                                                                                Lv_CorreoLicencias,
                                                                                Lv_EstadoActivo,
                                                                                Lv_UsrCreacionMigraMcAfee,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_TieneInternet,
                                                                                'SI',
                                                                                Lv_EstadoActivo,
                                                                                Lv_UsrCreacionMigraMcAfee,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_CantDispositivos,
                                                                                Lr_RegServIProtegidoKaspersky.CANT_DISPOSITIVOS,
                                                                                Lv_EstadoActivo,
                                                                                Lv_UsrCreacionMigraMcAfee,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_Antivirus,
                                                                                Lv_ValorAntivirus,
                                                                                Lv_EstadoActivo,
                                                                                Lv_UsrCreacionMigraMcAfee,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        ELSE
          Lr_ServicioHistorial              := NULL;
          Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
          Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
          Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
          Lr_ServicioHistorial.OBSERVACION  := 'No se logr¿ crear servicio de I. Protegido, ' ||
                                               'los datos a usar para crear manualmente son los siguientes:<br>'||
                                               'CantidadLicencias: ' || Lr_RegServIProtegidoKaspersky.CANT_DISPOSITIVOS || '<br>' ||
                                               'PrecioServicio   : ' || Lr_RegServIProtegidoKaspersky.PRECIO_VENTA_SERVICIO || '<br>' ||
                                               'TieneInternet    :  SI<br>';
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;  
        END IF;
        Ln_IndxServIProtegidoKaspersky := Lt_TServIProtegidoKaspersky.NEXT(Ln_IndxServIProtegidoKaspersky);
      END LOOP;


      Ln_IndxServIProtegidoXActivar := Lt_TServIProtegidoXActivar.FIRST;
      WHILE (Ln_IndxServIProtegidoXActivar IS NOT NULL) LOOP
        Lr_RegServIProtegidoXActivar    := Lt_TServIProtegidoXActivar(Ln_IndxServIProtegidoXActivar);
        Lv_SuscriberIdWsGms             := '';
        Lcl_MensajeErrorHtmlWsGms       := '';
        Lv_EjecutaProcesoError          := 'NO';
        Lv_StatusWsGms                  := '';
        Lv_Status                       := '';
        Lv_Mensaje                      := '';
        IF Lv_CorreoLicencias IS NOT NULL AND Lv_CorreoLicencias <> 'SIN CORREO' THEN
          Lr_RegWsGms.Identificacion  := Pr_RegPuntoInternetXOlt.IDENTIFICACION_CLIENTE;
          Lr_RegWsGms.Email           := Lv_CorreoLicencias;
          IF Pr_RegPuntoInternetXOlt.RAZON_SOCIAL IS NOT NULL THEN
            Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
            Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
          ELSE
            Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.NOMBRES;
            Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.APELLIDOS;
          END IF;
          Lr_RegWsGms.Cantidad      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lr_RegServIProtegidoXActivar.CANT_DISPOSITIVOS,'^\d+')), 3);
          Lr_RegWsGms.SuscriberId   := 0;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS(  Lr_RegWsGms,
                                                                            'Activacion',
                                                                            Lv_StatusWsGms,
                                                                            Lv_SuscriberIdWsGms,
                                                                            Lcl_MensajeErrorHtmlWsGms);
          IF Lv_StatusWsGms = 'OK' THEN
            Lr_InfoServicio               := NULL;
            Lr_InfoServicio.ESTADO        := 'Activo';
            Lr_InfoServicio.ID_SERVICIO   := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_SERVICIO(Lr_InfoServicio, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;

            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacionMigraMcAfee;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := Lv_EstadoActivo;
            Lr_ServicioHistorial.OBSERVACION  := 'Se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);

            --Env¿o de Correo al Cliente al activarse el servicio Internet Protegido
            Lcl_Plantilla           := Lcl_PlantillaInicialOK;
            Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreCliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
            Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ correo }}', Lv_CorreoLicencias);

            Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'NO');
            Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
            WHILE (Ln_IndxLoop IS NOT NULL)
            LOOP
              Lv_CorreosCliente := Lt_CorreosLicencias(Ln_IndxLoop) || ',';
              Ln_IndxLoop       := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
            END LOOP;

            IF Lv_CorreosCliente IS NULL THEN
              Lv_CorreosCliente := Lv_Remitente || ',';
            END IF;

            DB_GENERAL.GNRLPCK_UTIL.P_SEND_MAIL_SMTP(   Lv_Remitente, 
                                                        Lv_CorreosCliente, 
                                                        ',', 
                                                        'Bienvenido a NetlifeDefense, el sistema de ' ||
                                                        'seguridad inform¿tica para proteger tu vida digital.', 
                                                        NULL, 
                                                        NULL, 
                                                        Lcl_Plantilla , 
                                                        'text/html; charset=iso-8859-1');

            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY(Lr_RegServIProtegidoXActivar.ID_SERVICIO,
                                                                            Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                            Lv_SuscriberIdWsGms,
                                                                            Lv_ValorCodProducto,
                                                                            Lv_ValorAntivirus,
                                                                            Lv_UsrCreacionMigraMcAfee,
                                                                            Lv_Status,
                                                                            Lv_Mensaje);
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
            Ln_ContadorOK := Ln_ContadorOK + 1;
            IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
              Lr_RegWsGms.SuscriberId   := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_SuscriberIdWsGms,'^\d+')), 0);
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO(   Lr_RegServIProtegidoXActivar.ID_SERVICIO,
                                                                            Lr_RegWsGms,
                                                                            Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO,
                                                                            'servicio ',
                                                                            ' con tecnolog¿a ' || Lv_ValorAntivirus,
                                                                            Lv_UsrCreacionMigraMcAfee,
                                                                            Lv_Status,
                                                                            Lv_Mensaje);
              IF Lv_Status = 'ERROR' THEN
                Ln_ContadorOK := Ln_ContadorOK - 1;
                Lr_ServicioHistorial              := NULL;
                Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
                Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
                Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
                Lr_ServicioHistorial.ESTADO       := 'In-Corte';
                Lr_ServicioHistorial.OBSERVACION  := 'No se ha podido cortar las licencias de Internet Protegido';
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
              END IF;
              Lr_InfoServicio               := NULL;
              Lr_InfoServicio.ESTADO        := 'In-Corte';
              Lr_InfoServicio.ID_SERVICIO   := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_SERVICIO(Lr_InfoServicio, Lv_Mensaje);
              IF Lv_Mensaje IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            END IF;                                         
          ELSE
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'Error en la ejecuci¿n del web service<br>' || Lcl_MensajeErrorHtmlWsGms;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
            IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
              Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
              Lr_ServicioHistorial.ESTADO       := 'Pendiente';
              Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                   || ' con tecnolog¿a ' || Lv_ValorAntivirus 
                                                   || ' al ejecutarse la migraci¿n de tecnolog¿a';
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
              IF Lv_Mensaje IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            ELSE
              Lv_EjecutaProcesoError := 'SI';
            END IF;
          END IF;
        ELSE
          IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n y corte '
                                                 || 'del producto ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO || ' con tecnolog¿a ' 
                                                 || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;

            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus 
                                                 || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          ELSE
            Lv_EjecutaProcesoError  := 'SI';
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n '
                                                 || 'del producto ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO || ' con tecnolog¿a ' 
                                                 || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        END IF;

        IF Lv_EjecutaProcesoError = 'SI' THEN
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Lr_RegServIProtegidoXActivar.ID_SERVICIO,
                                                                                Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                                Lv_EstadoActivo,
                                                                                Lv_NumeroReintentos,
                                                                                '0',
                                                                                Lv_EstadoActivo,
                                                                                Pv_UsrCreacion,
                                                                                Lv_Mensaje
                                                                              );
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          --Env¿a de correo en caso de que se presente un error al activar el servicio Internet Protegido
          Lr_GetInfoPlantilla     := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('ERRORACTIVAIPMP');
          Lcl_PlantillaInicial    := Lr_GetInfoPlantilla.PLANTILLA;
          Lcl_Plantilla           := Lcl_PlantillaInicial;
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreProducto }}', Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ descripcionServicio }}', 'con tecnolog¿a ' || Lv_ValorAntivirus);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ cliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ login }}', Pr_RegPuntoInternetXOlt.LOGIN);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreJurisdiccion }}', Pr_RegPuntoInternetXOlt.NOMBRE_JURISDICCION);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ tipoServicio }}', 'Producto');
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreServicio }}', Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ observacion | raw }}', 
                                     'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                     || ' con tecnolog¿a ' || Lv_ValorAntivirus);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ estadoServicio }}', 'Pendiente');
          IF Lr_GetInfoPlantilla.ALIAS_CORREOS IS NOT NULL THEN
            Lr_GetInfoPlantilla.ALIAS_CORREOS := REPLACE(Lr_GetInfoPlantilla.ALIAS_CORREOS, ';', ',') || ',';
          ELSE 
            Lr_GetInfoPlantilla.ALIAS_CORREOS := Lv_Remitente;
          END IF;
          DB_COMUNICACION.CUKG_TRANSACTIONS.P_SEND_MAIL(    Lv_Remitente, 
                                                            Lr_GetInfoPlantilla.ALIAS_CORREOS, 
                                                            'Error en Activacion de ' ||
                                                            Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO ||
                                                            ' - ' || Pr_RegPuntoInternetXOlt.LOGIN ,
                                                            SUBSTR(Lcl_Plantilla, 1, 32767), 
                                                            'text/html; charset=iso-8859-1', 
                                                            Lv_Mensaje);
          Lr_ServicioHistorial              := NULL;
          Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoXActivar.ID_SERVICIO;
          Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
          Lr_ServicioHistorial.ESTADO       := 'Pendiente';
          Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                               || ' con tecnolog¿a ' || Lv_ValorAntivirus;
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        END IF;
        Ln_IndxServIProtegidoXActivar := Lt_TServIProtegidoXActivar.NEXT(Ln_IndxServIProtegidoXActivar);
      END LOOP;
    END IF;
    COMMIT;
    IF Lv_ExistenServicios = 'SI' THEN
      IF Ln_ContadorOK = Lt_TServIProtegidoXActivar.COUNT THEN
        Pv_Status := 'OK';
      ELSE
        Pv_Status := 'ERROR-PROCESO';
      END IF;
    ELSE
      Pv_Status := 'OK';
    END IF;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_ADICS',
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'Los servicios Internet Protegido no pudieron ser migrados ya que el proceso present¿ ' ||
                   'problemas, por favor comun¿quese con Sistemas';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_ADICS',
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_MIGRA_SERV_I_PROTEGIDO_ADICS;

  PROCEDURE P_MIGRACION_I_PROTEGIDO_X_PTO(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2)
  AS
    Lv_StatusMigraLicenciasPlan VARCHAR2(13);
    Lv_MsjMigraLicenciasPlan    VARCHAR2(4000);
    Lv_GestionaLicenciasPlan    VARCHAR2(2);
    Lv_StatusMigraLicenciasAdic VARCHAR2(13);
    Lv_MsjMigraLicenciasAdic    VARCHAR2(4000);
    Lv_GestionaLicenciasAdic    VARCHAR2(2);
    Lr_ServicioHistorial        DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
  BEGIN
    IF Pr_RegPuntoInternetXOlt.ID_ITEM_I_PROTEGIDO IS NOT NULL AND Pr_RegPuntoInternetXOlt.VALOR_SPC_SUSCRIBER_ID IS NULL 
    AND Pr_RegPuntoInternetXOlt.VALOR_SPC_ANTIVIRUS IS NULL THEN 
      Lv_GestionaLicenciasPlan := 'SI';
      --Producto I. PROTEGIDO MULTI PAID dentro del plan pero sin tecnolog¿a Kaspersky
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_PLAN( Pr_RegPuntoInternetXOlt,
                                                                            Pv_UsrCreacion,
                                                                            Lv_StatusMigraLicenciasPlan, 
                                                                            Lv_MsjMigraLicenciasPlan);
      IF Lv_StatusMigraLicenciasPlan = 'ERROR' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := Lv_MsjMigraLicenciasPlan;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Pv_Mensaje);
      END IF;
    ELSE
      Lv_StatusMigraLicenciasPlan := 'OK';
    END IF;

    IF Pr_RegPuntoInternetXOlt.CANTIDAD_SERVICIOS_ADICIONALES > 0 THEN
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_MIGRA_SERV_I_PROTEGIDO_ADICS(Pr_RegPuntoInternetXOlt,
                                                                            Pv_UsrCreacion,
                                                                            Lv_StatusMigraLicenciasAdic, 
                                                                            Lv_MsjMigraLicenciasAdic,
                                                                            Lv_GestionaLicenciasAdic);

      IF Lv_StatusMigraLicenciasAdic = 'ERROR' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := Lv_MsjMigraLicenciasAdic;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Pv_Mensaje);
      END IF;
    ELSE
      Lv_StatusMigraLicenciasAdic := 'OK';
    END IF;
    COMMIT;

    IF Lv_StatusMigraLicenciasPlan = 'OK' AND Lv_StatusMigraLicenciasAdic = 'OK' THEN
      Pv_Status := 'OK';
    ELSE
      Pv_Status := 'ERROR';
    END IF;

    IF Lv_GestionaLicenciasPlan = 'SI' OR Lv_GestionaLicenciasAdic = 'SI' THEN
      Pv_GestionaLicencias := 'SI';
    ELSE
      Pv_GestionaLicencias := 'NO';
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido realizar el proceso de migraci¿n de servicios adicionales con ID del servicio de Internet '
                   || Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRACION_I_PROTEGIDO_X_PTO', 
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_MIGRACION_I_PROTEGIDO_X_PTO;

  PROCEDURE P_MIGRA_SERVICIOS_MCAFEE_ERROR
  AS
    CURSOR C_GetRegistros(Pv_DescCaract VARCHAR2,Pv_EstadoActivo VARCHAR2, Pv_BusquedaProductos VARCHAR2)
    IS
      SELECT INFO_SERVICIO_PROD_CARACT.VALOR AS valor
      FROM DB_COMERCIAL.INFO_PUNTO,
      DB_COMERCIAL.INFO_SERVICIO,
      DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT,
      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA,
      DB_COMERCIAL.ADMI_CARACTERISTICA ,
      DB_COMERCIAL.ADMI_PRODUCTO
      WHERE INFO_PUNTO.ID_PUNTO                                 = INFO_SERVICIO.PUNTO_ID
      AND INFO_SERVICIO.ID_SERVICIO                             = INFO_SERVICIO_PROD_CARACT.SERVICIO_ID
      AND INFO_SERVICIO_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID = ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA
      AND ADMI_PRODUCTO_CARACTERISTICA.CARACTERISTICA_ID        = ADMI_CARACTERISTICA.ID_CARACTERISTICA
      AND ADMI_PRODUCTO_CARACTERISTICA.PRODUCTO_ID              = ADMI_PRODUCTO.ID_PRODUCTO
      AND ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA        = Pv_DescCaract
      AND INFO_SERVICIO_PROD_CARACT.ESTADO                      = Pv_EstadoActivo
      AND INFO_SERVICIO_PROD_CARACT.FE_CREACION                >= to_date(TO_CHAR(sysdate, 'dd/mm/yyyy'), 'dd/mm/yyyy')
      AND ADMI_PRODUCTO.DESCRIPCION_PRODUCTO LIKE Pv_BusquedaProductos
      AND INFO_SERVICIO_PROD_CARACT.VALOR IS NOT NULL
      ORDER BY INFO_SERVICIO_PROD_CARACT.ID_SERVICIO_PROD_CARACT ASC;
    Lv_BusquedaProductos        VARCHAR2(10)   := 'I. %';
    Lv_DescCaract               VARCHAR2(37)   := 'ERROR_REPORTE_MIGRACION_MASIVA_MCAFEE';
    Lv_EstadoActivo             VARCHAR2(10)   := 'Activo';
    Lcl_PlantillaReporte        CLOB;
    Lr_GetAliasPlantillaGeneral DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_Remitente                VARCHAR2(50)  := 'notificaciones_telcos@telconet.ec';
    Lv_Asunto                   VARCHAR2(300);
    Lf_Archivo                  utl_file.file_type;
    Lv_Directorio               VARCHAR2(50)  := 'DIR_MIGRACION_I_PROTEGIDO';
    Lv_FechaArchivo             VARCHAR2(20)  := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
    Lv_NombreArchivo            VARCHAR2(100);
    Lv_NombreArchivoZip         VARCHAR2(100);
    Lv_PrefijoNombreArchivo     VARCHAR2(100) := 'ConsolidadoMcAfeeACancelar_';
    Lv_EnviaCorreoConsolidado   VARCHAR2(2)   := 'NO';
    Lv_Gzip                     VARCHAR2(100);
    Lv_Delimitador              VARCHAR2(1)   := ';';
  BEGIN
    Lr_GetAliasPlantillaGeneral   := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('MIGRAMASIMCAFEE');
    Lv_NombreArchivo              := Lv_PrefijoNombreArchivo || Lv_FechaArchivo || '.csv';
    Lv_NombreArchivoZip           := Lv_NombreArchivo || '.gz';
    Lv_Gzip                       := 'gzip /backup/reportes/migracionIProtegido/' || Lv_NombreArchivo;
    Lv_Asunto                     := 'Consolidado diario de clientes MCAFEE a cancelar por migraci¿n masiva de tecnolog¿a';
    Lcl_PlantillaReporte := Lr_GetAliasPlantillaGeneral.PLANTILLA;
    FOR I_GetRegistros IN C_GetRegistros(Lv_DescCaract, Lv_EstadoActivo,Lv_BusquedaProductos)
    LOOP
      IF Lv_EnviaCorreoConsolidado = 'NO' THEN
        Lf_Archivo           := UTL_FILE.FOPEN(Lv_Directorio,Lv_NombreArchivo,'w',3000);
        --Cabecera del archivo adjunto con la informaci¿n del proceso de migraci¿n
        UTL_FILE.PUT_LINE(Lf_Archivo, 
                          'Partner ID' || Lv_Delimitador || 
                          'Customercontext ID' || Lv_Delimitador || 
                          'SKU' || Lv_Delimitador ||
                          'Login' || Lv_Delimitador ||
                          'Correo electronico' || Lv_Delimitador);
      END IF;
      Lv_EnviaCorreoConsolidado := 'SI';
      UTL_FILE.PUT_LINE(Lf_Archivo, I_GetRegistros.VALOR);
    END LOOP;

    IF Lv_EnviaCorreoConsolidado = 'SI' THEN
      UTL_FILE.FCLOSE(Lf_Archivo);
      DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND (Lv_Gzip));
      IF Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS IS NOT NULL THEN
        Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS, ';', ',') || ',';
      ELSE 
        Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS := Lv_Remitente || ',';
      END IF;
      DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS, 
                                                Lv_Asunto, Lcl_PlantillaReporte, Lv_Directorio, Lv_NombreArchivoZip);
      UTL_FILE.FREMOVE(Lv_Directorio,Lv_NombreArchivoZip);
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRA_SERVICIOS_MCAFEE_ERROR', 
                                            'Error en la migraci¿n por olt ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_MIGRA_SERVICIOS_MCAFEE_ERROR;

  PROCEDURE P_MIGRACION_I_PROTEGIDO_X_OLT
  AS
    Lv_GestionaLicenciasXPto    VARCHAR2(2);
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_EstadoModificado         VARCHAR2(10) := 'Modificado';
    Lv_UsrCreacion              VARCHAR2(15) := 'migraIProtegido';
    Lv_DetalleValorMigracion    VARCHAR2(6) := 'INICIO';
    Lv_DetalleNombreMigracion   VARCHAR2(28) := 'MIGRACION MASIVA';
    Lv_TipoElementoOlt          VARCHAR2(3) := 'OLT';
    Ln_IndxPuntosIProtegidoXOlt NUMBER;
    Lr_RegPuntoInternetXOlt     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt;
    Lt_TPuntosInternetXOlt      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_PuntosInternetXOlt;
    Lrf_PuntosIProtegidoXOlt    SYS_REFCURSOR;
    Lv_Status                   VARCHAR2(5);
    Lv_Mensaje                  VARCHAR2(4000);
    Lv_Remitente                VARCHAR2(50)  := 'notificaciones_telcos@telconet.ec';
    Lv_Asunto                   VARCHAR2(300);
    Lv_Directorio               VARCHAR2(50)  := 'DIR_MIGRACION_I_PROTEGIDO';
    Lv_FechaArchivo             VARCHAR2(20)  := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
    Lv_NombreArchivo            VARCHAR2(100);
    Lv_NombreArchivoZip         VARCHAR2(100);
    Lv_PrefijoNombreArchivo     VARCHAR2(100) := 'ReporteMigracionInternetProtegido_';
    Lv_Delimitador              VARCHAR2(1)   := ';';
    Lv_EnviaCorreoConsolidado   VARCHAR2(2)   := 'NO';
    Lf_Archivo                  utl_file.file_type;
    Lv_Gzip                     VARCHAR2(100);
    Lcl_PlantillaReporte        CLOB;
    Lr_GetAliasPlantillaGeneral DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Le_Exception                EXCEPTION;
    Lr_InfoDetalleElemento      DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE;
    CURSOR Lc_GetOltsAMigrarIProtegido
    IS
      SELECT OLT.ID_ELEMENTO, OLT.NOMBRE_ELEMENTO, OLT.ESTADO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO OLT
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_OLT
      ON MODELO_OLT.ID_MODELO_ELEMENTO = OLT.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_OLT
      ON TIPO_OLT.ID_TIPO_ELEMENTO = MODELO_OLT.TIPO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE_OLT_X_MIGRAR
      ON IDE_OLT_X_MIGRAR.ELEMENTO_ID     = OLT.ID_ELEMENTO
      WHERE TIPO_OLT.NOMBRE_TIPO_ELEMENTO = Lv_TipoElementoOlt
      AND IDE_OLT_X_MIGRAR.DETALLE_NOMBRE = Lv_DetalleNombreMigracion
      AND IDE_OLT_X_MIGRAR.DETALLE_VALOR  = Lv_DetalleValorMigracion
      AND IDE_OLT_X_MIGRAR.ESTADO         = Lv_EstadoActivo
      AND (OLT.ESTADO                     = Lv_EstadoActivo
           OR OLT.ESTADO                  = Lv_EstadoModificado);
  BEGIN
    Lr_GetAliasPlantillaGeneral  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('MIGRAIPROTEGIDO');
    Lv_NombreArchivo     := Lv_PrefijoNombreArchivo || Lv_FechaArchivo || '.csv';
    Lv_NombreArchivoZip  := Lv_NombreArchivo || '.gz';
    Lv_Gzip              := 'gzip /backup/reportes/migracionIProtegido/' || Lv_NombreArchivo;
    Lv_Asunto            := 'Notificacion Reporte de migracion de servicios de Internet Protegido';
    Lcl_PlantillaReporte := Lr_GetAliasPlantillaGeneral.PLANTILLA;
    FOR I_GetOltsAMigrarIProtegido IN Lc_GetOltsAMigrarIProtegido
    LOOP
      Lv_GestionaLicenciasXPto := '';
      --Se obtiene el listado de puntos que tienen servicios de Internet Protegido con tecnolog¿a McAfee
      DB_COMERCIAL.TECNK_SERVICIOS.P_GET_PTOS_INTERNET_X_OLT(   I_GetOltsAMigrarIProtegido.ID_ELEMENTO,
                                                                Lrf_PuntosIProtegidoXOlt,
                                                                Lv_Status,
                                                                Lv_Mensaje);
      LOOP
        FETCH Lrf_PuntosIProtegidoXOlt BULK COLLECT INTO Lt_TPuntosInternetXOlt LIMIT 100;

        Ln_IndxPuntosIProtegidoXOlt := Lt_TPuntosInternetXOlt.FIRST;
        WHILE (Ln_IndxPuntosIProtegidoXOlt IS NOT NULL)
        LOOP
          Lr_RegPuntoInternetXOlt   := Lt_TPuntosInternetXOlt(Ln_IndxPuntosIProtegidoXOlt);
          Lv_Status                 := '';
          Lv_Mensaje                := '';
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_MIGRACION_I_PROTEGIDO_X_PTO( Lr_RegPuntoInternetXOlt,
                                                                                Lv_UsrCreacion,
                                                                                Lv_Status, 
                                                                                Lv_Mensaje,
                                                                                Lv_GestionaLicenciasXPto);
          IF Lv_GestionaLicenciasXPto = 'SI' THEN
            IF Lv_EnviaCorreoConsolidado = 'NO' THEN
              Lf_Archivo           := UTL_FILE.FOPEN(Lv_Directorio,Lv_NombreArchivo,'w',3000);
              --Cabecera del archivo adjunto con la informaci¿n del proceso de migraci¿n
              UTL_FILE.PUT_LINE(Lf_Archivo, 
                                'OLT' || Lv_Delimitador || 
                                'LOGIN' || Lv_Delimitador || 
                                'CEDULA/RUC' || Lv_Delimitador ||
                                'NOMBRES' || Lv_Delimitador ||
                                'ESTADO' || Lv_Delimitador);
            END IF;
            Lv_EnviaCorreoConsolidado := 'SI';
            UTL_FILE.PUT_LINE(Lf_Archivo,
            Lr_RegPuntoInternetXOlt.NOMBRE_ELEMENTO || Lv_Delimitador || 
            Lr_RegPuntoInternetXOlt.LOGIN || Lv_Delimitador || 
            Lr_RegPuntoInternetXOlt.IDENTIFICACION_CLIENTE || Lv_Delimitador || 
            Lr_RegPuntoInternetXOlt.CLIENTE || Lv_Delimitador ||
            Lv_Status || Lv_Delimitador );
          END IF;
          Ln_IndxPuntosIProtegidoXOlt := Lt_TPuntosInternetXOlt.NEXT(Ln_IndxPuntosIProtegidoXOlt);
        END LOOP;
        EXIT WHEN Lrf_PuntosIProtegidoXOlt%NOTFOUND;
      END LOOP;
      CLOSE Lrf_PuntosIProtegidoXOlt;

      Lr_InfoDetalleElemento                := NULL;
      Lr_InfoDetalleElemento.DETALLE_NOMBRE := Lv_DetalleNombreMigracion;
      Lr_InfoDetalleElemento.DETALLE_VALOR  := 'FIN';
      Lr_InfoDetalleElemento.ELEMENTO_ID    := I_GetOltsAMigrarIProtegido.ID_ELEMENTO;
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      COMMIT;
    END LOOP;

    IF Lv_EnviaCorreoConsolidado = 'SI' THEN
      UTL_FILE.FCLOSE(Lf_Archivo);
      DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND (Lv_Gzip));
      IF Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS IS NOT NULL THEN
        Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS, ';', ',') || ',';
      ELSE 
        Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS := Lv_Remitente || ',';
      END IF;
      DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaGeneral.ALIAS_CORREOS, 
                                                Lv_Asunto, Lcl_PlantillaReporte, Lv_Directorio, Lv_NombreArchivoZip);
      UTL_FILE.FREMOVE(Lv_Directorio,Lv_NombreArchivoZip);
    END IF;

    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_MIGRA_SERVICIOS_MCAFEE_ERROR;

  EXCEPTION
  WHEN Le_Exception THEN
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRACION_I_PROTEGIDO_X_OLT', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Lv_Mensaje := 'Error en la migraci¿n por olt ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                  ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_MIGRACION_I_PROTEGIDO_X_OLT', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    --
  END P_MIGRACION_I_PROTEGIDO_X_OLT;

FUNCTION INFRF_GET_TRAZA_ELEMENTOS(
    Pn_interfaceInicial   IN NUMBER,
    Pv_tipoElementoPadre IN VARCHAR2)
  RETURN VARCHAR2
IS
--
  CURSOR C_getEnlaceIni(Cv_InterfaceFin INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
  IS
    SELECT E.INTERFACE_ELEMENTO_INI_ID
    FROM INFO_ENLACE E
    WHERE E.ESTADO                  = 'Activo'
    AND E.INTERFACE_ELEMENTO_FIN_ID = Cv_InterfaceFin;
      --
  CURSOR C_getNoEnlaceIni(Cv_InterfaceFin INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
  IS
    SELECT count(E.ID_ENLACE)
    FROM INFO_ENLACE E
    WHERE E.ESTADO                  = 'Activo'
    AND E.INTERFACE_ELEMENTO_FIN_ID = Cv_InterfaceFin;
  --
  CURSOR C_getElementoPorInter(Cv_InterfaceElemento INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
  IS
    SELECT E.ID_ELEMENTO,
      TE.NOMBRE_TIPO_ELEMENTO, 
      E.NOMBRE_ELEMENTO,
      IE.NOMBRE_INTERFACE_ELEMENTO
    FROM INFO_ELEMENTO E,
      INFO_INTERFACE_ELEMENTO IE,
      ADMI_MODELO_ELEMENTO ME,
      ADMI_TIPO_ELEMENTO TE
    WHERE E.ID_ELEMENTO          = IE.ELEMENTO_ID
    AND ME.ID_MODELO_ELEMENTO    = E.MODELO_ELEMENTO_ID
    AND TE.ID_TIPO_ELEMENTO      = ME.TIPO_ELEMENTO_ID
    AND IE.ID_INTERFACE_ELEMENTO = Cv_InterfaceElemento;
  --
  Lv_traza VARCHAR2(32766)                                              :=NULL;
  Ln_InterfazIni INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE     :=NULL;
  Ln_InterfazElemento INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE:=NULL;
  Lv_nombreElemento INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
  Ln_idElemento INFO_ELEMENTO.ID_ELEMENTO%type;
  Ln_idElementoOld INFO_ELEMENTO.ID_ELEMENTO%type := 0;
  Lv_tipoElemento ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%type;
  Lv_interfaceElemento INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO%TYPE;
  Ln_NoEnlaces  NUMBER;
  Ln_Contador   NUMBER:=0;
  Lb_bandera BOOLEAN := FALSE;
  --
BEGIN

  Ln_InterfazElemento := Pn_interfaceInicial;
    LOOP
      --
      Ln_NoEnlaces:= 0;
      OPEN C_getNoEnlaceIni(Ln_InterfazElemento);
      FETCH C_getNoEnlaceIni INTO Ln_NoEnlaces;
      CLOSE C_getNoEnlaceIni;      

      IF Ln_NoEnlaces > 1 THEN      
        OPEN C_getElementoPorInter(Ln_InterfazElemento);
        FETCH C_getElementoPorInter INTO Ln_idElemento, Lv_tipoElemento, Lv_nombreElemento, Lv_interfaceElemento;
        CLOSE C_getElementoPorInter;      
           RETURN 'LA INTERFACE '||Lv_interfaceElemento || ' DEL ELEMENTO '||Lv_nombreElemento|| ' TIENE '||Ln_NoEnlaces ||' ENLACES.';
      END IF;      
      Ln_InterfazIni := null;
      OPEN C_getEnlaceIni(Ln_InterfazElemento);
      FETCH C_getEnlaceIni INTO Ln_InterfazIni;
      CLOSE C_getEnlaceIni;
      --      
      IF Ln_InterfazIni IS NOT NULL THEN
        --
        OPEN C_getElementoPorInter(Ln_InterfazIni);
        FETCH C_getElementoPorInter INTO Ln_idElemento, Lv_tipoElemento, Lv_nombreElemento, Lv_interfaceElemento;
        CLOSE C_getElementoPorInter;

          IF Ln_idElemento <> Ln_idElementoOld then
            --
            IF Lv_traza IS NULL THEN 
              Lv_traza :=  Ln_idElemento ||','|| Lv_tipoElemento||','||Lv_nombreElemento||','||Lv_interfaceElemento;
            ELSE
              Lv_traza := Lv_traza ||';'|| Ln_idElemento ||','|| Lv_tipoElemento||','||Lv_nombreElemento||','||Lv_interfaceElemento;
            END IF;
            --
          END IF;
        Ln_idElementoOld := Ln_idElemento;
        IF UPPER(Lv_tipoElemento) = UPPER(Pv_tipoElementoPadre) THEN
          Lb_bandera      := TRUE;
        END IF;
        --
        Ln_InterfazElemento := Ln_InterfazIni;
        --
      ELSE
        RETURN 'NO SE ENCONTRO ENLACES PARA LA INTERFACE ID '||Ln_InterfazElemento;
      END IF;
      --PARA QUE NO SE VUELVA UN CICLO INFINITO
      Ln_Contador := Ln_Contador +1;
      IF Ln_Contador > 30 THEN
        RETURN 'ERROR EN INFRF_GET_TRAZA_ELEMENTOS';
      END IF;

      EXIT
    WHEN Lb_bandera = TRUE;
    END LOOP;
  RETURN Lv_traza;
END INFRF_GET_TRAZA_ELEMENTOS;
--
PROCEDURE INFRP_LIBERA_INTERFACE_SW
AS
  CURSOR C_QUERYREGISTROSSWRESERVED (CN_DIAS NUMBER)
  IS
    SELECT INFO_ELEMENTO.NOMBRE_ELEMENTO,
      INFO_ELEMENTO.ID_ELEMENTO,
      INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO,
      INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO,
      INFO_INTERFACE_ELEMENTO.FE_ULT_MOD
    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO,
      DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO,
      DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO,
      DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
    WHERE INFO_ELEMENTO.MODELO_ELEMENTO_ID      = ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO
    AND ADMI_MODELO_ELEMENTO.TIPO_ELEMENTO_ID   = ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO
    AND ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO = 'SWITCH'
    AND INFO_ELEMENTO.ESTADO                    ='Activo'
    AND INFO_ELEMENTO.ID_ELEMENTO               = INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
    AND INFO_INTERFACE_ELEMENTO.ESTADO          ='reserved'
    AND INFO_INTERFACE_ELEMENTO.FE_ULT_MOD      < CAST (SYSDATE AS TIMESTAMP WITH TIME ZONE) - CN_DIAS;
  CURSOR C_GETPARAMETRO(CV_NOMBREPARAMETRO                         VARCHAR2)
  IS
    SELECT PD.VALOR1
    FROM DB_GENERAL.ADMI_PARAMETRO_CAB PC,
      DB_GENERAL.ADMI_PARAMETRO_DET PD
    WHERE PC.NOMBRE_PARAMETRO = 'PARAMETRO LIBERACION DE INTERFACE SW'
    AND PC.ID_PARAMETRO       = PD.PARAMETRO_ID
    AND PD.DESCRIPCION        = CV_NOMBREPARAMETRO
    AND PD.ESTADO             = 'Activo'
    AND ROWNUM               <= 1;
  CURSOR C_REGISTROSUSANINTERFACE(CN_INTERFACESW NUMBER)
  IS
    SELECT INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO,
      INFO_PUNTO.LOGIN,
      INFO_SERVICIO.LOGIN_AUX,
      INFO_SERVICIO.ESTADO
    FROM DB_COMERCIAL.INFO_SERVICIO,
      DB_COMERCIAL.INFO_PUNTO,
      DB_COMERCIAL.INFO_SERVICIO_TECNICO
    WHERE INFO_PUNTO.ID_PUNTO                       = INFO_SERVICIO.PUNTO_ID
    AND INFO_SERVICIO.ID_SERVICIO                   = INFO_SERVICIO_TECNICO.SERVICIO_ID
    AND INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID = (CN_INTERFACESW);
TYPE T_QUERYREGISTROSSWRESERVED
IS
  TABLE OF C_QUERYREGISTROSSWRESERVED%ROWTYPE INDEX BY PLS_INTEGER;
  V_QUERYREGISTROSSWRESERVED T_QUERYREGISTROSSWRESERVED;
  LN_NUMERODIAS VARCHAR2(2);
  LV_MENSAJE CLOB;
  LB_LIBERAINTERFACE BOOLEAN := FALSE;
  LV_CORREOS         VARCHAR2(500);
BEGIN
  LV_MENSAJE := '<table style="width:100%"  border="1">                  
                <tr>                    
                <th>SWITCH</th>                    
                <th>PUERTO SW</th>                     
                <th>LOGIN ASIGNADO</th>                     
                <th>LOGIN AUX ASIGNADO</th>                     
                <th>ESTADO SERVICIO</th>                    
                <th>FECHA RESERVA PTO SW</th>                  
                </tr>';
  --obtengo el numero de d¿as de un parametro
  OPEN C_GETPARAMETRO('NUMERO DIAS SW');
  FETCH C_GETPARAMETRO INTO LN_NUMERODIAS;
  CLOSE C_GETPARAMETRO;
  LN_NUMERODIAS := COALESCE(TO_NUMBER(REGEXP_SUBSTR(LN_NUMERODIAS,'^\d+')),0) ;
  --obtengo los dedtinatarios
  OPEN C_GETPARAMETRO('CORREOS_DESTINATARIOS');
  FETCH C_GETPARAMETRO INTO LV_CORREOS;
  CLOSE C_GETPARAMETRO;
  --se recorren registros del cursos
  OPEN C_QUERYREGISTROSSWRESERVED(LN_NUMERODIAS);
  LOOP
    FETCH C_QUERYREGISTROSSWRESERVED BULK COLLECT
    INTO V_QUERYREGISTROSSWRESERVED LIMIT 500;
    EXIT
  WHEN V_QUERYREGISTROSSWRESERVED.COUNT = 0;
    FOR I IN 1 .. V_QUERYREGISTROSSWRESERVED.COUNT
    LOOP
      LB_LIBERAINTERFACE := TRUE;
      DBMS_OUTPUT.PUT_LINE('INTERFACE ENCONTRADA: '||V_QUERYREGISTROSSWRESERVED(I).NOMBRE_INTERFACE_ELEMENTO);
      FOR J IN C_REGISTROSUSANINTERFACE(V_QUERYREGISTROSSWRESERVED(I).ID_INTERFACE_ELEMENTO)
      LOOP
        NULL;
        LV_MENSAJE := LV_MENSAJE||'<tr><td>'||V_QUERYREGISTROSSWRESERVED(I).NOMBRE_ELEMENTO||'</td><td>'|| V_QUERYREGISTROSSWRESERVED(I).NOMBRE_INTERFACE_ELEMENTO ||'</td><td>'||J.LOGIN ||'</td><td>'||J.LOGIN_AUX||'</td><td>'|| J.ESTADO ||'</td><td>'||TO_CHAR(V_QUERYREGISTROSSWRESERVED(I).FE_ULT_MOD,'DD/MM/YYYY HH24:MI:SS') ||'</td></tr>';
        UPDATE DB_COMERCIAL.INFO_SERVICIO_TECNICO
        SET INFO_SERVICIO_TECNICO.ELEMENTO_ID          =NULL,
          INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID  =NULL
        WHERE INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO= J.ID_SERVICIO_TECNICO;
      END LOOP;
      UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
      SET INFO_INTERFACE_ELEMENTO.ESTADO                  = 'not connect',
        INFO_INTERFACE_ELEMENTO.USR_ULT_MOD               = 'LiberaPuerto',
        INFO_INTERFACE_ELEMENTO.FE_ULT_MOD                = SYSDATE
      WHERE INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO = V_QUERYREGISTROSSWRESERVED(I).ID_INTERFACE_ELEMENTO;
      COMMIT;
    END LOOP;
  END LOOP;
  CLOSE C_QUERYREGISTROSSWRESERVED;
  IF LB_LIBERAINTERFACE AND LV_MENSAJE IS NOT NULL THEN
    UTL_MAIL.SEND (SENDER => 'procesos_masivos@telconet.ec',
    RECIPIENTS => LV_CORREOS, 
    SUBJECT => 'Reporte de Puertos de SW Liberados '||SYSDATE, 
    MESSAGE => 'El tiempo de reserva de '||LN_NUMERODIAS ||' d&iacute;as ha expirado, se procede a liberar los siguientes puertos: <br> <br>' ||
               TO_CHAR(DBMS_LOB.SUBSTR(LV_MENSAJE, 31000, 1))||'</table> <br> <br> Atentamente,                                     
               <br> Regularizaci&oacute;n Masiva ', MIME_TYPE => 'text/html; charset=UTF-8' );
  END IF;
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  UTL_MAIL.SEND (sender     => 'procesos_masivos@telconet.ec',
  recipients => 'sistemas@telconet.ec',
  subject    => 'Ejecuci¿n del job DB_INFRAESTRUCTURA.INFRP_LIBERA_INTERFACE_SW',
  message    => 'Error en el job DB_INFRAESTRUCTURA.INFRP_LIBERA_INTERFACE_SW : <br>'||SQLERRM, mime_type => 'text/html; charset=UTF-8' );
  NULL;
END INFRP_LIBERA_INTERFACE_SW;
--
PROCEDURE INFRP_LIBERA_VLAN
AS
  CURSOR C_getVlansSinUsar(Cn_dias number) IS
  SELECT NVL(P.RAZON_SOCIAL, P.NOMBRES||' '||P.APELLIDOS) NOMBRE, PERC.*
  FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC PERC,
    DB_COMERCIAL.ADMI_CARACTERISTICA C,
    DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER,
    DB_COMERCIAL.INFO_PERSONA P    
  WHERE PER.ID_PERSONA_ROL = PERC.PERSONA_EMPRESA_ROL_ID
  AND P.ID_PERSONA = PER.PERSONA_ID
  AND C.DESCRIPCION_CARACTERISTICA = 'VLAN'
  AND C.ID_CARACTERISTICA          = PERC.CARACTERISTICA_ID
  AND PERC.FE_CREACION             < CAST (SYSDATE AS TIMESTAMP WITH TIME ZONE) - Cn_dias
  AND PERC.ESTADO = 'Activo'
  AND NOT EXISTS (SELECT SPC.*
                  FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC,
                    DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PC
                  WHERE TO_CHAR(PERC.ID_PERSONA_EMPRESA_ROL_CARACT) = SPC.VALOR
                  AND PC.ID_PRODUCTO_CARACTERISITICA = SPC.PRODUCTO_CARACTERISITICA_ID
                  AND PC.CARACTERISTICA_ID           = C.ID_CARACTERISTICA
                  AND SPC.ESTADO                     = 'Activo' 
                  AND PC.ESTADO                      = 'Activo' );
--                 
CURSOR C_geVlanElemento(Cv_idDetalleElemento VARCHAR2) is
  SELECT DE.DETALLE_VALOR,
    E.NOMBRE_ELEMENTO
  FROM INFO_DETALLE_ELEMENTO DE, 
    INFO_ELEMENTO E
  WHERE E.ID_ELEMENTO        = DE.ELEMENTO_ID
  AND to_char(DE.ID_DETALLE_ELEMENTO) = Cv_idDetalleElemento;   
--
CURSOR C_getParametro(Cv_nombreParametro VARCHAR2) IS
    SELECT PD.VALOR1
    FROM DB_GENERAL.ADMI_PARAMETRO_CAB PC,
      DB_GENERAL.ADMI_PARAMETRO_DET PD
    WHERE PC.NOMBRE_PARAMETRO = 'PARAMETRO LIBERACION DE VLANS'
    AND PC.ID_PARAMETRO       = PD.PARAMETRO_ID
    AND PD.DESCRIPCION        = Cv_nombreParametro
    AND PD.ESTADO = 'Activo';               
  --
  Lv_mensaje CLOB;
  Ln_numeroDias VARCHAR2(2);
  Lv_elemento VARCHAR2(100);
  Lv_vlan VARCHAR2(100);
  Lv_correos VARCHAR2(500);
  --
  BEGIN
    Lv_mensaje := '<table style="width:100%"  border="1">
                  <tr>
                    <th>VLAN</th>
                    <th>PE</th>
                    <th>FECHA RESERVADO</th> 
                    <th>RESERVADO POR</th>
                    <th>CLIENTE</th>
                  </tr>';
    --obtengo el numero de d¿as de un parametro
    OPEN C_getParametro('NUMERO DIAS');
    FETCH C_getParametro INTO Ln_numeroDias;
    CLOSE C_getParametro;
    --obtengo los dedtinatarios
    OPEN C_getParametro('CORREOS_DESTINATARIOS');
    FETCH C_getParametro INTO Lv_correos;
    CLOSE C_getParametro;
    --
    Ln_numeroDias := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Ln_numeroDias,'^\d+')),0) ;
    --
    FOR I IN C_getVlansSinUsar(Ln_numeroDias)
    LOOP
      --actualizo la caracteristica
      UPDATE DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC
      SET USR_ULT_MOD             = 'usr_libera_vlan',
        FE_ULT_MOD                = SYSDATE,
        ESTADO                    = 'Eliminado'
      WHERE ID_PERSONA_EMPRESA_ROL_CARACT = I.ID_PERSONA_EMPRESA_ROL_CARACT;    
      --actualizo la info detalle tambien
      UPDATE DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DE 
      SET DE.ESTADO = 'Activo' 
      WHERE TO_CHAR(DE.ID_DETALLE_ELEMENTO) = I.VALOR; 
      --
      Lv_vlan := '';
      Lv_elemento := '';
      OPEN C_geVlanElemento(I.VALOR);
      FETCH C_geVlanElemento INTO Lv_vlan, Lv_elemento;
      CLOSE C_geVlanElemento;  
      --ingreso el historial
      INSERT INTO DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_HISTO
        (
          ID_PERSONA_EMPRESA_ROL_HISTO,
          USR_CREACION,
          FE_CREACION,
          IP_CREACION,
          ESTADO,
          PERSONA_EMPRESA_ROL_ID,
          OBSERVACION
        )
        VALUES
        (
          DB_COMERCIAL.SEQ_INFO_PERSONA_EMPRESA_ROL_H.NEXTVAL,
          'usr_libera_vlan',
          sysdate,
          '0.0.0.0',
          'Activo',
          I.PERSONA_EMPRESA_ROL_ID,
          'Se ha liberado la siguiente vlan debido a que tiene '||Ln_numeroDias||' dias reservada sin utilizacion. Los datos son los siguientes: 
          vlan: '||Lv_vlan ||' , nombre elemento: '|| Lv_elemento ||' , fecha creacion: '|| TO_CHAR(I.FE_CREACION,'dd/mm/yyyy hh24:mi:ss') 
          ||' , creado por: '|| I.USR_CREACION
        );
      --
    Lv_mensaje := Lv_mensaje||'<tr><td>'||Lv_vlan||'</td><td>'|| Lv_elemento ||'</td><td>'|| TO_CHAR(I.FE_CREACION,'dd/mm/yyyy hh24:mi:ss') 
                  ||'</td><td>'|| I.USR_CREACION||'</td><td>'|| I.NOMBRE ||'</td></tr>';                                       
      --
    END LOOP;

    IF Lv_mensaje IS NOT NULL THEN
        UTL_MAIL.SEND (sender     => 'procesos_masivos@telconet.ec', 
                       recipients => Lv_correos,
                       subject    => 'Reporte de Vlans Liberadas '||SYSDATE, 
                       message    => 'Se han liberado las siguientes vlans debido a que tienen '||Ln_numeroDias
                                     ||' dias reservadas sin utilizacion. Los datos son los siguientes: <br> <br>'
                                     ||TO_CHAR(DBMS_LOB.SUBSTR(Lv_mensaje, 31000, 1))||'</table> <br> <br> Atentamente, 
                                    <br> Regularizacion Masiva ', 
                       mime_type => 'text/html; charset=UTF-8' );
        COMMIT;
    END IF;
    --    
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    UTL_MAIL.SEND (sender     => 'procesos_masivos@telconet.ec', 
                   recipients => 'telcos@telconet.ec', 
                   subject    => 'Ejecuci¿n del job DB_INFRAESTRUCTURA.INFRP_LIBERA_VLAN', 
                   message    => 'Error en el job DB_INFRAESTRUCTURA.INFRP_LIBERA_VLAN : <br>'||SQLERRM, mime_type => 'text/html; charset=UTF-8' );
END INFRP_LIBERA_VLAN;
--
PROCEDURE INFRP_CLONAR_SPLITTER(
    Pv_IdSplitterOrigen      IN INFO_ELEMENTO.ID_ELEMENTO%TYPE,
    Pv_NombreElemento        IN INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE,
    Pv_IdInterfaceSplitterL1 IN INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE,
    Pv_idEmpresa             IN VARCHAR2,
    Pv_UsuarioCrea           IN VARCHAR2,
    Pv_IpIngresa             IN VARCHAR2,
    Lv_MensaError OUT VARCHAR2)
AS
  Lv_NombreTecnicoInternet VARCHAR2(8)           := 'INTERNET';
  Lv_NombreTecnicoIsb VARCHAR2(23)               := 'INTERNET SMALL BUSINESS';
  Lv_NombreTecnicoTelcoHome VARCHAR2(9)          := 'TELCOHOME';
  Lv_EstadoActivo VARCHAR2(6)                    := 'Activo';
  Lv_EstadoEliminado VARCHAR2(9)                 := 'Eliminado';
  Lv_CodEmpresaMd VARCHAR2(2)                    := '18';
  Lv_CodEmpresaTn VARCHAR2(2)                    := '10';
  Lv_EstadoFactible VARCHAR2(8)                  := 'Factible';
  Lv_EstadoAsignadoTarea VARCHAR2(13)            := 'AsignadoTarea';
  Lv_EstadoAsignada VARCHAR2(8)                  := 'Asignada';
  Lv_EstadoPreFactible VARCHAR2(11)              := 'PreFactible';
  Lv_EstadoInCorte VARCHAR2(8)                   := 'In-Corte';
  Lv_EstadoEnVerificacion VARCHAR2(14)           := 'EnVerificacion';
  Lv_EstadoEnPruebas VARCHAR2(9)                 := 'EnPruebas';
  Lv_EstadoReplanificada VARCHAR2(13)            := 'Replanificada';
  Lv_EstadoPrePlanificada VARCHAR2(14)           := 'PrePlanificada';
  Lv_EstadoDetenido VARCHAR2(8)                  := 'Detenido';
  Lv_EstadoPreAsignacionInfoTecn VARCHAR2(24)    := 'PreAsignacionInfoTecnica';
  Lv_EstadoPreFactibilidad VARCHAR2(15)          := 'PreFactibilidad';
  Lv_EstadoFactibilidadEnProceso VARCHAR2(21)    := 'FactibilidadEnProceso';
  Lv_EstadoInactivo VARCHAR2(8)                  := 'Inactivo';
  Lv_EstadoInTemp VARCHAR2(7)                    := 'In-Temp';
  Lv_EstadoPlanificada VARCHAR2(11)              := 'Planificada';
  CURSOR C_SecuenciaElemento
  IS
    SELECT seq_info_elemento.NEXTVAL FROM dual;
  --
  CURSOR C_Elemento(Cv_Elemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT * FROM INFO_ELEMENTO WHERE ID_ELEMENTO = Cv_Elemento;
  --
  CURSOR C_ElementoDetalle (Cv_Elemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT * FROM INFO_DETALLE_ELEMENTO WHERE ELEMENTO_ID = Cv_Elemento;
  --
  CURSOR C_detalleCaracteristica(Cv_DetalleElemento INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE)
  IS
    SELECT *
    FROM Info_Detalle_Caracteristica
    WHERE DETALLE_ELEMENTO_ID = Cv_DetalleElemento;
  --
  CURSOR C_ElementoUbicacion(Cv_Elemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT * FROM INFO_EMPRESA_ELEMENTO_UBICA WHERE ELEMENTO_ID = Cv_Elemento;
  --
  CURSOR C_InterfaceElemento(Cv_Elemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT * FROM INFO_INTERFACE_ELEMENTO WHERE ELEMENTO_ID = Cv_Elemento;
  --
  CURSOR C_RelacionElemento(Cv_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT re.*
    FROM INFO_RELACION_ELEMENTO re
    WHERE re.elemento_id_b = Cv_IdElemento;
  --
  CURSOR C_InterfaceIn(Cv_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT IE.ID_INTERFACE_ELEMENTO
    FROM INFO_INTERFACE_ELEMENTO IE
    WHERE IE.ELEMENTO_ID             = Cv_IdElemento
    AND IE.NOMBRE_INTERFACE_ELEMENTO = 'IN 1' ;
  --
  CURSOR C_MaxLoginPorInterfaz(Cv_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT *
    FROM
      (SELECT COUNT(IE.ID_INTERFACE_ELEMENTO) MAX_LOGIN_X_INTERFAZ,
        IE.NOMBRE_INTERFACE_ELEMENTO
      FROM INFO_ELEMENTO E
      INNER JOIN INFO_INTERFACE_ELEMENTO IE
      ON IE.ELEMENTO_ID = E.ID_ELEMENTO
      INNER JOIN INFO_SERVICIO_TECNICO ST
      ON ST.INTERFACE_ELEMENTO_CONECTOR_ID = IE.ID_INTERFACE_ELEMENTO
      INNER JOIN INFO_SERVICIO S
      ON S.ID_SERVICIO = ST.SERVICIO_ID
      LEFT JOIN INFO_PLAN_DET PD
      ON PD.PLAN_ID = S.PLAN_ID
      LEFT JOIN ADMI_PRODUCTO P
      ON P.ID_PRODUCTO = PD.PRODUCTO_ID
      LEFT JOIN ADMI_PRODUCTO PROD
      ON PROD.ID_PRODUCTO = S.PRODUCTO_ID
      WHERE E.ID_ELEMENTO          = Cv_IdElemento
      AND ((P.NOMBRE_TECNICO    = Lv_NombreTecnicoInternet
      AND P.ESTADO              = Lv_EstadoActivo
      AND P.EMPRESA_COD         = Pv_idEmpresa
      AND PD.ESTADO             <> Lv_EstadoEliminado)
      OR ((PROD.NOMBRE_TECNICO = Lv_NombreTecnicoIsb
      OR PROD.NOMBRE_TECNICO    = Lv_NombreTecnicoTelcoHome)
      AND PROD.ESTADO           = Lv_EstadoActivo
      AND PROD.EMPRESA_COD      = Lv_CodEmpresaTn))
      AND S.ESTADO                IN (Lv_EstadoActivo, Lv_EstadoFactible, Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPreFactible, 
                                      Lv_EstadoInCorte, Lv_EstadoEnVerificacion, Lv_EstadoEnPruebas, Lv_EstadoReplanificada, 
                                      Lv_EstadoPrePlanificada, Lv_EstadoDetenido, Lv_EstadoPreAsignacionInfoTecn, 
                                      Lv_EstadoPreFactibilidad, Lv_EstadoFactibilidadEnProceso)
      GROUP BY IE.ID_INTERFACE_ELEMENTO,
        IE.NOMBRE_INTERFACE_ELEMENTO
      ORDER BY MAX_LOGIN_X_INTERFAZ DESC
      )
  WHERE ROWNUM < 2;
  --
  CURSOR C_VerificaNombreElemento
  IS
    SELECT NOMBRE_ELEMENTO
    FROM INFO_ELEMENTO
    WHERE UPPER(NOMBRE_ELEMENTO) = UPPER(Pv_NombreElemento)
    AND ESTADO                   = 'Activo';
  --
  CURSOR C_GetEstadoServicioPorInter(Cv_InterfaceElemento INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
  IS
    SELECT S.ESTADO,
      S.ID_SERVICIO
    FROM INFO_SERVICIO_TECNICO ST
    INNER JOIN INFO_SERVICIO S
    ON S.ID_SERVICIO = ST.SERVICIO_ID
    LEFT JOIN INFO_PLAN_DET PD
    ON PD.PLAN_ID = S.PLAN_ID
    LEFT JOIN ADMI_PRODUCTO P
    ON P.ID_PRODUCTO = PD.PRODUCTO_ID
    LEFT JOIN ADMI_PRODUCTO PROD
    ON PROD.ID_PRODUCTO = S.PRODUCTO_ID
    WHERE ST.INTERFACE_ELEMENTO_CONECTOR_ID = Cv_InterfaceElemento
    AND ((P.NOMBRE_TECNICO    = Lv_NombreTecnicoInternet
    AND P.ESTADO              = Lv_EstadoActivo
    AND P.EMPRESA_COD         = Lv_CodEmpresaMd)
    OR ((PROD.NOMBRE_TECNICO = Lv_NombreTecnicoIsb
    OR PROD.NOMBRE_TECNICO    = Lv_NombreTecnicoTelcoHome)
    AND PROD.ESTADO           = Lv_EstadoActivo
    AND PROD.EMPRESA_COD      = Lv_CodEmpresaTn))
    AND S.ESTADO              IN (Lv_EstadoActivo, Lv_EstadoAsignada, Lv_EstadoAsignadoTarea, Lv_EstadoDetenido, Lv_EstadoEnPruebas,
                                  Lv_EstadoEnVerificacion, Lv_EstadoFactible, Lv_EstadoInactivo, Lv_EstadoInCorte, Lv_EstadoInTemp, 
                                  Lv_EstadoPlanificada, Lv_EstadoPreAsignacionInfoTecn, Lv_EstadoPrePlanificada, Lv_EstadoReplanificada)
    AND ROWNUM                              < 2;
    --
    CURSOR C_GetServicioPorElemento(Cv_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE) IS 
      SELECT S.*
      FROM INFO_SERVICIO_TECNICO ST
      INNER JOIN INFO_SERVICIO S
      ON S.ID_SERVICIO = ST.SERVICIO_ID
      LEFT JOIN INFO_PLAN_DET PD
      ON PD.PLAN_ID = S.PLAN_ID
      LEFT JOIN ADMI_PRODUCTO PROD_PLAN
      ON PROD_PLAN.ID_PRODUCTO = PD.PRODUCTO_ID
      LEFT JOIN ADMI_PRODUCTO PROD
      ON PROD.ID_PRODUCTO = S.PRODUCTO_ID
      WHERE ST.ELEMENTO_CONECTOR_ID = Cv_IdElemento
      AND ((PROD_PLAN.NOMBRE_TECNICO = Lv_NombreTecnicoInternet AND PROD_PLAN.EMPRESA_COD = Lv_CodEmpresaMd AND PROD_PLAN.ESTADO = Lv_EstadoActivo)
      OR ((PROD.NOMBRE_TECNICO = Lv_NombreTecnicoIsb OR PROD.NOMBRE_TECNICO = Lv_NombreTecnicoTelcoHome) 
      AND PROD.EMPRESA_COD = Lv_CodEmpresaTn AND PROD.ESTADO = Lv_EstadoActivo))
      AND S.ESTADO IN (Lv_EstadoActivo, Lv_EstadoAsignada, Lv_EstadoAsignadoTarea, Lv_EstadoDetenido, Lv_EstadoEnPruebas, Lv_EstadoEnVerificacion,
                       Lv_EstadoFactible, Lv_EstadoInactivo, Lv_EstadoInCorte, Lv_EstadoInTemp, Lv_EstadoPlanificada, Lv_EstadoPreAsignacionInfoTecn,
                       Lv_EstadoPrePlanificada, Lv_EstadoReplanificada);

    --obtener el id_interface del olt segun el id elemento
    CURSOR C_getInterfaceOlt(Cv_Splitter INFO_ELEMENTO.ID_ELEMENTO%TYPE) is
      SELECT get_elemento_padre(Cv_Splitter , 'ELEMENTO', 'OLT') INTERFACE_OLT
      FROM dual;
    --
    --obtiene el id del olt segun la interface
    CURSOR C_getElementoPorInterface(Cv_Interface INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE) is
      SELECT E.ID_ELEMENTO 
      FROM INFO_INTERFACE_ELEMENTO IE, 
           INFO_ELEMENTO E 
      WHERE E.ID_ELEMENTO = IE.ELEMENTO_ID
      AND IE.ID_INTERFACE_ELEMENTO = Cv_Interface; 

    --obtiene el login segun el id servicio
    CURSOR C_getLoginPorServicio (Cv_servicio INFO_SERVICIO.ID_SERVICIO%TYPE) is
      SELECT login
      FROM info_punto p,
        info_servicio s
      WHERE p.id_punto  = s.punto_id
      AND s.id_servicio = Cv_servicio;

  --
  Ln_IdInterfaceNew INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
  Ln_IdInterfaceOld INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
  Lv_SecuenciaElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE;
  Lp_Elemento INFO_ELEMENTO%ROWTYPE                          :=NULL;
  Lp_EmpresaElementoUbica INFO_EMPRESA_ELEMENTO_UBICA%ROWTYPE:=NULL;
  Lp_IpElemento INFO_IP%ROWTYPE                              :=NULL;
  Lr_relacionElemento INFO_RELACION_ELEMENTO%ROWTYPE;
  Lv_nombreElemento INFO_ELEMENTO.NOMBRE_ELEMENTO%type;
  Ln_LoginPorInterfaz NUMBER(10);
  Lv_nombreInterfaz   VARCHAR2(100);
  Lr_detalleSolicitud DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
  Lr_detalleElemento INFO_DETALLE_ELEMENTO%ROWTYPE;
  Lr_detalleCaracteristica INFO_DETALLE_CARACTERISTICA%ROWTYPE;
  Lr_HistorialElemento INFO_HISTORIAL_ELEMENTO%ROWTYPE;
  Lr_Enlace INFO_ENLACE%ROWTYPE;
  Lr_InterfaceElemento INFO_INTERFACE_ELEMENTO%ROWTYPE;
  Lr_EmprElementUbica INFO_EMPRESA_ELEMENTO_UBICA%ROWTYPE;
  Lr_EmpresaElemento INFO_EMPRESA_ELEMENTO%ROWTYPE;
  Lr_servicioHistorial INFO_SERVICIO_HISTORIAL%ROWTYPE;
  Lv_estadoInterface INFO_INTERFACE_ELEMENTO.ESTADO%TYPE;
  Lv_EstadoServicio INFO_SERVICIO.ESTADO%TYPE;
  Lv_EstadoServicioInter INFO_SERVICIO.ESTADO%TYPE;
  Lv_EstadoSolicitud VARCHAR2(30);
  Lv_IdServicio INFO_SERVICIO.ID_SERVICIO%TYPE;
  Lv_InInterface INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;  
  Lv_Olt INFO_ELEMENTO.ID_ELEMENTO%TYPE;
  Lv_InterfaceOlt INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
  Lr_detaleSol  DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
  Lv_login    INFO_PUNTO.LOGIN%TYPE;
  Lv_valorServicioProdCaract DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;

  ExWhenOthers EXCEPTION;
  Lv_error     VARCHAR2(500);
BEGIN
  --VALIDO QUE NO REPITA EL NOMBRE
  OPEN C_VerificaNombreElemento;
  FETCH C_VerificaNombreElemento INTO Lv_nombreElemento;
  CLOSE C_VerificaNombreElemento;
  IF Lv_nombreElemento IS NOT NULL THEN
    Lv_error           := ' Ya Existe un elemento creado con este nombre, favor revisar';
    RAISE ExWhenOthers;
  END IF;
  --
  OPEN C_MaxLoginPorInterfaz(Pv_IdSplitterOrigen);
  FETCH C_MaxLoginPorInterfaz INTO Ln_LoginPorInterfaz, Lv_nombreInterfaz;
  CLOSE C_MaxLoginPorInterfaz;
  IF Ln_LoginPorInterfaz > 1 THEN
    Lv_error            := ' Existe mas de un login en el puerto '||Lv_nombreInterfaz|| ' del splitter, favor revisar';
    RAISE ExWhenOthers;
  END IF;
  --validamos que si uno de los clientes del splitter esta en estado EnVerificacion y EnPruebas, cambiamos al cliente a estado Activo
  FOR SE IN C_GetServicioPorElemento(Pv_IdSplitterOrigen) LOOP

    IF SE.ESTADO IN ('EnPruebas', 'EnVerificacion') THEN
      --actualizo el servicio
      UPDATE INFO_SERVICIO SET ESTADO ='Activo' WHERE ID_SERVICIO = SE.ID_SERVICIO;
      --actualizo el historial
      Lr_servicioHistorial.SERVICIO_ID  := SE.ID_SERVICIO;
      Lr_servicioHistorial.USR_CREACION := 'migracionHuawei';
      Lr_servicioHistorial.IP_CREACION  := Pv_IpIngresa;
      Lr_servicioHistorial.ESTADO       := 'Activo';
      Lr_servicioHistorial.OBSERVACION  := 'Se confirmo el servicio';
      Lr_servicioHistorial.ACCION       := 'confirmarServicio';
      --
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_servicioHistorial, Lv_error);
      IF Lv_error IS NOT NULL THEN
        RAISE ExWhenOthers;
      END IF;      
      --
      --se agregan validaciones para servicios originados por reubicacion
      Lv_valorServicioProdCaract:= DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SE.ID_SERVICIO,'REUBICACION');
      IF Lv_valorServicioProdCaract IS NOT NULL THEN
        UPDATE INFO_SERVICIO SET ESTADO ='Reubicado' WHERE ID_SERVICIO = TO_NUMBER(Lv_valorServicioProdCaract);
        Lr_servicioHistorial := null;
        Lr_servicioHistorial.SERVICIO_ID  := TO_NUMBER(Lv_valorServicioProdCaract);
        Lr_servicioHistorial.USR_CREACION := 'migracionHuawei';
        Lr_servicioHistorial.IP_CREACION  := Pv_IpIngresa;
        Lr_servicioHistorial.ESTADO       := 'Reubicado';
        Lr_servicioHistorial.OBSERVACION  := 'Se Reubico el servicio';
        --
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_servicioHistorial, Lv_error);
      END IF;
      --

    END IF;

  END LOOP;

  --Obtenemos la informacion del elemento
  OPEN C_Elemento(Pv_IdSplitterOrigen);
  FETCH C_Elemento INTO Lp_Elemento;
  CLOSE C_Elemento;
  --obtenemos la ultima secuencia del elemento
  OPEN C_SecuenciaElemento;
  FETCH C_SecuenciaElemento INTO Lv_SecuenciaElemento;
  CLOSE C_SecuenciaElemento;
  --inserto el nuevo elemento
  INSERT
  INTO INFO_ELEMENTO VALUES
    (
      Lv_SecuenciaElemento,
      Lp_Elemento.MODELO_ELEMENTO_ID,
      Pv_NombreElemento,
      Lp_Elemento.DESCRIPCION_ELEMENTO,
      Lp_Elemento.SERIE_FISICA,
      Lp_Elemento.SERIE_LOGICA,
      Lp_Elemento.VERSION_OS,
      Lp_Elemento.FUNCION,
      Lp_Elemento.CLAVE_CONFIGURACION,
      Lp_Elemento.FE_FABRICACION,
      Lp_Elemento.ACCESO_PERMANENTE,
      Lp_Elemento.OBSERVACION,
      Pv_UsuarioCrea,
      Pv_UsuarioCrea,
      SYSDATE,
      Pv_IpIngresa,
      Lp_Elemento.REVISION,
      Lp_Elemento.ESTADO,
      Pv_IdSplitterOrigen
    );
  --actualizar el estado del elemento original
  UPDATE INFO_ELEMENTO
  SET ESTADO        = 'Eliminado'
  WHERE ID_ELEMENTO = Pv_IdSplitterOrigen;
  --inserto los datos en la INFO_DETALLE_ELEMENTO
  FOR ED IN C_ElementoDetalle ( Pv_IdSplitterOrigen )
  LOOP
    Lr_detalleElemento.ELEMENTO_ID         := Lv_SecuenciaElemento;
    Lr_detalleElemento.DETALLE_NOMBRE      := ED.DETALLE_NOMBRE;
    Lr_detalleElemento.DETALLE_VALOR       := ED.DETALLE_VALOR;
    Lr_detalleElemento.DETALLE_DESCRIPCION := ED.DETALLE_DESCRIPCION;
    Lr_detalleElemento.USR_CREACION        := Pv_UsuarioCrea;
    Lr_detalleElemento.IP_CREACION         := Pv_IpIngresa;
    Lr_detalleElemento.ESTADO              := ED.ESTADO;
    INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_detalleElemento, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto en la tabla INFO_DETALLE_CARACTERISTICA
    FOR DC IN C_detalleCaracteristica ( ED.ID_DETALLE_ELEMENTO )
    LOOP
      Lr_detalleCaracteristica.DETALLE_ELEMENTO_ID       := SEQ_INFO_DETALLE_ELEMENTO.CURRVAL;
      Lr_detalleCaracteristica.CARACTERISTICA_ID         := DC.CARACTERISTICA_ID;
      Lr_detalleCaracteristica.DESCRIPCION_CARACTERISTICA:= DC.DESCRIPCION_CARACTERISTICA;
      Lr_detalleCaracteristica.VALOR_CARACTERISTICA      := DC.VALOR_CARACTERISTICA;
      Lr_detalleCaracteristica.ESTADO                    := DC.ESTADO;
      Lr_detalleCaracteristica.USR_CREACION              := Pv_UsuarioCrea;
      Lr_detalleCaracteristica.IP_CREACION               := Pv_IpIngresa;
      INFRK_DML.INFRP_INSERT_DETALLE_CARACT(Lr_detalleCaracteristica, Lv_error);
      IF Lv_error IS NOT NULL THEN
        RAISE ExWhenOthers;
      END IF;
      --actualizo a estado eliminado el registro original
      UPDATE INFO_DETALLE_CARACTERISTICA
      SET ESTADO                      = 'Eliminado'
      WHERE ID_DETALLE_CARACTERISTICA = DC.ID_DETALLE_CARACTERISTICA;
    END LOOP;
  END LOOP;
  --inserto en la tabla info elemento historial
  Lr_HistorialElemento.ELEMENTO_ID     := Lv_SecuenciaElemento;
  Lr_HistorialElemento.ESTADO_ELEMENTO := Lp_Elemento.ESTADO;
  Lr_HistorialElemento.OBSERVACION     := 'Splitter Clonado';
  Lr_HistorialElemento.USR_CREACION    := Pv_UsuarioCrea;
  Lr_HistorialElemento.IP_CREACION     := Pv_IpIngresa;
  INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_HistorialElemento, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --INSERTO porque estoy inactivando EL ELEMENTO original
  Lr_HistorialElemento.ELEMENTO_ID     := Pv_IdSplitterOrigen;
  Lr_HistorialElemento.ESTADO_ELEMENTO := 'Eliminado';
  Lr_HistorialElemento.OBSERVACION     := 'Splitter Clonado';
  Lr_HistorialElemento.USR_CREACION    := Pv_UsuarioCrea;
  Lr_HistorialElemento.IP_CREACION     := Pv_IpIngresa;
  INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_HistorialElemento, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --inserto en la info empresa elemento
  Lr_EmpresaElemento.EMPRESA_COD := Pv_idEmpresa;
  Lr_EmpresaElemento.ELEMENTO_ID := Lv_SecuenciaElemento;
  Lr_EmpresaElemento.OBSERVACION := 'Splitter Clonado';
  Lr_EmpresaElemento.ESTADO      := 'Activo';
  Lr_EmpresaElemento.USR_CREACION:= Pv_UsuarioCrea;
  Lr_EmpresaElemento.IP_CREACION := Pv_IpIngresa;
  INFRK_DML. INFRP_INSERT_EMPRESA_ELEMENTO(Lr_EmpresaElemento, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --update a estado eliminado el registro original
  UPDATE INFO_EMPRESA_ELEMENTO
  SET ESTADO        ='Eliminado'
  WHERE ELEMENTO_ID = Pv_IdSplitterOrigen;
  --consulto la ubicacion del elemento anterior
  OPEN C_ElementoUbicacion(Pv_IdSplitterOrigen);
  FETCH C_ElementoUbicacion INTO Lp_EmpresaElementoUbica;
  --inserto la ubicacion del elemento
  IF C_ElementoUbicacion%FOUND THEN
    Lr_EmprElementUbica.EMPRESA_COD := Pv_idEmpresa;
    Lr_EmprElementUbica.ELEMENTO_ID := Lv_SecuenciaElemento;
    Lr_EmprElementUbica.UBICACION_ID:= Lp_EmpresaElementoUbica.UBICACION_ID;
    Lr_EmprElementUbica.USR_CREACION:= Pv_UsuarioCrea;
    Lr_EmprElementUbica.IP_CREACION := Pv_IpIngresa;
    INFRK_DML.INFRP_INSERT_EMPR_ELEMENT_UBIC(Lr_EmprElementUbica, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --esta tabla no tiene estado.
  END IF;
  CLOSE C_ElementoUbicacion;
  --inserto las interfaces del elemento
  FOR IE IN C_InterfaceElemento ( Pv_IdSplitterOrigen )
  LOOP
    IF IE.ESTADO                      != 'deleted' THEN
      IF IE.NOMBRE_INTERFACE_ELEMENTO != 'IN 1' THEN
        Lv_EstadoServicioInter        := NULL;
        OPEN C_GetEstadoServicioPorInter(IE.ID_INTERFACE_ELEMENTO);
        FETCH C_GetEstadoServicioPorInter INTO Lv_EstadoServicioInter, Lv_IdServicio;
        CLOSE C_GetEstadoServicioPorInter;
        IF Lv_EstadoServicioInter IS NOT NULL THEN
          Lv_estadoInterface := 'reserved';
          --creo la solicitud a los puertos reservados
          --segun el estado del servicio asigno el estado a la solicitud
          Lv_EstadoSolicitud := NULL;
          IF Lv_EstadoServicioInter IN ('In-Corte','Inactivo','In-Temp') THEN
            Lv_EstadoSolicitud := 'In-Corte';
          ELSIF Lv_EstadoServicioInter IN ('Activo') THEN
            Lv_EstadoSolicitud := 'PrePlanificada';
          END IF;
          --inserto la solicitud
          IF Lv_EstadoSolicitud IS NOT NULL THEN
            Lr_detalleSolicitud.SERVICIO_ID       := Lv_IdServicio;
            Lr_detalleSolicitud.TIPO_SOLICITUD_ID := 13;
            Lr_detalleSolicitud.MOTIVO_ID         := 445;
            Lr_detalleSolicitud.USR_CREACION      := Pv_UsuarioCrea;
            Lr_detalleSolicitud.ESTADO            := Lv_EstadoSolicitud;
            DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_detalleSolicitud, Lv_error);
            IF Lv_error IS NOT NULL THEN
              RAISE ExWhenOthers;
            END IF;
            --inserto el elemento original como atributo relacionado a la solicitud
            Lr_detaleSol.CARACTERISTICA_ID    := 648;
            Lr_detaleSol.VALOR                := Pv_IdSplitterOrigen;
            Lr_detaleSol.DETALLE_SOLICITUD_ID := SEQ_INFO_DETALLE_SOLICITUD.CURRVAL;
            Lr_detaleSol.ESTADO               := 'Activo';
            Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
            IF Lv_error IS NOT NULL THEN
              RAISE ExWhenOthers;
            END IF;
            --inserto la interface del elemento original como atributo relacionado a la solicitud
            Lr_detaleSol.CARACTERISTICA_ID    := 647;
            Lr_detaleSol.VALOR                := IE.ID_INTERFACE_ELEMENTO;
            Lr_detaleSol.DETALLE_SOLICITUD_ID := SEQ_INFO_DETALLE_SOLICITUD.CURRVAL;
            Lr_detaleSol.ESTADO               := 'Activo';
            Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
            IF Lv_error IS NOT NULL THEN
              RAISE ExWhenOthers;
            END IF;

          END IF;
          --mofifico la info servicio tecnico segun el estado del servicio
          IF Lv_EstadoServicioInter IN ('Asignada','AsignadoTarea','Detenido','Planificada','PreAsignacionInfoTecnica','PrePlanificada','Replanificada') THEN
              --obtengo el login              
              Lv_login := null;
              OPEN C_getLoginPorServicio(Lv_IdServicio);
              FETCH C_getLoginPorServicio INTO Lv_login;
              CLOSE C_getLoginPorServicio;

              Lv_error            := ' El login '||Lv_login|| ' est¿ en estado '||Lv_EstadoServicioInter||', solo se permite en In-Corte o Activo ';
              RAISE ExWhenOthers;            
          ELSIF Lv_EstadoServicioInter = 'Factible' THEN 
              Lv_estadoInterface      := 'Factible';          
          END IF;

        ELSE
          Lv_estadoInterface := 'not connect';
        END IF;
      ELSE
        Lv_estadoInterface := 'connected';
      END IF;
      Lr_InterfaceElemento.ELEMENTO_ID                   := Lv_SecuenciaElemento;
      Lr_InterfaceElemento.NOMBRE_INTERFACE_ELEMENTO     := IE.NOMBRE_INTERFACE_ELEMENTO;
      Lr_InterfaceElemento.DESCRIPCION_INTERFACE_ELEMENTO:= IE.DESCRIPCION_INTERFACE_ELEMENTO;
      Lr_InterfaceElemento.CAPACIDAD_UTILIZADA           := IE.CAPACIDAD_UTILIZADA;
      Lr_InterfaceElemento.UNIDAD_MEDIDA_UTILIZADA       := IE.UNIDAD_MEDIDA_UTILIZADA;
      Lr_InterfaceElemento.NUMERO_SERIE                  := IE.NUMERO_SERIE;
      Lr_InterfaceElemento.ESTADO                        := Lv_estadoInterface;
      Lr_InterfaceElemento.USR_CREACION                  := Pv_UsuarioCrea;
      Lr_InterfaceElemento.IP_CREACION                   := Pv_IpIngresa;
      INFRK_DML.INFRP_INSERT_INTERFACE_ELEMENT(Lr_InterfaceElemento, Lv_error);
      IF Lv_error IS NOT NULL THEN
        RAISE ExWhenOthers;
      END IF;

       --mofifico la info servicio tecnico segun el estado del servicio
      IF Lv_EstadoServicioInter = 'Factible' THEN
        Lv_InterfaceOlt        := NULL;
        OPEN C_getInterfaceOlt(Lv_SecuenciaElemento);
        FETCH C_getInterfaceOlt INTO Lv_InterfaceOlt;
        CLOSE C_getInterfaceOlt;
        --obtengo el id del olt
        Lv_Olt             := NULL;
        IF Lv_InterfaceOlt IS NOT NULL THEN
          OPEN C_getElementoPorInterface(Lv_InterfaceOlt);
          FETCH C_getElementoPorInterface INTO Lv_Olt;
          CLOSE C_getElementoPorInterface;
        END IF;
        --
        UPDATE INFO_SERVICIO_TECNICO
        SET INTERFACE_ELEMENTO_CONECTOR_ID = SEQ_INFO_INTERFACE_ELEMENTO.CURRVAL,
          ELEMENTO_CONECTOR_ID             = Lv_SecuenciaElemento,
          ELEMENTO_ID                      = Lv_Olt,
          INTERFACE_ELEMENTO_ID            = Lv_InterfaceOlt
        WHERE SERVICIO_ID                  = Lv_IdServicio;
      END IF;

      --actualizo las interfaces antiguas a estado eliminado
      UPDATE INFO_INTERFACE_ELEMENTO
      SET ESTADO                  = 'deleted'
      WHERE ID_INTERFACE_ELEMENTO = IE.ID_INTERFACE_ELEMENTO;
    END IF;
  END LOOP;
  --SE PROCEDE A INSERTAR EN LA INFO_RELACION_ELEMENTO
  OPEN C_RelacionElemento(Pv_IdSplitterOrigen);
  FETCH C_RelacionElemento INTO Lr_relacionElemento;
  CLOSE C_RelacionElemento;
  --
  Lr_RelacionElemento.ELEMENTO_ID_A := Lr_relacionElemento.ELEMENTO_ID_A;
  Lr_RelacionElemento.ELEMENTO_ID_B := Lv_SecuenciaElemento;
  Lr_RelacionElemento.TIPO_RELACION := Lr_relacionElemento.TIPO_RELACION;
  Lr_RelacionElemento.POSICION_X    := Lr_relacionElemento.POSICION_X;
  Lr_RelacionElemento.POSICION_Y    := Lr_relacionElemento.POSICION_Y;
  Lr_RelacionElemento.POSICION_Z    := Lr_relacionElemento.POSICION_Z;
  Lr_RelacionElemento.OBSERVACION   := Lr_relacionElemento.OBSERVACION;
  Lr_RelacionElemento.ESTADO        := Lr_relacionElemento.ESTADO;
  Lr_RelacionElemento.USR_CREACION  := Pv_UsuarioCrea;
  Lr_RelacionElemento.IP_CREACION   := Pv_IpIngresa;
  INFRK_DML.INFRP_INSERT_RELACION_ELEMENTO(Lr_RelacionElemento, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --una vez enlazado actualizamos el puerto del splitter L1 a conectado
  UPDATE INFO_INTERFACE_ELEMENTO
  SET estado                  = 'connected'
  WHERE id_interface_elemento = Pv_IdInterfaceSplitterL1;

  --actualizamos la relacion anterior
  UPDATE INFO_RELACION_ELEMENTO
  SET ESTADO                 = 'Eliminado'
  WHERE ID_RELACION_ELEMENTO = Lr_relacionElemento.ID_RELACION_ELEMENTO;
  --Ln_IdInterfaceNew
  OPEN C_InterfaceIn(Lv_SecuenciaElemento);
  FETCH C_InterfaceIn INTO Ln_IdInterfaceNew;
  CLOSE C_InterfaceIn;
  IF Ln_IdInterfaceNew                  IS NOT NULL THEN
    Lr_Enlace.INTERFACE_ELEMENTO_INI_ID := Pv_IdInterfaceSplitterL1;
    Lr_Enlace.INTERFACE_ELEMENTO_FIN_ID := Ln_IdInterfaceNew;
    Lr_Enlace.TIPO_MEDIO_ID             := 1;
    Lr_Enlace.TIPO_ENLACE               := 'PRINCIPAL';
    Lr_Enlace.ESTADO                    := 'Activo' ;
    Lr_Enlace.USR_CREACION              := Pv_UsuarioCrea;
    Lr_Enlace.IP_CREACION               := Pv_IpIngresa;
    INFRK_DML.INFRP_INSERT_ENLACE(Lr_Enlace, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --cambio el estado al enlace anterior
    Ln_IdInterfaceOld := NULL;
    OPEN C_InterfaceIn(Pv_IdSplitterOrigen);
    FETCH C_InterfaceIn INTO Ln_IdInterfaceOld;
    CLOSE C_InterfaceIn;
    UPDATE INFO_ENLACE
    SET ESTADO                      = 'Eliminado'
    WHERE INTERFACE_ELEMENTO_FIN_ID = Ln_IdInterfaceOld ;
  END IF;
  --
  --Relaciono las interface con el puerto IN del mismo del elemento
  FOR EN IN C_InterfaceElemento (Lv_SecuenciaElemento)
  LOOP

    IF EN.NOMBRE_INTERFACE_ELEMENTO != 'IN 1' THEN
      OPEN C_InterfaceIn(Lv_SecuenciaElemento);
      FETCH C_InterfaceIn INTO Lv_InInterface;
      CLOSE C_InterfaceIn;
      --
      --inserto el enlace
      INSERT
      INTO "DB_INFRAESTRUCTURA"."INFO_ENLACE"
        ( ID_ENLACE,
          INTERFACE_ELEMENTO_INI_ID,
          INTERFACE_ELEMENTO_FIN_ID,
          TIPO_MEDIO_ID,
          TIPO_ENLACE,
          ESTADO,
          USR_CREACION,
          FE_CREACION,
          IP_CREACION)
        VALUES
        ( SEQ_INFO_ENLACE.NEXTVAL,
          Lv_InInterface,
          EN.ID_INTERFACE_ELEMENTO,
          1,
          'PRINCIPAL',
          'Activo',
          Pv_UsuarioCrea,
          SYSDATE,
          Pv_IpIngresa );
    END IF;        
  --
  END LOOP;

EXCEPTION
WHEN ExWhenOthers THEN
  ROLLBACK;
  Lv_MensaError := Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_CLONAR_SPLITTER ';
WHEN OTHERS THEN
  ROLLBACK;
  Lv_MensaError := SQLERRM||Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_CLONAR_SPLITTER ';
END INFRP_CLONAR_SPLITTER;

--

/**
* INFRP_PERFIL_EQUIVALENTE
*
* Procedimiento que obtiene el perfil equivalente del plan solicitado
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 05/04/2016
* 
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.1 21/03/2019   Se agrega filtro de estado en caracteristicas del plan a consultar en proceso de equivalencias de perfiles
* @since 1.0
*
* @param varchar2 Pn_IdPlan
* @param number   Pn_IdOlt
* @param varchar2 Pv_Perfil
* @param varchar2 Pv_Marca
* @param varchar2 Pv_TipoNegocio
* @param varchar2 Pv_AprovisionamientoIp
* @param varchar2 Pv_TipoEjecucion
* @param varchar2 Pv_EmpresaCod
*
* @return string Lv_PerfilEqui
*/
PROCEDURE INFRP_PERFIL_EQUIVALENTE(
    Pn_IdPlan              IN NUMBER,
    Pn_IdOlt               IN NUMBER,
    Pv_Perfil              IN VARCHAR2,
    Pv_Marca               IN VARCHAR2,
    Pv_TipoNegocio         IN VARCHAR2,
    Pv_AprovisionamientoIp IN VARCHAR2,
    Pv_TipoEjecucion       IN VARCHAR2,
    Pv_EmpresaCod          IN VARCHAR2,
    Lv_PerfilEqui OUT VARCHAR2)
AS
  lv_estadoPlan              VARCHAR2(30) := NULL;
  lv_detalleValorOltMigrado  VARCHAR2(20) := NULL;
  lv_caracteristicaUltraVId  NUMBER       := NULL;
  lv_caracteristicaUltraV    VARCHAR2(20) := NULL;
  ln_caracteristicaPlanVId   NUMBER       := NULL;
  lv_caracteristicaPlanV     VARCHAR2(20) := NULL;
  lv_valor3Parametro1        VARCHAR2(50) := NULL;
  lv_valor5Parametro2        VARCHAR2(50) := NULL;
  lv_caracteristicaCapPlanId NUMBER       := NULL;
  lv_caracteristicaCapPlan   VARCHAR2(20) := NULL;
BEGIN
  Lv_PerfilEqui := Pv_Perfil;
  --obtener estado del plan
  BEGIN
    SELECT estado
    INTO lv_estadoPlan
    FROM DB_COMERCIAL.INFO_PLAN_CAB
    WHERE ID_PLAN = Pn_IdPlan ;
  EXCEPTION
  WHEN OTHERS THEN
    lv_estadoPlan := NULL;
  END;
  --obtener caracteristica de OLT MIGRADO CNR
  BEGIN
    SELECT DETALLE_VALOR
    INTO lv_detalleValorOltMigrado
    FROM INFO_DETALLE_ELEMENTO
    WHERE ELEMENTO_ID = Pn_IdOlt
    AND DETALLE_NOMBRE='OLT MIGRADO CNR'
    AND ROWNUM <=1;
  EXCEPTION
  WHEN OTHERS THEN
    lv_detalleValorOltMigrado := 'NO';
  END;
  IF Pv_TipoEjecucion = 'MASIVO' THEN
    lv_detalleValorOltMigrado := 'SI';
  END IF;
  --obtener caracteristica ultra velocidad de planes
  BEGIN
    SELECT ID_CARACTERISTICA
    INTO lv_caracteristicaUltraVId
    FROM ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA='ULTRA VELOCIDAD'
    AND ESTADO                      ='Activo';
  EXCEPTION
  WHEN OTHERS THEN
    lv_caracteristicaUltraVId := NULL;
  END;
  BEGIN
    SELECT VALOR
    INTO lv_caracteristicaUltraV
    FROM INFO_PLAN_CARACTERISTICA
    WHERE PLAN_ID        =Pn_IdPlan
    AND CARACTERISTICA_ID=lv_caracteristicaUltraVId
    AND ESTADO = 'Activo'
    AND ROWNUM<=1;
  EXCEPTION
  WHEN OTHERS THEN
    lv_caracteristicaUltraV := 'NO';
  END;
  --obtener caracteristica de antiguedad de plan
  BEGIN
    SELECT ID_CARACTERISTICA
    INTO ln_caracteristicaPlanVId
    FROM ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA='PLAN VIEJO'
    AND ESTADO                      ='Activo';
  EXCEPTION
  WHEN OTHERS THEN
    ln_caracteristicaPlanVId := NULL;
  END;
  BEGIN
    SELECT 'SI'
    INTO lv_caracteristicaPlanV
    FROM INFO_PLAN_CARACTERISTICA
    WHERE PLAN_ID        =Pn_IdPlan
    AND CARACTERISTICA_ID=ln_caracteristicaPlanVId
    AND ESTADO = 'Activo'
    AND ROWNUM <=1;
  EXCEPTION
  WHEN OTHERS THEN
    lv_caracteristicaPlanV := 'NO';
  END;
  IF lv_detalleValorOltMigrado = 'SI' THEN
    IF Pv_AprovisionamientoIp !='POOL' THEN
      --ejecutar consulta contra primeros parametros MIGRA_PLANES_MASIVOS_PERFIL

      BEGIN
        SELECT VALOR3
        INTO lv_valor3Parametro1
        FROM ADMI_PARAMETRO_CAB,
          ADMI_PARAMETRO_DET
        WHERE ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO='MIGRA_PLANES_MASIVOS_PERFIL_V2'
        AND ADMI_PARAMETRO_DET.PARAMETRO_ID      =ADMI_PARAMETRO_CAB.ID_PARAMETRO
        AND ADMI_PARAMETRO_DET.VALOR1            =Pv_AprovisionamientoIp
        AND ADMI_PARAMETRO_DET.VALOR2            =Pv_Marca
        AND ADMI_PARAMETRO_DET.VALOR4            =Pv_TipoNegocio
        AND ADMI_PARAMETRO_DET.VALOR5            =lv_caracteristicaPlanV
        AND ADMI_PARAMETRO_DET.EMPRESA_COD       =Pv_EmpresaCod;
      EXCEPTION
      WHEN OTHERS THEN
        lv_valor3Parametro1 := 'NO';
      END;
      IF lv_valor3Parametro1 != 'NO' THEN
        IF Pv_TipoNegocio     = 'PYME' THEN

          BEGIN
            SELECT ID_CARACTERISTICA
            INTO lv_caracteristicaCapPlanId
            FROM ADMI_CARACTERISTICA
            WHERE DESCRIPCION_CARACTERISTICA='CAPACIDAD PLAN'
            AND ESTADO                      ='Activo';
          EXCEPTION
          WHEN OTHERS THEN
            lv_caracteristicaCapPlanId := NULL;
          END;
          BEGIN
            SELECT VALOR
            INTO lv_caracteristicaCapPlan
            FROM INFO_PLAN_CARACTERISTICA
            WHERE PLAN_ID        =Pn_IdPlan
            AND CARACTERISTICA_ID=lv_caracteristicaCapPlanId
            AND ESTADO = 'Activo'
            AND ROWNUM <=1;
          EXCEPTION
          WHEN OTHERS THEN
            lv_caracteristicaCapPlan := 'DF';

          END;

          lv_valor5Parametro2 := lv_caracteristicaCapPlan;
        ELSE
          lv_valor5Parametro2 := '';

        END IF;

        IF LENGTH(lv_valor5Parametro2)>0 THEN 

          BEGIN
            SELECT VALOR3
            INTO Lv_PerfilEqui
            FROM ADMI_PARAMETRO_CAB,
              ADMI_PARAMETRO_DET
            WHERE ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO='MIGRA_PLANES_MASIVOS_PERFIL_EQUI_V2'
            AND ADMI_PARAMETRO_DET.PARAMETRO_ID      =ADMI_PARAMETRO_CAB.ID_PARAMETRO
            AND ADMI_PARAMETRO_DET.VALOR1            =Pv_Perfil
            AND ADMI_PARAMETRO_DET.VALOR2            =lv_valor3Parametro1
            AND ADMI_PARAMETRO_DET.VALOR4            =lv_caracteristicaUltraV
            AND ADMI_PARAMETRO_DET.VALOR5            = lv_valor5Parametro2
            AND ADMI_PARAMETRO_DET.EMPRESA_COD       =Pv_EmpresaCod;

          EXCEPTION
          WHEN OTHERS THEN
            NULL;

          END;
        ELSE

          BEGIN
            SELECT VALOR3
            INTO Lv_PerfilEqui
            FROM ADMI_PARAMETRO_CAB,
              ADMI_PARAMETRO_DET
            WHERE ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO='MIGRA_PLANES_MASIVOS_PERFIL_EQUI_V2'
            AND ADMI_PARAMETRO_DET.PARAMETRO_ID      =ADMI_PARAMETRO_CAB.ID_PARAMETRO
            AND ADMI_PARAMETRO_DET.VALOR1            =Pv_Perfil
            AND ADMI_PARAMETRO_DET.VALOR2            =lv_valor3Parametro1
            AND ADMI_PARAMETRO_DET.VALOR4            =lv_caracteristicaUltraV
            AND ADMI_PARAMETRO_DET.VALOR5           IS NULL
            AND ADMI_PARAMETRO_DET.EMPRESA_COD       =Pv_EmpresaCod;
          EXCEPTION
          WHEN OTHERS THEN
            NULL;

          END;
        END IF;
      END IF;
    END IF;
    --obtener caracteristica de capacidad de plan pyme para ver capacidad
    --retornar respuesta
  END IF;
  EXCEPTION 
  WHEN OTHERS THEN
  Lv_PerfilEqui := Pv_Perfil;
END;

--

PROCEDURE INFRP_FINALIZAR_PROCESO_MASIVO
AS

  CURSOR C_getDetallesPorEstado(Cn_cabeceraProceso INFO_PROCESO_MASIVO_DET.PROCESO_MASIVO_CAB_ID%type) IS
  SELECT *
  FROM INFO_PROCESO_MASIVO_DET PMD
  WHERE PMD.PROCESO_MASIVO_CAB_ID = Cn_cabeceraProceso
  AND PMD.ESTADO                  in ('Pendiente', 'Fallo');
  --verifica procesos masivos con una antiguedad de 3 d¿as
  CURSOR C_VerificaProcesosAntiguos
  IS
    --
    SELECT
      (SELECT COUNT(PMD.ID_PROCESO_MASIVO_DET)
      FROM INFO_PROCESO_MASIVO_CAB PMC1,
        INFO_PROCESO_MASIVO_DET PMD
      WHERE PMC1.ID_PROCESO_MASIVO_CAB = PMD.PROCESO_MASIVO_CAB_ID
      AND PMD.ESTADO NOT              IN ('Pendiente', 'Fallo')
      AND PMC1.ID_PROCESO_MASIVO_CAB   = PMC.ID_PROCESO_MASIVO_CAB
      ) PROCESADOS,
    PMC.*
  FROM INFO_PROCESO_MASIVO_CAB PMC
  WHERE PMC.FE_CREACION < TRUNC(sysdate-1)
  AND PMC.ESTADO        = 'Pendiente'
  AND PMC.TIPO_PROCESO IN ('CortarCliente', 'ReconectarCliente','CancelarCliente')
  ORDER BY PMC.FE_CREACION DESC;
  --
  Lv_mensaje CLOB;

BEGIN
  --si existen procesos antiguo se les actualiza el estado a Finalizado
  Lv_mensaje := NULL;
  FOR I IN C_VerificaProcesosAntiguos
  LOOP
    UPDATE INFO_PROCESO_MASIVO_CAB
    SET USR_ULT_MOD             = 'job_masivo',
      FE_ULT_MOD                = SYSDATE,
      ESTADO                    = 'Finalizada'
    WHERE ID_PROCESO_MASIVO_CAB = I.ID_PROCESO_MASIVO_CAB;

    FOR X IN C_getDetallesPorEstado(I.ID_PROCESO_MASIVO_CAB)
    LOOP    

      UPDATE INFO_PROCESO_MASIVO_DET
      SET USR_ULT_MOD             = 'job_masivo',
        FE_ULT_MOD                = SYSDATE,
        ESTADO                    = 'ExcedioTiempo',
        OBSERVACION               = X.OBSERVACION||'- regularizado por job de procesos masivos'
      WHERE ID_PROCESO_MASIVO_DET = X.ID_PROCESO_MASIVO_DET;     
    END LOOP;
    --
    Lv_mensaje                 := Lv_mensaje||to_clob(' Id Cabecera: '||I.ID_PROCESO_MASIVO_CAB||', Tipo de proceso: '||I.TIPO_PROCESO||', Procesados : '||I.PROCESADOS||' de ' || I.CANTIDAD_PUNTOS ||', Creado: '||TO_CHAR(I.FE_CREACION,'dd/mm/yyyy hh24:mi:ss')||' por: '||I.USR_CREACION||'<br>');
  END LOOP;
  IF Lv_mensaje IS NOT NULL THEN
    UTL_MAIL.SEND (sender => 'procesos_masivos@telconet.ec', recipients => 'telcos@telconet.ec', subject => 'Ejecuci¿n del job DB_INFRAESTRUCTURA.INFRJ_FINALIZAR_PROCESO_MASIVO', MESSAGE => 'Los siguientes procesos masivos fueron actualizados a estado Finalizado debido a que tienen mas de 3 dias: <br> <br>'||TO_CHAR(DBMS_LOB.SUBSTR(Lv_mensaje, 31000, 1))||'<br> <br> Atentamente, <br> Procesos Masivos ', mime_type => 'text/html; charset=UTF-8' );
  END IF;
  --
EXCEPTION
WHEN OTHERS THEN
  ROLLBACK;
  UTL_MAIL.SEND (sender => 'procesos_masivos@telconet.ec', recipients => 'telcos@telconet.ec', subject => 'Ejecuci¿n del job DB_INFRAESTRUCTURA.INFRJ_FINALIZAR_PROCESO_MASIVO', MESSAGE => 'Error en el job DB_INFRAESTRUCTURA.INFRJ_FINALIZAR_PROCESO_MASIVO : <br>'||SQLERRM, mime_type => 'text/html; charset=UTF-8' );
END INFRP_FINALIZAR_PROCESO_MASIVO;
----
----

FUNCTION INFRF_GET_ELEMENTOS_INTERFAZ(
    Pn_interfaceInicial IN NUMBER,
    Pv_tipoElemento     IN VARCHAR2,
    Pn_nivelElemento    IN NUMBER)
  RETURN VARCHAR2
IS
  CURSOR C_getEnlaces (Cv_interface VARCHAR2)  IS
    SELECT E.ID_ELEMENTO,
      E.NOMBRE_ELEMENTO,
      TE.NOMBRE_TIPO_ELEMENTO,
      (SELECT DE.DETALLE_VALOR
      FROM INFO_DETALLE_ELEMENTO DE
      WHERE DE.DETALLE_NOMBRE = 'NIVEL'
      AND DE.ELEMENTO_ID      = E.ID_ELEMENTO ) NIVEL,
    (SELECT NVL(EL.ID_ELEMENTO,0) ||'&' ||NVL(EL.NOMBRE_ELEMENTO,'NA')
      FROM INFO_RELACION_ELEMENTO RE,
        INFO_ELEMENTO EL
      WHERE RE.ELEMENTO_ID_B = E.ID_ELEMENTO
      AND RE.ELEMENTO_ID_A   = EL.ID_ELEMENTO
      AND RE.ESTADO = 'Activo'
      AND ROWNUM < 2) ELEMENTO_CONTENEDOR,
    IE.ID_INTERFACE_ELEMENTO
  FROM INFO_INTERFACE_ELEMENTO IE,
    INFO_ELEMENTO E,
    ADMI_MODELO_ELEMENTO ME,
    ADMI_TIPO_ELEMENTO TE,
    INFO_ENLACE EN
  WHERE EN.INTERFACE_ELEMENTO_INI_ID  = Cv_interface
  AND IE.ID_INTERFACE_ELEMENTO        = EN.INTERFACE_ELEMENTO_FIN_ID
  AND IE.ELEMENTO_ID                  = E.ID_ELEMENTO
  AND EN.ESTADO                       = 'Activo'
  AND E.MODELO_ELEMENTO_ID            = ME.ID_MODELO_ELEMENTO
  AND TE.ID_TIPO_ELEMENTO             = ME.TIPO_ELEMENTO_ID;
  --

  Ln_idElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE;
  Lv_elemento INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
  Lv_tipoElemento ADMI_TIPO_ELEMENTO.DESCRIPCION_TIPO_ELEMENTO%TYPE;
  Ln_nivel     NUMBER;
  Ln_cont      NUMBER   :=1;
  Lv_Elementos VARCHAR2(32767);
  Lb_bandera   BOOLEAN  := FALSE;
  Ln_Contador  NUMBER   :=0;
--
  type tipo_array
  IS
    TABLE OF NUMBER INDEX BY binary_integer;
    arrayInterface tipo_array;
    arrayInterfaceNew tipo_array;
BEGIN
  arrayInterface(1) := Pn_interfaceInicial;
  LOOP
    --
    FOR N IN 1.. arrayInterface.COUNT
    LOOP
      FOR I IN C_getEnlaces(arrayInterface(N))
      LOOP
        --
        IF Pn_nivelElemento        IS NULL OR Pn_nivelElemento = '' THEN
          IF I.NOMBRE_TIPO_ELEMENTO = Pv_tipoElemento THEN
            Lv_Elementos         := Lv_Elementos||'<>'||NVL(I.ID_ELEMENTO,0)||'&'||NVL(I.NOMBRE_ELEMENTO,'NA')||'&'||NVL(I.ID_INTERFACE_ELEMENTO,0)||'&'||NVL(I.NOMBRE_TIPO_ELEMENTO,'NA')||'&'||NVL(I.NIVEL,0)||'&'||I.ELEMENTO_CONTENEDOR;
          ELSE
            arrayInterfaceNew(Ln_cont) := I.ID_INTERFACE_ELEMENTO;
            Ln_cont                    := Ln_cont+1;
          END IF;
        ELSE 
          IF I.NOMBRE_TIPO_ELEMENTO = Pv_tipoElemento AND Pn_nivelElemento = I.NIVEL THEN
            Lv_Elementos         := Lv_Elementos||'<>'||NVL(I.ID_ELEMENTO,0)||'&'||NVL(I.NOMBRE_ELEMENTO,'NA')||'&'||NVL(I.ID_INTERFACE_ELEMENTO,0)||'&'||NVL(I.NOMBRE_TIPO_ELEMENTO,'NA')||'&'||NVL(I.NIVEL,0)||'&'||I.ELEMENTO_CONTENEDOR;
          ELSE
            arrayInterfaceNew(Ln_cont) := I.ID_INTERFACE_ELEMENTO;
            Ln_cont                    := Ln_cont+1;
          END IF;
        END IF;
      END LOOP;
    END LOOP;
    IF Ln_cont = 1 AND Lv_Elementos IS NOT NULL THEN
      Lb_bandera := TRUE;
    END IF;

    Ln_cont        := 1;
    arrayInterface.Delete();
    arrayInterface := arrayInterfaceNew;
    arrayInterfaceNew.Delete();
    Ln_Contador    := Ln_Contador +1;
    IF Ln_Contador  > 100 THEN
      RETURN 'ERROR INFRF_GET_ELEMENTOS_INTERFAZ';
    END IF;
    EXIT
  WHEN Lb_bandera = TRUE;
  END LOOP;
  RETURN Lv_Elementos;
END INFRF_GET_ELEMENTOS_INTERFAZ;

FUNCTION SPLIT(
    p_in_string VARCHAR2,
    p_delim     VARCHAR2)
  RETURN t_array
IS
  i      NUMBER         :=0;
  pos    NUMBER         :=0;
  lv_str VARCHAR2(32676):= p_in_string;
  strings t_array;
BEGIN
  -- determine first chuck of string
  pos := instr(lv_str,p_delim,1,1);
  -- while there are chunks left, loop
  WHILE ( pos != 0)
  LOOP
    -- increment counter
    i := i + 1;
    -- create array element for chuck of string
    strings(i) := SUBSTR(lv_str,1,pos-1);
    -- remove chunk from string
    lv_str := SUBSTR(lv_str,pos+1,LENGTH(lv_str));
    -- determine next chunk
    pos := instr(lv_str,p_delim,1,1);
    -- no last chunk, add to array
    IF pos          = 0 THEN
      strings(i+1) := lv_str;
    END IF;
  END LOOP;
  RETURN strings;
END SPLIT;
---

/*
 * Funcion que sirve para Ingresar las solicitudes de migraci¿n de clientes
 *
 * @author John Vera <javera@telconet.ec>
 * @version 1.0 16-11-2015
 * @author Jesus Bozada <jbozada@telconet.ec>
 * @version 1.1 16-11-2015
 * @author Jesus Bozada <jbozada@telconet.ec>
 * @version 1.2 08-03-2016  Se agrega almacenamiento de caracteristica precio anterior y frecuencia
 * @param  VARCHAR2   Pv_Servicios    Listado de servicios a ingresar
 * @param  VARCHAR2   Pv_UsuarioCrea  Usuario de creaci¿n de registros
 * @return VARCHAR2   Lv_MensaError   Mensaje de Error
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.3 10-12-2019 Se agrega programaci¿n para guardar el valor del equipo en caso de existir como una caracter¿stica de la solicitud
 *
 * @author John Vera <javera@telconet.ec>
 * @version 1.2 21-01-2016 ingreso de plan viejo
 */
PROCEDURE INFRP_SOLICITUDES_MIGRACION_IP(    
    Pv_Servicios   IN VARCHAR2,
    Pv_UsuarioCrea IN VARCHAR2,
    Lv_MensaError OUT VARCHAR2)
AS
  --
  CURSOR C_getIdSolicitud (Cv_descripcion ADMI_TIPO_SOLICITUD.DESCRIPCION_SOLICITUD%TYPE)
  IS
    SELECT ID_TIPO_SOLICITUD
    FROM admi_tipo_solicitud
    WHERE descripcion_solicitud = Cv_descripcion
    AND estado                  = 'Activo';

  Lr_detalleSolicitud     DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
  Lr_detalleSolicitudDet  DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
  Lr_detaleSol            DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
  Lr_detalleElemento      INFO_DETALLE_ELEMENTO%ROWTYPE;
  ExWhenOthers            EXCEPTION;
  La_Servicios            infrk_transacciones.t_array;
  La_Servicio             infrk_transacciones.t_array;
  Lv_servicio             VARCHAR2(100);
  Lv_planNuevo            VARCHAR2(100);
  Lv_planViejo            VARCHAR2(100);
  Lv_idElemento           VARCHAR2(100);
  Ln_MigraPlan            admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_MigraIp              admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_MigraOlt             admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_SecuenciaSolicitud   INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE;
  Lv_IdCaracSol           ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPlan          ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPlanViejo     ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPrecioAnt     ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracFrecuencia    ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Ln_IdValorEquipoCpm     ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdInternet           ADMI_PRODUCTO.ID_PRODUCTO%type;
  Lv_IdIp                 ADMI_PRODUCTO.ID_PRODUCTO%type;
  Lv_IdIpAdicional        ADMI_PRODUCTO.ID_PRODUCTO%type;
  Ln_PrecioVenta          INFO_SERVICIO.PRECIO_VENTA%type;
  Ln_Frecuencia           INFO_SERVICIO.FRECUENCIA_PRODUCTO%type;
  Lv_error                VARCHAR2(500);
  Lv_ValorEquipo          VARCHAR2(4000);
BEGIN
  --obtengo la referencia de la solicitud
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracSol
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'REFERENCIA SOLICITUD'
  AND estado                       = 'Activo';
  --
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPlan
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PLAN NUEVO'
  AND estado                       = 'Activo';
--
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPlanViejo
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PLAN VIEJO'
  AND estado                       = 'Activo';
--  
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPrecioAnt
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PRECIO ANTERIOR'
  AND estado                       = 'Activo';
--  
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracFrecuencia
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'FRECUENCIA'
  AND estado                       = 'Activo';  
--
  SELECT ID_CARACTERISTICA
  INTO Ln_IdValorEquipoCpm
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'VALOR_EQUIPO_CPM'
  AND estado                       = 'Activo';  

  OPEN C_getIdSolicitud('SOLICITUD CAMBIO PLAN MASIVO');
  FETCH C_getIdSolicitud INTO Ln_MigraPlan;
  CLOSE C_getIdSolicitud;
  --
  OPEN C_getIdSolicitud('SOLICITUD MIGRACION NUEVOS PLANES');
  FETCH C_getIdSolicitud INTO Ln_MigraOlt;
  CLOSE C_getIdSolicitud;
  --crear las solicitud principal
  Lr_detalleSolicitud.ID_DETALLE_SOLICITUD := SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
  Lr_detalleSolicitud.TIPO_SOLICITUD_ID    := Ln_MigraOlt;
  Lr_detalleSolicitud.USR_CREACION         := Pv_UsuarioCrea;
  Lr_detalleSolicitud.ESTADO               := 'Pendiente';
  DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_detalleSolicitud, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --crear las solicitudes para migracion de ip
  Ln_SecuenciaSolicitud := Lr_detalleSolicitud.ID_DETALLE_SOLICITUD;
  --crear las solicitudes de cambio de plan
  La_Servicios := infrk_transacciones.split(Pv_Servicios,';');
  FOR i IN 1..La_Servicios.count
  LOOP
    La_Servicio  := infrk_transacciones.split(La_Servicios(i),',') ;
    Lv_servicio  :=La_Servicio(1);
    Lv_planNuevo :=La_Servicio(2);
    Lv_planViejo :=La_Servicio(3);
    Lv_idElemento :=La_Servicio(4);
    Lv_ValorEquipo := '';
    IF La_Servicio.EXISTS(5) THEN
      Lv_ValorEquipo := La_Servicio(5);
    END IF;

    --obtengo el precio de venta anterior del servicio 
    Ln_PrecioVenta := 0;
    Ln_Frecuencia  := 0;
    SELECT PRECIO_VENTA, FRECUENCIA_PRODUCTO 
    INTO Ln_PrecioVenta, Ln_Frecuencia
    FROM INFO_SERVICIO 
    WHERE ID_SERVICIO=Lv_servicio;
    --
    Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD := SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
    Lr_detalleSolicitudDet.SERVICIO_ID       := Lv_servicio;
    Lr_detalleSolicitudDet.TIPO_SOLICITUD_ID := Ln_MigraPlan;
    Lr_detalleSolicitudDet.USR_CREACION      := Pv_UsuarioCrea;
    Lr_detalleSolicitudDet.ESTADO            := 'Pendiente';
    Lr_detalleSolicitudDet.ELEMENTO_ID       := Lv_idElemento;
    DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_detalleSolicitudDet, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto la solicitud original como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracSol;--caracteristica de plan nuevo
    Lr_detaleSol.VALOR                := Ln_SecuenciaSolicitud;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el plan a cambiar como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPlan;--caracteristica de plan nuevo
    Lr_detaleSol.VALOR                := Lv_planNuevo;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el plan a cambiar como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPlanViejo;--caracteristica de plan viejo
    Lr_detaleSol.VALOR                := Lv_planViejo;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el precio anterior del servicio como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPrecioAnt;--caracteristica de precio anterior
    Lr_detaleSol.VALOR                := Ln_PrecioVenta;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;  
     --inserto frecuencia anterior del servicio como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracFrecuencia;--caracteristica de precio anterior
    Lr_detaleSol.VALOR                := Ln_Frecuencia;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;

    IF Lv_ValorEquipo IS NOT NULL THEN
      Lr_detaleSol.CARACTERISTICA_ID    := Ln_IdValorEquipoCpm;
      Lr_detaleSol.VALOR                := Lv_ValorEquipo;
      Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
      Lr_detaleSol.ESTADO               := 'Activo';
      Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
      IF Lv_error IS NOT NULL THEN
        RAISE ExWhenOthers;
      END IF;
    END IF;
  END LOOP;
EXCEPTION
WHEN ExWhenOthers THEN
  ROLLBACK;
  Lv_MensaError := Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_SOLICITUDES_MIGRACION_IP ';
WHEN OTHERS THEN
  ROLLBACK;
  Lv_MensaError := SQLERRM||Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_SOLICITUDES_MIGRACION_IP ';
END INFRP_SOLICITUDES_MIGRACION_IP; 

--
/**
* INFRP_GET_FACTIBILIDAD_WIFI
*
* Procedimiento que verifica si en un nodo wifi hay factibilidad y devuelve los id de los elementos con disponibilidad
*
* @param number Pn_IdNodoWifi
*
* @return string Lv_resultado
* @return string Lv_MensaError
*
* @author John Vera <javera@telconet.ec>
* @version 1.0 10/05/2016
*
* @author John Vera <javera@telconet.ec>
* @version 1.1 15/07/2016 Incluir en la consulta de enlaces a los SWITCH
*
* @author John Vera <javera@telconet.ec>
* @version 1.2 08/08/2016 La capacidad l¿mite del nodo wifi se la debe leer del router wifi

* @author John Vera <javera@telconet.ec>
* @version 1.3 16/09/2016 se consulta el producto mediante el servicio
*
* @author John Vera <javera@telconet.ec>
* @version 1.4 21/09/2016 modificaci¿n la consulta de la capacidad del cliente, se consulta la informaci¿n del cliente mediante la interface del
*                          elemento que se guarda en la info_servicio_prod_caract
*
* @author Allan Suarez <arsuarez@telconet.ec>
* @version 1.5 22/11/2017 modificaci¿n la consulta de elementos pertenecientes a un NODO WIFI ordenados como prioridad por tipo
*                          elemento ROUTER
*/

PROCEDURE INFRP_GET_FACTIBILIDAD_WIFI(
    Pn_IdNodoWifi IN NUMBER,
    Pn_IdServicio IN NUMBER,    
    Lv_resultado OUT VARCHAR2,
    Lv_MensaError OUT VARCHAR2 )
AS
    --obtengo el contenido del elemento
  CURSOR C_contieneA
  IS
    SELECT 
      RELACION.*
    FROM 
      INFO_RELACION_ELEMENTO RELACION,
      INFO_ELEMENTO          ELEMENTO,
      ADMI_MODELO_ELEMENTO   MODELO,
      ADMI_TIPO_ELEMENTO     TIPO
    WHERE 
        RELACION.ELEMENTO_ID_a      = Pn_IdNodoWifi
    AND RELACION.ELEMENTO_ID_B      = ELEMENTO.ID_ELEMENTO
    AND RELACION.ESTADO             = 'Activo'
    AND ELEMENTO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
    AND MODELO.TIPO_ELEMENTO_ID     = TIPO.ID_TIPO_ELEMENTO
    ORDER BY
      CASE
        WHEN TIPO.NOMBRE_TIPO_ELEMENTO = 'ROUTER'
        THEN TIPO.NOMBRE_TIPO_ELEMENTO
      END ASC;

  --obtengo las interfaces del elemento
  CURSOR C_getInterfaces(Cv_IdElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT * FROM INFO_INTERFACE_ELEMENTO IE WHERE ELEMENTO_ID = Cv_IdElemento;
  --Obtengo el enlace  y verifico que sea un router o un wifi
  CURSOR C_getEnlace (Cv_IdInterface INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
  IS
    SELECT E.ID_ELEMENTO
    FROM INFO_ENLACE EN,
      INFO_INTERFACE_ELEMENTO IE,
      INFO_ELEMENTO E,
      ADMI_MODELO_ELEMENTO ME,
      ADMI_TIPO_ELEMENTO TE
    WHERE ME.TIPO_ELEMENTO_ID        = TE.ID_TIPO_ELEMENTO
    AND E.MODELO_ELEMENTO_ID         = ME.ID_MODELO_ELEMENTO
    AND E.ID_ELEMENTO                = IE.ELEMENTO_ID
    AND IE.ID_INTERFACE_ELEMENTO     = EN.INTERFACE_ELEMENTO_FIN_ID
    AND TE.NOMBRE_TIPO_ELEMENTO     IN ('ROUTER','SWITCH')
    AND EN.ESTADO = 'Activo'
    AND EN.INTERFACE_ELEMENTO_INI_ID = Cv_IdInterface ;
  --
  CURSOR C_getCapacidadCliente(Cv_IdInterface INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE, Cv_IdProdCaract NUMBER )
  IS
    SELECT SPC.VALOR 
    FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC 
    WHERE SPC.PRODUCTO_CARACTERISITICA_ID = Cv_IdProdCaract
    AND SPC.ESTADO = 'Activo'
    AND SPC.SERVICIO_ID = (SELECT SPC1.servicio_id 
                             FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC1 
                            WHERE SPC1.VALOR = Cv_IdInterface 
                            AND SPC1.PRODUCTO_CARACTERISITICA_ID = (SELECT PC.ID_PRODUCTO_CARACTERISITICA
                                                                    FROM ADMI_PRODUCTO_CARACTERISTICA PC,
                                                                      ADMI_PRODUCTO P,
                                                                      ADMI_CARACTERISTICA C
                                                                    WHERE PC.CARACTERISTICA_ID       = C.ID_CARACTERISTICA
                                                                    AND PC.PRODUCTO_ID               = P.ID_PRODUCTO
                                                                    AND P.NOMBRE_TECNICO             = 'INTERNET WIFI'
                                                                    AND C.DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID'
                                                                    AND PC.ESTADO                    = 'Activo')
                              AND SPC1.ESTADO = 'Activo'
                              AND ROWNUM <2 );
    --obtener capacidad elemento
  CURSOR C_GetCapacidadElemento(Cn_idElemento INFO_ELEMENTO.ID_ELEMENTO%TYPE)
  IS
    SELECT DE.DETALLE_VALOR
    FROM INFO_RELACION_ELEMENTO RE, 
         INFO_ELEMENTO E, 
         ADMI_MODELO_ELEMENTO ME, 
         ADMI_TIPO_ELEMENTO TE, 
         INFO_DETALLE_ELEMENTO DE
    WHERE RE.elemento_id_a = Cn_idElemento    
    AND E.ID_ELEMENTO = RE.ELEMENTO_ID_B
    AND E.ID_ELEMENTO = DE.ELEMENTO_ID    
    AND ME.ID_MODELO_ELEMENTO = E.MODELO_ELEMENTO_ID
    AND TE.ID_TIPO_ELEMENTO = ME.TIPO_ELEMENTO_ID
    AND DE.ESTADO = 'Activo'
    AND DE.DETALLE_NOMBRE = 'CAPACIDAD'
    AND RE.estado          = 'Activo'
    AND TE.NOMBRE_TIPO_ELEMENTO in ('ROUTER','CPE');
    --
    --obtener la capacidad del cliente
  CURSOR C_GetCapacidadClienteWifi (Cv_productoCaracteristica ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA%type)
  IS
  SELECT SPC.VALOR
  FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC
  WHERE SPC.SERVICIO_ID = Pn_IdServicio
  AND SPC.PRODUCTO_CARACTERISITICA_ID = Cv_productoCaracteristica
  AND SPC.ESTADO = 'Activo';

  Ln_CapacidadCliente   NUMBER;
  Ln_IdProdCaract       NUMBER;
  Ln_elementoEnlazado   NUMBER;
  Ln_elementoLoop       NUMBER;
  Ln_capacidad          NUMBER;
  Ln_capacidadElemento  NUMBER;
  Ln_totalCapacidad     NUMBER        :=0 ;
  Lb_finalizaProceso    BOOLEAN       := false;
  Lb_disponibilidad     BOOLEAN       := false;
  Ln_Contador           NUMBER        :=0;
  Lv_elementosFactibles VARCHAR2(1000):=NULL;
  ExWhenOthers          EXCEPTION;
BEGIN
  --obtengo el prod caract
SELECT PC.ID_PRODUCTO_CARACTERISITICA
  INTO Ln_IdProdCaract
  FROM ADMI_PRODUCTO_CARACTERISTICA PC,
    ADMI_PRODUCTO P,
    ADMI_CARACTERISTICA C,
    INFO_SERVICIO S
  WHERE PC.CARACTERISTICA_ID       = C.ID_CARACTERISTICA
  AND PC.PRODUCTO_ID               = P.ID_PRODUCTO
  AND P.ID_PRODUCTO                = S.PRODUCTO_ID
  AND S.ID_SERVICIO                = Pn_IdServicio
  AND C.DESCRIPCION_CARACTERISTICA = 'CAPACIDAD1'
  AND ROWNUM < 2;
  --  
  OPEN C_GetCapacidadClienteWifi(Ln_IdProdCaract);
  FETCH C_GetCapacidadClienteWifi INTO Ln_CapacidadCliente;
  CLOSE C_GetCapacidadClienteWifi;

  IF Ln_CapacidadCliente IS NULL THEN
    Lv_MensaError := 'EL CLIENTE NO TIENE CAPACIDAD ASIGNADA.';
    RAISE ExWhenOthers;
  END IF;  

  --En el Nodo Wifi busco el RO y obtengi su bw
  OPEN C_GetCapacidadElemento(Pn_IdNodoWifi);
  FETCH C_GetCapacidadElemento INTO Ln_capacidadElemento;
  CLOSE C_GetCapacidadElemento;
    --
  IF Ln_capacidadElemento IS NULL THEN
    Lv_MensaError := 'EL ELEMENTO NO TIENE CAPACIDAD ASIGNADA. ';
    RAISE ExWhenOthers;
  END IF;
    --

  FOR I IN C_contieneA
  LOOP
  --
    Ln_elementoLoop := I.ELEMENTO_ID_B;    
    LOOP
      FOR F IN C_getInterfaces (Ln_elementoLoop)
      LOOP
        --consulto si esta enlazado a otro equipo router o switch
        OPEN C_getEnlace(F.ID_INTERFACE_ELEMENTO);
        FETCH C_getEnlace INTO Ln_elementoEnlazado;
        CLOSE C_getEnlace;
        --verifico si tienen disponibilidad en algun puerto para que se lo considere
        IF F.ESTADO          = 'not connect' THEN
          Lb_disponibilidad := true;
        END IF;
        --obtengo si los puertos tienen clientes y cuanta capacidad consumen
        Ln_capacidad := 0;
        OPEN C_getCapacidadCliente(F.ID_INTERFACE_ELEMENTO, Ln_IdProdCaract);
        FETCH C_getCapacidadCliente INTO Ln_capacidad;
        CLOSE C_getCapacidadCliente;
        --sumamos la capacidad total de este elemento
        IF Ln_capacidad     IS NOT NULL THEN
          Ln_totalCapacidad := Ln_totalCapacidad + Ln_capacidad;
        END IF;
      END LOOP;
      --voy almacenando los id de los elementos con puertos libres
      IF Lb_disponibilidad     = true THEN
        IF Lv_ElementosFactibles IS NULL THEN
          Lv_ElementosFactibles := Ln_elementoLoop;
        ELSE
          Lv_ElementosFactibles := Lv_ElementosFactibles ||','|| Ln_elementoLoop;
        END IF;
      END IF;
      --si ya no hay elementos enlazados termino el proceso de conteo de capacidad utilizada
      IF Ln_elementoEnlazado IS NULL THEN
        Lb_finalizaProceso   := true;
      ELSE
        Ln_elementoLoop := Ln_elementoEnlazado;
        Ln_elementoEnlazado := null;
      END IF;
      Ln_Contador := Ln_Contador +1;
      --pongo un limite si se queda ciclado
      IF Ln_Contador > 100 THEN
        Lv_MensaError    := ' LAZO QUEDO CICLADO ';
        RAISE ExWhenOthers;
      END IF;
      EXIT
    WHEN Lb_finalizaProceso = TRUE;
    END LOOP;
    --si no hay puerto disponible, envio mensaje de error
    IF Lb_disponibilidad = false THEN
        Lv_MensaError := ' NO EXISTEN PUERTOS DISPONIBLES EN ESTE NODO ';
        RAISE ExWhenOthers;
    END IF;
    Ln_totalCapacidad := Ln_totalCapacidad + Ln_CapacidadCliente;
    --VERIFICO SI hay disponibilidad en esta caja y regreso el string de elementos
    IF Ln_totalCapacidad < Ln_capacidadElemento THEN
      Lv_resultado      := Lv_ElementosFactibles;
      EXIT;
    ELSE
      Lv_MensaError := ' NO EXISTE DISPONIBILIDAD EN ESTE ELEMENTO <br> CAPACIDAD ELEMENTO: '||Ln_capacidadElemento 
                       ||' <br>CAPACIDAD OCUPADA: '||Ln_totalCapacidad;
      Ln_capacidadElemento:= 0;
      RAISE ExWhenOthers;
    END IF;
  END LOOP;

EXCEPTION
WHEN ExWhenOthers THEN
  ROLLBACK;
WHEN OTHERS THEN
  ROLLBACK;
  Lv_MensaError := SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || Lv_MensaError ;

END INFRP_GET_FACTIBILIDAD_WIFI;



/**
* INFRP_CIERRA_TAREAS_SOLICITUD
*
* Procedimiento que cierra tareas relacionadas a una solicitud
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 18/02/2016
* @param number Pn_IdDetalleSolicitud
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.1 27-09-2016 - Se modifica el procedure para que en lugar de comparar la observacion del historial se compare la acci¿n,
*                           ya que la observaci¿n cambia dependiendo del servicio. El cambio se realizar¿ para obtener de manera correcta el 
*                           el usuario que activa un servicio
*
* @author Richard Cabrera <rcabrera@telconet.ec>
* @version 1.2 11-09-2017 - En la tabla INFO_DETALLE_HISTORIAL se agregan los campos de persona_empresa_rol_id,departamento_origen_id,
*                           departamento_destino_id, accion y en la tabla INFO_TAREA_SEGUIMIENTO se agregan campos estado_tarea, departamento_id y
*                           persona_empresa_rol_id
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @version 1.3 14-10-2019 - Se modifica el procedure para poder finalizar tareas con el estado Pausada.
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.4 11-06-2020 - Se modifica el procedimiento para finalizar tareas de acuerdo al proceso de Regularizar.
*
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @version 1.5 17-08-2020 - Se modifica el procedure para poder finalizar tareas con el estado Asignada.
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @author Jean Pierre Nazareno <jnazareno@telconet.ec>
* @version 1.6 25-01-2021 - Se modifica el procedure para finalizar tareas de traslado.
*
* @author Ronny Mor¿n Chancay <rmoranc@telconet.ec>
* @version 1.6 25-01-2021 - Se modifica el procedure para finalizar tareas de traslado.
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.7 28-05-2021 - Se quita el commit para la ejecuci¿n de cierre de tareas por el proceso Regularizar
*
* @author Lizbeth Cruz <mlcruz@telconet.ec>
* @version 1.8 06-05-2021 - Se modifica el procedimiento para finalizar tareas tomando en cuenta la observaci¿n enviada en el par¿metro Pv_Proceso 
*                           al crear el seguimiento
*
* @return string Lv_MensaError
*/
PROCEDURE INFRP_CIERRA_TAREAS_SOLICITUD(
    Pn_IdDetalleSolicitud IN NUMBER,
    Pv_Proceso            IN VARCHAR2,
    Lv_MensaError        OUT VARCHAR2)
AS
CURSOR c_queryRegistros
  IS
    SELECT qq.id_servicio id_servicio,
      qq.punto_id punto_id,
      ww.id_detalle_solicitud id_detalle_solicitud,
      aa.id_detalle id_detalle
    FROM DB_COMERCIAL.info_Servicio qq,
      DB_COMERCIAL.info_detalle_solicitud ww,
      DB_SOPORTE.INFO_DETALLE aa
    WHERE ww.ID_DETALLE_SOLICITUD = PN_IDDETALLESOLICITUD
    AND ww.SERVICIO_ID            = qq.ID_SERVICIO
    AND ww.ID_DETALLE_SOLICITUD   = aa.DETALLE_SOLICITUD_ID;

CURSOR C_GetUltimaAsignacion(cn_detalleId NUMBER)
IS
  SELECT IPER.DEPARTAMENTO_ID,
    IDA.PERSONA_EMPRESA_ROL_ID
  FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION IDA,
    DB_SOPORTE.INFO_PERSONA_EMPRESA_ROL IPER
  WHERE IDA.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL
  AND IDA.ID_DETALLE_ASIGNACION    =
    (SELECT MAX(IDA2.ID_DETALLE_ASIGNACION)
    FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION IDA2
    WHERE IDA2.DETALLE_ID = cn_detalleId
    );

CURSOR C_GetDepartamento(cv_departamento VARCHAR2)
IS
  SELECT ADE.ID_DEPARTAMENTO
  FROM DB_SOPORTE.ADMI_DEPARTAMENTO ADE
  WHERE ADE.NOMBRE_DEPARTAMENTO = cv_departamento;

TYPE T_queryRegistros
IS
  TABLE OF c_queryRegistros%ROWTYPE INDEX BY PLS_INTEGER;
  V_queryRegistros T_queryRegistros;
  estadoDetalleHistorial        VARCHAR2(40) := NULL;
  permiteRegularizacion         BOOLEAN      := false;
  feCreaConfirmoServicio        DATE;
  codigoEmpresa                 VARCHAR2(3)  := NULL;
  usuarioCreacion               VARCHAR2(40) := NULL;
  mensajeHistorial              VARCHAR2(60) := NULL;
  Lv_MsjTareaSeguimiento        VARCHAR2(100);
  accionServicioHistorial       VARCHAR2(60) := NULL;
  Lr_UltimaAsignacion           c_getUltimaAsignacion%ROWTYPE;
  Lv_nombreDepartamentoOrigen   VARCHAR2(30) := 'SISTEMAS';
  Ln_persona_empresa_rol_id     NUMBER       := 0;
  Ln_departamento_origen_id     NUMBER       := 0;
  Ln_departamento_destino_id    NUMBER       := 0;
  Lv_AplicaCommit               VARCHAR2(2) := 'SI';
BEGIN

IF C_GetDepartamento%ISOPEN THEN
  CLOSE C_GetDepartamento;
END IF;

--Se obtiene el departamento origen
OPEN C_GetDepartamento(Lv_nombreDepartamentoOrigen);
FETCH C_GetDepartamento INTO Ln_departamento_origen_id;
CLOSE C_GetDepartamento;

OPEN c_queryRegistros;
  LOOP
    FETCH c_queryRegistros BULK COLLECT INTO V_queryRegistros LIMIT 500;
    EXIT
  WHEN V_queryRegistros.COUNT = 0;
    FOR i IN 1 .. V_queryRegistros.COUNT
    LOOP

      IF C_GetUltimaAsignacion%ISOPEN THEN
        CLOSE C_GetUltimaAsignacion;
      END IF;

      --Se obtiene el ultimo aisgnado de la tarea
      OPEN C_GetUltimaAsignacion(V_queryRegistros (i).id_detalle);
      FETCH C_GetUltimaAsignacion into Lr_UltimaAsignacion;

      IF C_GetUltimaAsignacion%FOUND THEN
        Ln_persona_empresa_rol_id  := nvl(Lr_UltimaAsignacion.PERSONA_EMPRESA_ROL_ID,0);
        Ln_departamento_destino_id := nvl(Lr_UltimaAsignacion.DEPARTAMENTO_ID,0);
      END IF;

      CLOSE C_GetUltimaAsignacion;

      permiteRegularizacion:= false;
      usuarioCreacion      := '';
      BEGIN
        SELECT aa.ESTADO
        INTO estadoDetalleHistorial
        FROM DB_SOPORTE.INFO_DETALLE_HISTORIAL aa
        WHERE ID_DETALLE_HISTORIAL =
          (SELECT MAX(zz.ID_DETALLE_HISTORIAL)
          FROM DB_SOPORTE.INFO_DETALLE_HISTORIAL zz
          WHERE zz.DETALLE_ID=V_queryRegistros (i).id_detalle
          );
        IF estadoDetalleHistorial = 'Aceptada' or estadoDetalleHistorial = 'Pausada' or estadoDetalleHistorial = 'Asignada' THEN
          permiteRegularizacion  :=true;
        END IF;
      EXCEPTION
      WHEN OTHERS THEN
        permiteRegularizacion := false;
      END;
      IF permiteRegularizacion        = true THEN

        feCreaConfirmoServicio := sysdate;
        IF Pv_Proceso = 'Activar' THEN
           Lv_MsjTareaSeguimiento  := 'Se activo el Servicio';
           accionServicioHistorial := 'confirmarServicio';
           BEGIN
            SELECT FE_CREACION,
              USR_CREACION
            INTO feCreaConfirmoServicio,
              usuarioCreacion
            FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
            WHERE ID_SERVICIO_HISTORIAL =
              (SELECT MIN(ID_SERVICIO_HISTORIAL)
              FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
              WHERE servicio_id       =V_queryRegistros (i).id_servicio
              AND accion=accionServicioHistorial
              );
          EXCEPTION
          WHEN OTHERS THEN
            feCreaConfirmoServicio := sysdate;
          END;
        ELSIF Pv_Proceso = 'Traslado' THEN
          Lv_MsjTareaSeguimiento  := 'Se Activo el Servicio Traslado';
          accionServicioHistorial := 'feOrigServicioTrasladado';
          BEGIN
            SELECT FE_CREACION,
                USR_CREACION
            INTO feCreaConfirmoServicio,
              usuarioCreacion
            FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
            WHERE ID_SERVICIO_HISTORIAL =
            (SELECT MIN(ID_SERVICIO_HISTORIAL)
            FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
            WHERE servicio_id       =V_queryRegistros (i).id_servicio
            AND accion=accionServicioHistorial
            );
                  EXCEPTION
                  WHEN OTHERS THEN
                      feCreaConfirmoServicio := sysdate;
                  END;  
        ELSIF Pv_Proceso = 'Regularizar' THEN
          Lv_AplicaCommit         := 'NO';
          Lv_MsjTareaSeguimiento  := 'Solicitud asociada a esta tarea fue regularizada';
          BEGIN
            SELECT SOL_HISTO.USR_CREACION
            INTO usuarioCreacion
            FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST SOL_HISTO
            WHERE SOL_HISTO.ID_SOLICITUD_HISTORIAL =
              (SELECT MAX(SOL_HISTO_MAX.ID_SOLICITUD_HISTORIAL)
              FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST SOL_HISTO_MAX
              WHERE SOL_HISTO_MAX.DETALLE_SOLICITUD_ID = Pn_IdDetalleSolicitud
              );
          EXCEPTION
          WHEN OTHERS THEN
            usuarioCreacion := 'regulaData';
          END;
        ELSIF Pv_Proceso IS NOT NULL AND INSTR(Pv_Proceso, 'SEGUIMIENTO_GENERAL:') != 0 THEN
          Lv_AplicaCommit           := 'NO';
          Lv_MsjTareaSeguimiento    := SUBSTR(Pv_Proceso, INSTR(Pv_Proceso, 'SEGUIMIENTO_GENERAL:') + LENGTH('SEGUIMIENTO_GENERAL:'));
          BEGIN
            SELECT SOL_HISTO.USR_CREACION
            INTO usuarioCreacion
            FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST SOL_HISTO
            WHERE SOL_HISTO.ID_SOLICITUD_HISTORIAL =
              (SELECT MAX(SOL_HISTO_MAX.ID_SOLICITUD_HISTORIAL)
              FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST SOL_HISTO_MAX
              WHERE SOL_HISTO_MAX.DETALLE_SOLICITUD_ID = Pn_IdDetalleSolicitud
              );
          EXCEPTION
          WHEN OTHERS THEN
            usuarioCreacion := '';
          END;
        ELSE
           Lv_MsjTareaSeguimiento  := 'Se migro el Servicio';
           mensajeHistorial := 'Solicitud de Migracion: Cambio a estado [Finalizada]';
            BEGIN
              SELECT FE_CREACION,
                USR_CREACION
              INTO feCreaConfirmoServicio,
                usuarioCreacion
              FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
              WHERE ID_SERVICIO_HISTORIAL =
                (SELECT MIN(ID_SERVICIO_HISTORIAL)
                FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
                WHERE servicio_id       =V_queryRegistros (i).id_servicio
                AND TO_CHAR(observacion)=mensajeHistorial
                );
            EXCEPTION
            WHEN OTHERS THEN
              feCreaConfirmoServicio := sysdate;
            END;
        END IF;

        IF usuarioCreacion IS NULL THEN
          SELECT USR_CREACION
          INTO usuarioCreacion
          FROM DB_SOPORTE.INFO_DETALLE
          WHERE ID_DETALLE=V_queryRegistros(i).id_detalle;
        END IF;

        INSERT
        INTO DB_SOPORTE.INFO_DETALLE_HISTORIAL
          (
            ID_DETALLE_HISTORIAL,
            DETALLE_ID,
            OBSERVACION,
            ESTADO,
            USR_CREACION,
            FE_CREACION,
            IP_CREACION,
            MOTIVO,
            ASIGNADO_ID,
            PERSONA_EMPRESA_ROL_ID,
            DEPARTAMENTO_ORIGEN_ID,
            DEPARTAMENTO_DESTINO_ID,
            ACCION
          )
          VALUES
          (
            DB_SOPORTE.SEQ_INFO_DETALLE_HISTORIAL.NEXTVAL,
            V_queryRegistros (i).id_detalle,
            'Tarea finalizada',
            'Finalizada',
            usuarioCreacion,
            sysdate,
            '127.0.0.1',
            NULL,
            NULL,
            Ln_persona_empresa_rol_id,
            Ln_departamento_origen_id,
            Ln_departamento_destino_id,
            'Finalizada'
          );

        codigoEmpresa := '';

        SELECT BB.EMPRESA_COD
        INTO codigoEmpresa
        FROM DB_COMERCIAL.INFO_PUNTO CC,
          DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL AA,
          DB_COMERCIAL.INFO_EMPRESA_ROL BB
        WHERE ID_PUNTO        =V_queryRegistros (i).punto_id
        AND AA.ID_PERSONA_ROL =CC.PERSONA_EMPRESA_ROL_ID
        AND AA.EMPRESA_ROL_ID =BB.ID_EMPRESA_ROL;

        INSERT
        INTO DB_SOPORTE.INFO_TAREA_SEGUIMIENTO
          (
            ID_SEGUIMIENTO,
            DETALLE_ID,
            OBSERVACION,
            USR_CREACION,
            FE_CREACION,
            EMPRESA_COD,
            ESTADO_TAREA,
            DEPARTAMENTO_ID,
            PERSONA_EMPRESA_ROL_ID
          )
          VALUES
          (
            DB_SOPORTE.SEQ_INFO_TAREA_SEGUIMIENTO.NEXTVAL,
            V_queryRegistros (i).id_detalle,
            'Tarea fue Finalizada Obs : ' || Lv_MsjTareaSeguimiento,
            usuarioCreacion,
            sysdate,
            codigoEmpresa,
            'Finalizada',
            Ln_departamento_destino_id,
            Ln_persona_empresa_rol_id
          );
        IF Lv_AplicaCommit = 'SI' THEN
          COMMIT;
        END IF;
      END IF;
    END LOOP;
  END LOOP;
  CLOSE c_queryRegistros;
  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   LV_MENSAERROR := 'PROBLEMAS TRANSACCION';
END INFRP_CIERRA_TAREAS_SOLICITUD;

--

/**
* INFRP_REVERSA_MIGRACION_PLANES
*
* Procedimiento que reversa clientes de Olt migrado a planes ultra velocidad
*
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.0 13/02/2016
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.1 08/03/2016   Se agrega reverso de precio, frecuencia y de registros en tabla de caracteristicas del plan
*                           del servicio
* @author Jesus Bozada <jbozada@telconet.ec>
* @version 1.2 16/03/2016   Se agrega reverso de tipo de aprovisionamiento de ip
* @param number Pn_IdOlt
* @param string Pv_MarcaOlt
*
* @return string Lv_MensaError
*/
PROCEDURE INFRP_REVERSA_MIGRACION_PLANES(
    PN_IDOLT    IN NUMBER,
    PV_MARCAOLT IN VARCHAR2,
    LV_MENSAERROR OUT VARCHAR2)
AS
Lr_servicioHistorial INFO_SERVICIO_HISTORIAL%ROWTYPE;
Lv_error             VARCHAR2(500);
BEGIN
  -- Activacion de caracteristicas antiguas del cliente
  UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
  SET ESTADO                     ='Activo'
  WHERE ID_SERVICIO_PROD_CARACT IN
    (SELECT REF_SERVICIO_PROD_CARACT_ID
    FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    WHERE USR_CREACION               ='cambioplanm'
    AND REF_SERVICIO_PROD_CARACT_ID IS NOT NULL
    AND ESTADO                       ='Activo'
    AND SERVICIO_ID                 IN
      (SELECT INFO_SERVICIO.ID_SERVICIO
      FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO,
        DB_COMERCIAL.INFO_SERVICIO,
        DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE ID_ELEMENTO                     = PN_IDOLT
      AND INFO_SERVICIO_TECNICO.ELEMENTO_ID = INFO_ELEMENTO.ID_ELEMENTO
      AND INFO_SERVICIO_TECNICO.SERVICIO_ID =INFO_SERVICIO.ID_SERVICIO
      AND INFO_SERVICIO.ESTADO             IN ('Activo','In-Corte')
      )
    );

  -- Eliminacion de caracteristicas creadas en la migracion
  UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
  SET ESTADO                     ='Eliminado'
  WHERE ID_SERVICIO_PROD_CARACT IN
    (SELECT ID_SERVICIO_PROD_CARACT
    FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    WHERE USR_CREACION               ='cambioplanm'
    AND REF_SERVICIO_PROD_CARACT_ID IS NOT NULL
    AND ESTADO                       ='Activo'
    AND SERVICIO_ID                 IN
      (SELECT INFO_SERVICIO.ID_SERVICIO
      FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO,
        DB_COMERCIAL.INFO_SERVICIO,
        DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE INFO_ELEMENTO.ID_ELEMENTO       = PN_IDOLT
      AND INFO_SERVICIO_TECNICO.ELEMENTO_ID = INFO_ELEMENTO.ID_ELEMENTO
      AND INFO_SERVICIO_TECNICO.SERVICIO_ID =INFO_SERVICIO.ID_SERVICIO
      AND INFO_SERVICIO.ESTADO             IN ('Activo','In-Corte')
      )
    );

  IF PV_MARCAOLT = 'TELLION' THEN
    -- Activacion de ips antiguas de clientes
    UPDATE DB_INFRAESTRUCTURA.INFO_IP
    SET ESTADO   ='Activo'
    WHERE ID_IP IN
      (SELECT REF_IP_ID
      FROM DB_INFRAESTRUCTURA.INFO_IP
      WHERE USR_CREACION='cambioplanm'
      AND REF_IP_ID    IS NOT NULL
      AND ESTADO        ='Activo'
      AND SERVICIO_ID  IN
        (SELECT INFO_SERVICIO.ID_SERVICIO
        FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO,
          DB_COMERCIAL.INFO_SERVICIO,
          DB_INFRAESTRUCTURA.INFO_ELEMENTO
        WHERE INFO_ELEMENTO.ID_ELEMENTO       = PN_IDOLT
        AND INFO_SERVICIO_TECNICO.ELEMENTO_ID = INFO_ELEMENTO.ID_ELEMENTO
        AND INFO_SERVICIO_TECNICO.SERVICIO_ID = INFO_SERVICIO.ID_SERVICIO
        AND INFO_SERVICIO.ESTADO             IN ('Activo','In-Corte')
        )
      );
    -- Cambio a estado Reservada de ips nuevas creadas para la migracion
    UPDATE DB_INFRAESTRUCTURA.INFO_IP
    SET ESTADO   ='Reservada'
    WHERE ID_IP IN
      (SELECT ID_IP
      FROM DB_INFRAESTRUCTURA.INFO_IP
      WHERE USR_CREACION='cambioplanm'
      AND REF_IP_ID    IS NOT NULL
      AND ESTADO        ='Activo'
      AND SERVICIO_ID  IN
        (SELECT INFO_SERVICIO.ID_SERVICIO
        FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO,
          DB_COMERCIAL.INFO_SERVICIO,
          DB_INFRAESTRUCTURA.INFO_ELEMENTO
        WHERE INFO_ELEMENTO.ID_ELEMENTO       = PN_IDOLT
        AND INFO_SERVICIO_TECNICO.ELEMENTO_ID = INFO_ELEMENTO.ID_ELEMENTO
        AND INFO_SERVICIO_TECNICO.SERVICIO_ID = INFO_SERVICIO.ID_SERVICIO
        AND INFO_SERVICIO.ESTADO             IN ('Activo','In-Corte')
        )
      );
     -- Reverso de tecnologia de aprovisionamiento de ip
     UPDATE DB_INFRAESTRUCTURA.info_detalle_elemento
     SET detalle_valor = 'POOL'
     WHERE elemento_id   = PN_IDOLT
     AND detalle_nombre  = 'APROVISIONAMIENTO_IP';

  END IF;

  -- Reversa a planes antiguos de clientes que si aceptaron migracion de plan
  FOR CLIENTESSIACEPTARON IN
  (SELECT 'update db_comercial.info_servicio set plan_id = '
    ||INFO_DETALLE_SOL_CARACT.VALOR
    || ', precio_venta = ' 
    || (select cc.valor 
        from DB_COMERCIAL.INFO_DETALLE_SOL_CARACT cc 
         where cc.DETALLE_SOLICITUD_ID = INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD
               and cc.CARACTERISTICA_ID = 28)  
    || ', frecuencia_producto = ' 
    || (select cc.valor 
        from DB_COMERCIAL.INFO_DETALLE_SOL_CARACT cc 
         where cc.DETALLE_SOLICITUD_ID = INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD
               and cc.CARACTERISTICA_ID = 461)  
    ||' where id_servicio= '
    || INFO_DETALLE_SOLICITUD.SERVICIO_ID  AS SCRIPTACTUALIZACION,INFO_DETALLE_SOLICITUD.SERVICIO_ID IDSERVICIO, 
    INFO_SERVICIO.ESTADO ESTADOSERVICIO, INFO_SERVICIO.PRECIO_VENTA PRECIOSERVICIO,
    (select cc.valor 
        from DB_COMERCIAL.INFO_DETALLE_SOL_CARACT cc 
         where cc.DETALLE_SOLICITUD_ID = INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD
               and cc.CARACTERISTICA_ID = 28)  AS PRECIOANTES
  FROM DB_COMERCIAL.INFO_SERVICIO,
    DB_COMERCIAL.INFO_DETALLE_SOLICITUD,
    DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
  WHERE INFO_SERVICIO.ID_SERVICIO                 =INFO_DETALLE_SOLICITUD.SERVICIO_ID
  AND INFO_DETALLE_SOL_CARACT.DETALLE_SOLICITUD_ID=INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD
  AND INFO_DETALLE_SOL_CARACT.CARACTERISTICA_ID   =686
  AND INFO_DETALLE_SOLICITUD.TIPO_SOLICITUD_ID    =116
  AND INFO_DETALLE_SOLICITUD.ELEMENTO_ID          =PN_IDOLT
  )
  LOOP
    EXECUTE IMMEDIATE CLIENTESSIACEPTARON.SCRIPTACTUALIZACION;
    --actualizo el historial
    Lr_servicioHistorial.SERVICIO_ID  := CLIENTESSIACEPTARON.IDSERVICIO;
    Lr_servicioHistorial.USR_CREACION := 'cambioplanm';
    Lr_servicioHistorial.IP_CREACION  := '127.0.0.1';
    Lr_servicioHistorial.ESTADO       := CLIENTESSIACEPTARON.ESTADOSERVICIO;
    Lr_servicioHistorial.OBSERVACION  := 'Se reverso el servicio a su plan anterior al cambio de plan masivo. '
                                         || 'PRECIO PLAN UAV: '||CLIENTESSIACEPTARON.PRECIOSERVICIO||', '
                                         || 'PRECIO PLAN ST: '||CLIENTESSIACEPTARON.PRECIOANTES||'.';
    Lr_servicioHistorial.ACCION       := 'ReversoCambioPlan';
    --
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_servicioHistorial, Lv_error);

    UPDATE DB_COMERCIAL.INFO_SERVICIO_PLAN_CARACT
    SET ESTADO='Cancel'
    WHERE SERVICIO_ID= CLIENTESSIACEPTARON.IDSERVICIO AND USR_CREACION='cambioplanm' AND ESTADO='Activo';

    UPDATE DB_COMERCIAL.INFO_SERVICIO_PLAN_CARACT
    SET ESTADO='Activo'
    WHERE SERVICIO_ID= CLIENTESSIACEPTARON.IDSERVICIO AND USR_ULT_MOD='cambioplanm' AND ESTADO='Cancel';


  END LOOP;

  -- Reversa de solicitudes de migracion de plan generadas para este olt
  UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
  SET ESTADO        = 'Anulada'
  WHERE ELEMENTO_ID = PN_IDOLT ;


  -- Reversa de caracteristicas de migracion del olt
  DELETE
  FROM DB_INFRAESTRUCTURA.info_detalle_elemento
  WHERE elemento_id   =PN_IDOLT
  AND detalle_nombre IN ('MIGRACION','OLT MIGRADO CNR');


  UPDATE INFO_PROCESO_MASIVO_DET
  SET ESTADO = 'Eliminado', USR_ULT_MOD = 'cambioplanm', FE_ULT_MOD = SYSDATE
  WHERE PROCESO_MASIVO_CAB_ID IN
  (SELECT INFO_PROCESO_MASIVO_CAB.ID_PROCESO_MASIVO_CAB
  FROM INFO_PROCESO_MASIVO_CAB
  WHERE ELEMENTO_ID = PN_IDOLT
  )
  AND ESTADO = 'PrePendiente';


  UPDATE INFO_PROCESO_MASIVO_CAB
  SET ESTADO = 'Finalizada', USR_ULT_MOD = 'cambioplanm', FE_ULT_MOD = SYSDATE
  WHERE  ELEMENTO_ID = PN_IDOLT;

  COMMIT;

  EXCEPTION
   WHEN OTHERS THEN
   ROLLBACK;
   LV_MENSAERROR := 'PROBLEMAS TRANSACCION';
END INFRP_REVERSA_MIGRACION_PLANES;

--

FUNCTION INFRF_GET_DETALLE_VALOR(
    Pn_detalleNombre    IN VARCHAR2,
    Pn_idElemento       IN INFO_ELEMENTO.ID_ELEMENTO%TYPE,
    Pn_estado           IN VARCHAR2)
    RETURN VARCHAR2
IS
  CURSOR Lc_GetDetalleValor
  IS
    SELECT DE.DETALLE_VALOR
    FROM INFO_DETALLE_ELEMENTO DE
    WHERE DE.ELEMENTO_ID    = Pn_idElemento
    AND DE.DETALLE_NOMBRE   = Pn_detalleNombre
    AND DE.ESTADO           = Pn_estado;
  Lv_DetalleValor INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE;
BEGIN
  IF Lc_GetDetalleValor%ISOPEN THEN
    CLOSE Lc_GetDetalleValor;
  END IF;
  --
  OPEN Lc_GetDetalleValor;
  --
  FETCH
    Lc_GetDetalleValor
  INTO
    Lv_DetalleValor;
  --
  CLOSE Lc_GetDetalleValor;
  --
  IF Lv_DetalleValor IS NULL THEN
    Lv_DetalleValor  := NULL;
  END IF;
  --
  RETURN Lv_DetalleValor;
END;

--

/*
 * Procedimiento que crea las solicitudes de migracion, 
 * cambio de plan del elemento y migracion Logica de clientes TELLION
 *
 * @author Jesus Bozada <jbozada@telconet.ec>
 * @version 1.0 11-03-2016
 * @param  VARCHAR2   Pv_Servicios    Listado de servicios a ingresar
 * @param  VARCHAR2   Pv_UsuarioCrea  Usuario de creaci¿n de registros
 * @return VARCHAR2   Lv_MensaError   Mensaje de Error
 *
 */
PROCEDURE INFRP_MIGRACION_LOGICA_TELLION(    
    Pv_Servicios   IN VARCHAR2,
    Pv_UsuarioCrea IN VARCHAR2,
    Lv_MensaError OUT VARCHAR2)
AS
  --
  CURSOR C_getIdSolicitud (Cv_descripcion ADMI_TIPO_SOLICITUD.DESCRIPCION_SOLICITUD%TYPE)
  IS
    SELECT ID_TIPO_SOLICITUD
    FROM admi_tipo_solicitud
    WHERE descripcion_solicitud = Cv_descripcion
    AND estado                  = 'Activo';

  Lr_detalleSolicitud     DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
  Lr_detalleSolicitudDet  DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
  Lr_detaleSol            DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
  Lr_servicioHistorial    INFO_SERVICIO_HISTORIAL%ROWTYPE;
  Lr_detalleElemento      INFO_DETALLE_ELEMENTO%ROWTYPE;
  ExWhenOthers            EXCEPTION;
  La_Servicios            infrk_transacciones.t_array;
  La_Servicio             infrk_transacciones.t_array;
  Lv_servicio             VARCHAR2(100);
  Lv_planNuevo            VARCHAR2(100);
  Lv_planViejo            VARCHAR2(100);
  Lv_idElemento           VARCHAR2(100);
  Ln_MigraPlan            admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_MigraIp              admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_MigraOlt             admi_tipo_solicitud.ID_TIPO_SOLICITUD%type;
  Ln_SecuenciaSolicitud   INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE;
  Lv_IdCaracSol           ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPlan          ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPlanViejo     ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracPrecioAnt     ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdCaracFrecuencia    ADMI_CARACTERISTICA.ID_CARACTERISTICA%type;
  Lv_IdInternet           ADMI_PRODUCTO.ID_PRODUCTO%type;
  Lv_IdIp                 ADMI_PRODUCTO.ID_PRODUCTO%type;
  Lv_IdIpAdicional        ADMI_PRODUCTO.ID_PRODUCTO%type;
  Ln_PrecioVenta          INFO_SERVICIO.PRECIO_VENTA%type;
  Ln_Frecuencia           INFO_SERVICIO.FRECUENCIA_PRODUCTO%type;
  Lv_Estado               INFO_SERVICIO.ESTADO%type; 
  Lv_error                VARCHAR2(500);
  Lv_nombrePlanNuevo      VARCHAR2(100);
  Lv_nombrePlanViejo      VARCHAR2(100);
  Ln_precioPlanNuevo      VARCHAR2(100);
  Ln_frecuenciaPlanNuevo  VARCHAR2(100);
BEGIN
  --obtengo la referencia de la solicitud
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracSol
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'REFERENCIA SOLICITUD'
  AND estado                       = 'Activo';
  --
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPlan
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PLAN NUEVO'
  AND estado                       = 'Activo';
--
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPlanViejo
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PLAN VIEJO'
  AND estado                       = 'Activo';
--  
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracPrecioAnt
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'PRECIO ANTERIOR'
  AND estado                       = 'Activo';
--  
  SELECT ID_CARACTERISTICA
  INTO Lv_IdCaracFrecuencia
  FROM ADMI_CARACTERISTICA
  WHERE DESCRIPCION_CARACTERISTICA = 'FRECUENCIA'
  AND estado                       = 'Activo';  
--
  OPEN C_getIdSolicitud('SOLICITUD CAMBIO PLAN MASIVO');
  FETCH C_getIdSolicitud INTO Ln_MigraPlan;
  CLOSE C_getIdSolicitud;
  --
  OPEN C_getIdSolicitud('SOLICITUD MIGRACION NUEVOS PLANES');
  FETCH C_getIdSolicitud INTO Ln_MigraOlt;
  CLOSE C_getIdSolicitud;
  --crear las solicitud principal
  Lr_detalleSolicitud.ID_DETALLE_SOLICITUD := SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
  Lr_detalleSolicitud.TIPO_SOLICITUD_ID    := Ln_MigraOlt;
  Lr_detalleSolicitud.USR_CREACION         := Pv_UsuarioCrea;
  Lr_detalleSolicitud.ESTADO               := 'PendienteTellion';
  DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_detalleSolicitud, Lv_error);
  IF Lv_error IS NOT NULL THEN
    RAISE ExWhenOthers;
  END IF;
  --crear las solicitudes para migracion de ip
  Ln_SecuenciaSolicitud := Lr_detalleSolicitud.ID_DETALLE_SOLICITUD;
  --crear las solicitudes de cambio de plan
  La_Servicios := infrk_transacciones.split(Pv_Servicios,';');
  FOR i IN 1..La_Servicios.count
  LOOP
    La_Servicio  := infrk_transacciones.split(La_Servicios(i),',') ;
    Lv_servicio  :=La_Servicio(1);
    Lv_planNuevo :=La_Servicio(2);
    Lv_planViejo :=La_Servicio(3);
    Lv_idElemento :=La_Servicio(4);

    --obtengo el precio de venta anterior del servicio 
    Lv_nombrePlanNuevo     := '';
    Lv_Estado              := '';
    Ln_precioPlanNuevo     := 0;
    Ln_frecuenciaPlanNuevo := 0;
    Ln_PrecioVenta := 0;
    Ln_Frecuencia  := 0;
    SELECT PRECIO_VENTA, FRECUENCIA_PRODUCTO, ESTADO 
    INTO Ln_PrecioVenta, Ln_Frecuencia, Lv_Estado
    FROM INFO_SERVICIO 
    WHERE ID_SERVICIO=Lv_servicio;
    --
    Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD := SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
    Lr_detalleSolicitudDet.SERVICIO_ID       := Lv_servicio;
    Lr_detalleSolicitudDet.TIPO_SOLICITUD_ID := Ln_MigraPlan;
    Lr_detalleSolicitudDet.USR_CREACION      := Pv_UsuarioCrea;
    Lr_detalleSolicitudDet.ESTADO            := 'PendienteTellion';
    Lr_detalleSolicitudDet.ELEMENTO_ID       := Lv_idElemento;
    DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_detalleSolicitudDet, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto la solicitud original como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracSol;--caracteristica de sol cab
    Lr_detaleSol.VALOR                := Ln_SecuenciaSolicitud;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el plan a cambiar como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPlan;--caracteristica de plan nuevo
    Lr_detaleSol.VALOR                := Lv_planNuevo;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el plan a cambiar como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPlanViejo;--caracteristica de plan viejo
    Lr_detaleSol.VALOR                := Lv_planViejo;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;
    --inserto el precio anterior del servicio como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracPrecioAnt;--caracteristica de precio anterior
    Lr_detaleSol.VALOR                := Ln_PrecioVenta;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;  
     --inserto frecuencia anterior del servicio como atributo relacionado a la solicitud
    Lr_detaleSol.CARACTERISTICA_ID    := Lv_IdCaracFrecuencia;--caracteristica de frecuencia
    Lr_detaleSol.VALOR                := Ln_Frecuencia;
    Lr_detaleSol.DETALLE_SOLICITUD_ID := Lr_detalleSolicitudDet.ID_DETALLE_SOLICITUD;
    Lr_detaleSol.ESTADO               := 'Activo';
    Lr_detaleSol.USR_CREACION         := Pv_UsuarioCrea;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_detaleSol, Lv_error);
    IF Lv_error IS NOT NULL THEN
      RAISE ExWhenOthers;
    END IF;  

    --Migracion logica tellion
    --obtener nombrePlanAnterior
    SELECT NOMBRE_PLAN INTO Lv_nombrePlanViejo
    FROM DB_COMERCIAL.INFO_PLAN_CAB 
    WHERE ID_PLAN=Lv_planViejo;


    --obtener nombrePlanNuevo,precio plan, frecuencia,
    SELECT NOMBRE_PLAN,
      (SELECT SUM(D1.COSTO_ITEM)
      FROM DB_COMERCIAL.INFO_PLAN_DET D1
      WHERE D1.PLAN_ID   = ID_PLAN
      AND D1.ESTADO NOT IN ('Eliminado')
      ) ,
      (SELECT VALOR
      FROM DB_COMERCIAL.INFO_PLAN_CARACTERISTICA,
        db_comercial.admi_caracteristica
      WHERE DB_COMERCIAL.INFO_PLAN_CARACTERISTICA.CARACTERISTICA_ID  =DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA
      AND DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA='FRECUENCIA'
      AND DB_COMERCIAL.INFO_PLAN_CARACTERISTICA.PLAN_ID              =ID_PLAN
      )
    INTO Lv_nombrePlanNuevo,
      Ln_precioPlanNuevo,
      Ln_frecuenciaPlanNuevo
    FROM DB_COMERCIAL.INFO_PLAN_CAB
    WHERE ID_PLAN=Lv_planNuevo;
    --actualizacion de precio, plan nuevo y frecuencia 
    UPDATE INFO_SERVICIO
    SET PLAN_ID=Lv_planNuevo, FRECUENCIA_PRODUCTO=Ln_frecuenciaPlanNuevo, PRECIO_VENTA=Ln_precioPlanNuevo
    WHERE ID_SERVICIO= Lv_servicio;
    --Inserto el historial
    Lr_servicioHistorial.SERVICIO_ID  := Lv_servicio;
    Lr_servicioHistorial.USR_CREACION := 'cambioplanm';
    Lr_servicioHistorial.IP_CREACION  := '127.0.0.1';
    Lr_servicioHistorial.ESTADO       := Lv_Estado;
    Lr_servicioHistorial.OBSERVACION  := 'Se cambio de plan, plan anterior:<b> '||Lv_nombrePlanViejo||
                                         '</b>,<br>plan nuevo:<b> '|| Lv_nombrePlanNuevo||'</b>';
    --
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_servicioHistorial, Lv_error);

  END LOOP;
EXCEPTION
WHEN ExWhenOthers THEN
  ROLLBACK;
  Lv_MensaError := Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_MIGRACION_LOGICA_TELLION ';
WHEN OTHERS THEN
  ROLLBACK;
  Lv_MensaError := SQLERRM||Lv_error || '.<br> Error en INFRK_TRANSACCIONES.INFRP_MIGRACION_LOGICA_TELLION ';
END INFRP_MIGRACION_LOGICA_TELLION; 


/**
 * INFRP_CREAR_REDES_Y_SUBREDES
 *
 * Procedimiento que crea redes y subredes de acuerdo al rango solicitado por el sistema.
 *
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.0 23/12/2015
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.1 08-08-2016 - Se agrega parametro Pv_PrefijoRed para la creaci¿n de subredes por un prefijo espec¿fico.
 *
 * @author Allan Suarez <arsuarez@telconet.ec>
 * @version 1.2 23-09-2016 - Se actualiza variable Pv_FinRed para que se reciba directamente el limite de subred a crear
 *
 * @author Lizbeth Cruz <mlcruz@telconet.ec>
 * @version 1.3 22-08-2017 - Se modifica la ip final, ya que actualmente estaba cogiendo la ip de broadcast
 *
 * @author Allan Suarez <arsuarez@telconet.ec>
 * @version 1.4 26-02-201/ - Se modifica el paquete para que genere subred hasta /31
 *                         - Se corrige para que genere la ip faltante final para subredes /24
 *
 * @param VARCHAR2 Pv_PrefijoRed  Prefijo con el cual se va a crear la subred clase C.
 * @param VARCHAR2 Pv_InicioRed   Inicio de la red que se desea crear
 * @param VARCHAR2 Pv_FinRed      Cantidad de redes que se desean agregar
 * @param VARCHAR2 Pv_PrimerOct   Primer Octeto con el cual se crea el catalogo de subredes         
 * @param VARCHAR2 Pv_TercerOct   Tercer Octeto ( C ) con el cual se genera el catalogo de subredes
 * @param VARCHAR2 Pv_tipoUso     Tipo de Uso de la subred generada ( DATOSMPLS , INTMPLS , INTMPLSVSAT , DATOSVSAT )
 * @param VARCHAR2 Pv_tipoPrefijo Tipo de prefijo de red C o P ( ciudad o provincia )
 *
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_CREAR_REDES_Y_SUBREDES( Pv_PrefijoRed  IN VARCHAR2,
                                        Pv_InicioRed   IN INTEGER,
                                        Pv_FinRed      IN INTEGER,
                                        Pv_PrimerOct   IN VARCHAR2,
                                        Pv_TercerOct   IN VARCHAR2,
                                        Pv_tipoUso     IN VARCHAR2,
                                        Pv_tipoPrefijo IN VARCHAR2,
                                        Lv_MensaError  OUT VARCHAR2 )
AS
--
    --
    Pn_InicioContador NUMBER;
    Pn_FinContador    NUMBER;
    Pn_IpInicio       NUMBER;
    Pn_IpFin          NUMBER;
    Pn_Gateway        NUMBER;
    Pn_SubredBase     NUMBER;--
    Pn_Mascara        NUMBER;
    Pv_IpMascara      VARCHAR2(30);
    Pn_Subred         NUMBER;
    Pn_ValorMascara   NUMBER;
    Pn_Anadir         NUMBER;
    Pn_RangoCInicial  NUMBER;
    Pn_RangoCFinal    NUMBER;
    Pn_Contador       NUMBER;
    Pv_SubredPadre    VARCHAR2(15);
    Pn_ContadorGrupos NUMBER;
    Pn_limite3Octeto  NUMBER;
    Pn_estadoSubred   VARCHAR2(10);    
    Pn_UsoTemp        VARCHAR2(50);

    /*
     * Esta variable verificar¿ que cada 2 interaciones debe cambiarse la subred padre de la que proviene la subred que 
     * se va a ingresar
     */
    Pn_Secuencia      NUMBER;
    --
    --
    TYPE Mascaras IS VARRAY(8) OF NUMBER;
    --
    arrayMascaras Mascaras := Mascaras(24, 25, 26, 27, 28, 29, 30, 31);    
    --
    TYPE IpMascaras IS VARRAY(8) OF VARCHAR2(30);
    --
    arrayIpMascaras IpMascaras := IpMascaras('255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', 
                                             '255.255.255.240', '255.255.255.248', '255.255.255.252','255.255.255.254');
    --
    TYPE Subredes IS VARRAY(8) OF NUMBER;
    --
    arraySubredes Subredes := Subredes(1, 2, 4, 8, 16, 32, 64, 128);    
    --
    TYPE CantidadIpPorSubRed IS VARRAY(8) OF NUMBER;
    --
    arrayCantidadIps CantidadIpPorSubRed := CantidadIpPorSubRed(255, 128, 64, 32, 16, 8, 4, 2);
    --
--
BEGIN
--
    --
    Pn_RangoCInicial := Pv_InicioRed;
    Pn_RangoCFinal   := Pv_FinRed;

    --Limite de octeto a reservar
    Pn_limite3Octeto := 70;
    Pn_estadoSubred  := 'Activo';
    Pn_UsoTemp       := Pv_tipoUso;

    --Si el3er octeto es Nulo se crea la subred con el rango establecido
    IF Pv_TercerOct IS NOT NULL THEN

      Pn_RangoCInicial := Pv_TercerOct;
      Pn_RangoCFinal   := Pv_TercerOct;

    END IF;
    --
    FOR i IN Pn_RangoCInicial..Pn_RangoCFinal LOOP
    --
        --
        FOR j IN 1..arrayMascaras.COUNT LOOP
        --
            --
            Pn_Mascara        := arrayMascaras(j);
            Pv_IpMascara      := arrayIpMascaras(j);
            Pn_InicioContador := 0;
            Pn_FinContador    := arraySubredes(j) - 1;
            Pn_Secuencia      := 0;
            Pn_ContadorGrupos := 0;
            --
            --
            FOR contador IN Pn_InicioContador..Pn_FinContador LOOP
            --
                --
                Pn_Gateway     := (contador * arrayCantidadIps(j)) + 1;
                Pn_IpInicio    := (contador * arrayCantidadIps(j)) + 2;
                Pn_SubredBase  := (contador * arrayCantidadIps(j));

                --Ip Finales segun la mascara de subred
                IF Pn_Mascara = 24 THEN

                    Pn_IpFin    := (contador  * arrayCantidadIps(j)) + (arrayCantidadIps(j) - 1);

                ELSE

                    Pn_IpFin    := (contador  * arrayCantidadIps(j)) + (arrayCantidadIps(j) - 2);

                END IF;

                --Gateway segun la mascara de subred /31
                IF Pn_Mascara = 31 THEN

                    Pn_Gateway  := (contador * arrayCantidadIps(j));
                    Pn_IpInicio := (contador  * arrayCantidadIps(j)) + (arrayCantidadIps(j) - 1);-- o = Pn_Gateway
                    Pn_IpFin    := Pn_IpInicio;

                END IF;                              

                --
                --
                IF Pn_Mascara > 24 THEN
                --
                    --
                    IF Pn_Secuencia = 0 THEN
                    --
                        --
                        Pv_SubredPadre := '.'||(Pn_ContadorGrupos * arrayCantidadIps(j-1))||'/'||(arrayMascaras(j-1));
                        --
                    --
                    END IF;
                    --
                --
                END IF;
                --  
                --
                IF Pn_Mascara = 24 THEN
                --
                    --
                    Pn_Subred := NULL;
                    --
                --
                ELSE
                --
                    --
                    SELECT isr.ID_SUBRED INTO Pn_Subred
                    FROM DB_INFRAESTRUCTURA.INFO_SUBRED isr
                    WHERE isr.SUBRED = CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, Pv_SubredPadre))));
                    --
                --
                END IF;
                --
                --
                Pn_Secuencia := Pn_Secuencia + 1;
                --
                --
                IF Pn_Secuencia = 2 THEN
                --
                    --
                    Pn_Secuencia := 0;
                    Pn_ContadorGrupos := Pn_ContadorGrupos + 1;
                    --
                --
                END IF;
                --
                --

                --Determinar si el prefijo de subred son los definidos para ciudad
                IF Pv_tipoPrefijo IS NOT NULL THEN

                    IF Pv_tipoPrefijo = 'C' THEN  Pn_limite3Octeto := 70; ELSE Pn_limite3Octeto := 16; END IF;

                END IF;

                IF i < Pn_limite3Octeto THEN

                    Pn_estadoSubred := 'Ocupado';
                    Pn_UsoTemp      := 'NETWORKING';

                ELSE

                    Pn_estadoSubred := 'Activo';
                    Pn_UsoTemp      := Pv_tipoUso;

                END IF;


                INSERT INTO DB_INFRAESTRUCTURA.INFO_SUBRED
                ( 
                    ID_SUBRED,
                    SUBRED, 
                    IP_INICIAL,
                    IP_FINAL,
                    ESTADO,
                    FE_CREACION,
                    USR_CREACION, 
                    IP_CREACION,
                    MASCARA,
                    GATEWAY,
                    SUBRED_ID,
                    EMPRESA_COD,
                    VERSION_IP,
                    TIPO,
                    USO
                )
                VALUES
                (
                    DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL,
                    CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.', CONCAT((Pn_SubredBase), CONCAT('/', Pn_Mascara))))))),
                    CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.',Pn_IpInicio))))),
                    CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.',Pn_IpFin))))),
                    Pn_estadoSubred,
                    SYSDATE,
                    'telcos',
                    '127.0.0.1',
                    Pv_IpMascara,
                    CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.', (Pn_Gateway)))))),
                    Pn_Subred,
                    '10',
                    'IPv4',
                    'WAN',
                    Pn_UsoTemp
                );
                --
            --
            END LOOP;
            --   
            --
            COMMIT;
            --
        --
        END LOOP;
        --
    --
    END LOOP;
    --
--
EXCEPTION
WHEN OTHERS THEN
--
    --
    ROLLBACK;
    --
    Lv_MensaError := SQLERRM || '.<br> Error en INFRK_TRANSACCIONES.INFRP_CREAR_REDES_Y_SUBREDES ';
    --
--
END INFRP_CREAR_REDES_Y_SUBREDES; 


/*
 * Funcion que sirve para subnetear las redes y subredes existentes.
 *
 * @author Edson Franco <efranco@telconet.ec>
 * @version 1.0 23-12-2015
 *
 * @author Allan Suarez <arsuarez@telconet.ec>
 * @version 1.1 12-04-2018 - Se actualiza consulta que trae las subredes haciendo que siempre traiga la menor subred disponible
 *                           para llevar un orden secuencial de subredes generadas
 *
 * @author Richard Cabrera <rcabrera@telconet.ec>
 * @version 1.2 30-11-2020 - Se agrega la condicion del USO en el query que consulta la subred aprovisionada
 *
 * @param VARCHAR2 Pv_TipoAccion         Tipo de Accion que se requiere realizar 'asignar' o 'liberar'
 * @param VARCHAR2 Pv_SubredId           Id de la Subred que se desea buscar
 * @param VARCHAR2 Pv_ElementoId         Id del Elemento al cual esta asociado una subred
 * @param VARCHAR2 Pv_SubredPrefijo      Subred que desea buscar la cual contiene los dos primeros octetos
 * @param VARCHAR2 Pv_Uso                Uso que tendr¿ la subred
 * @param VARCHAR2 Pv_Mascara            Mascara de red de la subred que desea buscar
 *
 * @return VARCHAR2 Pn_IdSubredEncontrada
 * @return VARCHAR2 Lv_MensaError
 */
PROCEDURE INFRP_SUBNETING(    
    Pv_TipoAccion         IN VARCHAR2,
    --
    Pv_SubredId           IN VARCHAR2,
    Pv_ElementoId         IN VARCHAR2,
    Pv_SubredPrefijo      IN VARCHAR2,
    --
    Pv_Uso                IN VARCHAR2,
    Pv_Mascara            IN VARCHAR2,
    --
    Pn_IdSubredEncontrada OUT VARCHAR2,
    Lv_MensaError         OUT VARCHAR2 )
AS
    --
    Pn_SubredEncontradaId DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE;
    Pn_SubredInicialId    DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE;
    Pn_SubredFinalId      DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE;
    Pn_SubredPadreId      DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED_ID%TYPE;
    Pn_RedPadreId         DB_INFRAESTRUCTURA.INFO_SUBRED.RED_ID%TYPE;
    Pv_TieneHijos         VARCHAR(1);
    Lv_Subred             VARCHAR(500);

    Lv_EstadoParaBuscar   VARCHAR(20);
    Lv_EstadoParaCambiar  VARCHAR(20);
    --
BEGIN
--

  --
  IF Pv_TipoAccion = 'asignar' THEN
  --
    --  
    Lv_EstadoParaBuscar  := 'Activo';
    Lv_EstadoParaCambiar := 'Ocupado';
    SELECT NVL (
                  (
                      SELECT subred.SUBRED FROM DB_INFRAESTRUCTURA.INFO_SUBRED subred 
                      WHERE subred.ID_SUBRED = 
                      (SELECT MIN(isub.ID_SUBRED)
                      FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub
                        WHERE isub.ESTADO       = Lv_EstadoParaBuscar
                          AND isub.USO          = Pv_Uso
                          AND isub.MASCARA      = Pv_Mascara
                          AND (Pv_ElementoId IS NULL OR isub.ELEMENTO_ID = Pv_ElementoId)
                          AND (Pv_SubredId IS NULL OR isub.ID_SUBRED = Pv_SubredId)
                          AND (Pv_SubredPrefijo IS NULL OR Pv_SubredPrefijo ||'.%' IS NULL OR isub.SUBRED LIKE (Pv_SubredPrefijo||'.%')))
                  ),
                  '0'
               ) INTO Lv_Subred FROM DUAL;

  ELSIF (Pv_TipoAccion = 'liberar') THEN
      Lv_EstadoParaBuscar  := 'Ocupado';
      Lv_EstadoParaCambiar := 'Activo';
      SELECT NVL (
                    (
                      SELECT isub.SUBRED
                      FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub
                        WHERE isub.ID_SUBRED    = Pv_SubredId
                          AND isub.ESTADO       = Lv_EstadoParaBuscar
                          AND isub.USO          = Pv_Uso
                          AND (Pv_ElementoId IS NULL OR isub.ELEMENTO_ID = Pv_ElementoId)
                          AND ROWNUM = 1 
                  ),
                  '0'
               ) INTO Lv_Subred FROM DUAL;
  ELSE

      Lv_MensaError:= 'No se ha definido el tipo de accion ';

  END IF;

  --
  -- Get Id de la Subred Encontrada para ejecutar las actualizaciones
  --
  SELECT NVL (
                (
                    SELECT isub.ID_SUBRED
                    FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub
                    WHERE isub.SUBRED = Lv_Subred
                      AND isub.ESTADO = Lv_EstadoParaBuscar
                      AND isub.USO    = Pv_Uso
                ),
                '0'
             ) INTO Pn_IdSubredEncontrada FROM DUAL;
  --
  --
  IF Lv_Subred != '0' THEN
  --
      --
      Lv_MensaError       := 'OK';
      --
      --
      FOR Le_Subred IN ( 
                          SELECT isub.ID_SUBRED, isub.SUBRED, isub.SUBRED_ID
                          FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub
                          WHERE isub.SUBRED = Lv_Subred
                            AND isub.ESTADO = Lv_EstadoParaBuscar
                            AND isub.USO    = Pv_Uso  )
      LOOP
      --
          --
          Pn_SubredEncontradaId := Le_Subred.ID_SUBRED;
          Pn_SubredInicialId := Pn_SubredEncontradaId;
          Pn_SubredPadreId := Le_Subred.SUBRED_ID;
          --
          --
          IF Lv_EstadoParaBuscar = 'Activo' THEN
          --
              --
              WHILE Pn_SubredPadreId > 0
              LOOP
              --
                  --
                  FOR Le_SubredesPadres IN ( SELECT isub2.ID_SUBRED, isub2.SUBRED, isub2.SUBRED_ID
                           FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub2
                           WHERE isub2.ID_SUBRED = Pn_SubredPadreId )
                  LOOP
                  --
                    --
                    UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
                    SET ESTADO = Lv_EstadoParaCambiar
                    WHERE ID_SUBRED = Pn_SubredPadreId;
                    --
                    Pn_SubredPadreId := Le_SubredesPadres.SUBRED_ID;
                    --
                  --
                  END LOOP;
                  --
              --
              END LOOP;
              --
          --
          ELSIF Lv_EstadoParaBuscar = 'Ocupado' THEN
          --
              --
              UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
              SET ESTADO = Lv_EstadoParaCambiar
              WHERE ID_SUBRED = Pn_SubredInicialId;
              --
              --
              COMMIT;
              --
              --
              WHILE Pn_SubredPadreId > 0
              LOOP
              --
                  --
                  Pv_TieneHijos := 'N';
                  --
                  --
                  FOR Le_SubredesHijas IN ( SELECT isub3.ID_SUBRED, isub3.SUBRED, isub3.SUBRED_ID
                                                   FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub3
                                                   WHERE isub3.SUBRED_ID = Pn_SubredPadreId
                                                     AND isub3.ESTADO = Lv_EstadoParaBuscar )
                  LOOP
                  --
                      --
                      Pv_TieneHijos := 'S';
                      --
                      Pn_SubredPadreId := 0;
                      --
                  --
                  END LOOP;
                  --
                  --
                  IF Pv_TieneHijos = 'N' THEN
                  --
                      --
                      UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
                      SET ESTADO = Lv_EstadoParaCambiar
                      WHERE ID_SUBRED = Pn_SubredPadreId;
                      --
                      --
                      COMMIT;
                      --
                      --
                      SELECT NVL (
                                    (
                                        SELECT isub.SUBRED_ID
                                        FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub
                                        WHERE isub.ID_SUBRED = Pn_SubredPadreId
                                          AND isub.ESTADO = Lv_EstadoParaCambiar
                                    ),
                                    0
                                 ) INTO Pn_SubredPadreId FROM DUAL;
                      --
                  --
                  END IF;
                  --
              --
              END LOOP;
              --
              --
          --
          END IF;
          --
          --
          WHILE Pn_SubredInicialId > 0
          LOOP
          --
              --
              Pv_TieneHijos := 'N';
              --
              --
              FOR Le_SubredesActivasHijas IN ( SELECT isub3.ID_SUBRED, isub3.SUBRED, isub3.SUBRED_ID
                                               FROM DB_INFRAESTRUCTURA.INFO_SUBRED isub3
                                               WHERE isub3.SUBRED_ID = Pn_SubredInicialId
                                                 AND isub3.ESTADO = Lv_EstadoParaBuscar )
              LOOP
              --
                  --
                  Pv_TieneHijos := 'S';
                  --
                  Pn_SubredInicialId := Le_SubredesActivasHijas.ID_SUBRED;
                  --
              --
              END LOOP;
              --
              --
              IF Pv_TieneHijos = 'N' THEN
              --
                  --
                  UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
                  SET ESTADO = Lv_EstadoParaCambiar
                  WHERE ID_SUBRED = Pn_SubredInicialId;
                  --
                  --
                  IF Pn_SubredInicialId <> Pn_SubredEncontradaId THEN
                  --
                      Pn_SubredInicialId := Pn_SubredEncontradaId;
                  --
                  ELSE
                  --
                      Pn_SubredInicialId := 0;
                  --
                  END IF;
                  --
              --
              END IF;
              --
          --
          END LOOP;
          --
      --
      END LOOP;
      --
      --
      COMMIT;
      --
      --
  --
  END IF;
  --
--
EXCEPTION
WHEN OTHERS THEN
--
  --
  ROLLBACK;
  Lv_MensaError := SQLERRM || '.<br> Error en INFRK_TRANSACCIONES.INFRP_SUBNETING ';
  --
--
END INFRP_SUBNETING;
--

PROCEDURE INSERT_PROCESO_MASIVO_CAB(
    Pr_InfoProcesoMasivoCab      IN INFO_PROCESO_MASIVO_CAB%ROWTYPE,
    Pn_IdInfoProcesoMasivoCab   OUT INFO_PROCESO_MASIVO_CAB.ID_PROCESO_MASIVO_CAB%TYPE,
    Pv_MsnError                 OUT VARCHAR2)
IS
  --
BEGIN
  --
  Pn_IdInfoProcesoMasivoCab := SEQ_INFO_PROCESO_MASIVO_CAB.NEXTVAL;
  --
  INSERT
  INTO INFO_PROCESO_MASIVO_CAB
    (
      ID_PROCESO_MASIVO_CAB,
      TIPO_PROCESO,
      EMPRESA_ID,
      CANAL_PAGO_LINEA_ID,
      CANTIDAD_PUNTOS,
      CANTIDAD_SERVICIOS,
      FACTURAS_RECURRENTES,
      FECHA_EMISION_FACTURA,
      FECHA_CORTE_DESDE,
      FECHA_CORTE_HASTA,
      VALOR_DEUDA,
      FORMA_PAGO_ID,
      IDS_BANCOS_TARJETAS,
      IDS_OFICINAS,
      ESTADO,
      FE_CREACION,
      FE_ULT_MOD,
      USR_CREACION,
      USR_ULT_MOD,
      IP_CREACION,
      PLAN_ID,
      PLAN_VALOR,
      PAGO_ID,
      PAGO_LINEA_ID,
      RECAUDACION_ID,
      DEBITO_ID,
      ELEMENTO_ID,
      SOLICITUD_ID
    )
    VALUES
    (
      Pn_IdInfoProcesoMasivoCab,
      Pr_InfoProcesoMasivoCab.TIPO_PROCESO,
      Pr_InfoProcesoMasivoCab.EMPRESA_ID,
      Pr_InfoProcesoMasivoCab.CANAL_PAGO_LINEA_ID,
      Pr_InfoProcesoMasivoCab.CANTIDAD_PUNTOS,
      Pr_InfoProcesoMasivoCab.CANTIDAD_SERVICIOS,
      Pr_InfoProcesoMasivoCab.FACTURAS_RECURRENTES,
      Pr_InfoProcesoMasivoCab.FECHA_EMISION_FACTURA,
      Pr_InfoProcesoMasivoCab.FECHA_CORTE_DESDE,
      Pr_InfoProcesoMasivoCab.FECHA_CORTE_HASTA,
      Pr_InfoProcesoMasivoCab.VALOR_DEUDA,
      Pr_InfoProcesoMasivoCab.FORMA_PAGO_ID,
      Pr_InfoProcesoMasivoCab.IDS_BANCOS_TARJETAS,
      Pr_InfoProcesoMasivoCab.IDS_OFICINAS,
      Pr_InfoProcesoMasivoCab.ESTADO,
      Pr_InfoProcesoMasivoCab.FE_CREACION,
      Pr_InfoProcesoMasivoCab.FE_ULT_MOD,
      Pr_InfoProcesoMasivoCab.USR_CREACION,
      Pr_InfoProcesoMasivoCab.USR_ULT_MOD,
      Pr_InfoProcesoMasivoCab.IP_CREACION,
      Pr_InfoProcesoMasivoCab.PLAN_ID,
      Pr_InfoProcesoMasivoCab.PLAN_VALOR,
      Pr_InfoProcesoMasivoCab.PAGO_ID,
      Pr_InfoProcesoMasivoCab.PAGO_LINEA_ID,
      Pr_InfoProcesoMasivoCab.RECAUDACION_ID,
      Pr_InfoProcesoMasivoCab.DEBITO_ID,
      Pr_InfoProcesoMasivoCab.ELEMENTO_ID,
      Pr_InfoProcesoMasivoCab.SOLICITUD_ID
    );
  --
EXCEPTION
WHEN OTHERS THEN
  --
  Pn_IdInfoProcesoMasivoCab := 0;
  Pv_MsnError               := SQLERRM;
  --
  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('CANCELACION_MASIVA_MD', 
                                       'INFRK_TRANSACCIONES.INSERT_PROCESO_MASIVO_CAB', 
                                       Pv_MsnError, 
                                       NVL(SYS_CONTEXT('USERENV','HOST'), USER), 
                                       SYSDATE, 
                                       NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1'));
  --
END INSERT_PROCESO_MASIVO_CAB;
--
PROCEDURE INSERT_PROCESO_MASIVO_DET(
    Pr_InfoProcesoMasivoDet    IN INFO_PROCESO_MASIVO_DET%ROWTYPE,
    Pn_IdInfoProcesoMasivoDet OUT INFO_PROCESO_MASIVO_DET.ID_PROCESO_MASIVO_DET%TYPE,
    Pv_MsnError               OUT VARCHAR2)
IS
  --
BEGIN
  --
  Pn_IdInfoProcesoMasivoDet := SEQ_INFO_PROCESO_MASIVO_DET.NEXTVAL;
  --
  INSERT
  INTO INFO_PROCESO_MASIVO_DET
    (
      ID_PROCESO_MASIVO_DET,
      PROCESO_MASIVO_CAB_ID,
      PUNTO_ID,
      ESTADO,
      FE_CREACION,
      FE_ULT_MOD,
      USR_CREACION,
      USR_ULT_MOD,
      IP_CREACION,
      SERVICIO_ID,
      OBSERVACION,
      SOLICITUD_ID
    )
    VALUES
    (
      Pn_IdInfoProcesoMasivoDet,
      Pr_InfoProcesoMasivoDet.PROCESO_MASIVO_CAB_ID,
      Pr_InfoProcesoMasivoDet.PUNTO_ID,
      Pr_InfoProcesoMasivoDet.ESTADO,
      Pr_InfoProcesoMasivoDet.FE_CREACION,
      Pr_InfoProcesoMasivoDet.FE_ULT_MOD,
      Pr_InfoProcesoMasivoDet.USR_CREACION,
      Pr_InfoProcesoMasivoDet.USR_ULT_MOD,
      Pr_InfoProcesoMasivoDet.IP_CREACION,
      Pr_InfoProcesoMasivoDet.SERVICIO_ID,
      Pr_InfoProcesoMasivoDet.OBSERVACION,
      Pr_InfoProcesoMasivoDet.SOLICITUD_ID
    );
  --
EXCEPTION
WHEN OTHERS THEN
  --
  Pn_IdInfoProcesoMasivoDet := 0;
  Pv_MsnError               := SQLERRM;
  --
  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('CANCELACION_MASIVA_MD', 
                                       'INFRK_TRANSACCIONES.INSERT_PROCESO_MASIVO_DET', 
                                       Pv_MsnError, 
                                       NVL(SYS_CONTEXT('USERENV','HOST'), USER), 
                                       SYSDATE, 
                                       NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1'));
  --
END INSERT_PROCESO_MASIVO_DET;
--
PROCEDURE CANCELACION_MASIVA_MD
IS
  --
  CURSOR C_GetServiciosACancelar
  IS
    SELECT ISR.ID_SERVICIO,
        ISR.PLAN_ID,
        ISR.PRODUCTO_ID,
        ISR.PUNTO_ID,
        ISR.USR_CREACION,
        ISR.ESTADO
      FROM DB_COMERCIAL.INFO_SERVICIO ISR
	  INNER JOIN DB_COMERCIAL.INFO_PUNTO IP
	  ON IP.ID_PUNTO                                                      = ISR.PUNTO_ID
	  INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
	  ON IPER.ID_PERSONA_ROL                                              = IP.PERSONA_EMPRESA_ROL_ID
	  INNER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER
	  ON IER.ID_EMPRESA_ROL                                               = IPER.EMPRESA_ROL_ID
	  INNER JOIN DB_COMERCIAL.ADMI_ROL AR
	  ON AR.ID_ROL                                                        = IER.ROL_ID
	  INNER JOIN DB_COMERCIAL.ADMI_TIPO_ROL ATR
	  ON ATR.ID_TIPO_ROL                                                  = AR.TIPO_ROL_ID
	  INNER JOIN DB_COMERCIAL.INFO_SERVICIO_CARACTERISTICA SERVICIO_CARACT_IN_CORTE
	  ON SERVICIO_CARACT_IN_CORTE.SERVICIO_ID = ISR.ID_SERVICIO
	  INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT_HISTO_IN_CORTE
	  ON CARACT_HISTO_IN_CORTE.ID_CARACTERISTICA = SERVICIO_CARACT_IN_CORTE.CARACTERISTICA_ID
	  INNER JOIN DB_COMERCIAL.INFO_SERVICIO_HISTORIAL SERVICIO_HISTO_IN_CORTE
	  ON SERVICIO_HISTO_IN_CORTE.ID_SERVICIO_HISTORIAL = COALESCE(TO_NUMBER(REGEXP_SUBSTR(SERVICIO_CARACT_IN_CORTE.VALOR,'^\d+')),0)
      WHERE DB_COMERCIAL.GET_ID_SERVICIO_PREF(PUNTO_ID)                    = ISR.ID_SERVICIO
      AND SERVICIO_CARACT_IN_CORTE.ESTADO = 'Activo'
      AND CARACT_HISTO_IN_CORTE.DESCRIPCION_CARACTERISTICA = 'ID_ULTIMO_HISTO_IN_CORTE'
      AND CARACT_HISTO_IN_CORTE.ESTADO = 'Activo'
      AND AR.DESCRIPCION_ROL                                               = 'Cliente'
      AND ATR.DESCRIPCION_TIPO_ROL                                         = 'Cliente'
      AND DB_FINANCIERO.FNCK_CONSULTS.F_GET_PREFIJO_BY_PUNTO(PUNTO_ID, '') = 'MD'
      AND ISR.ESTADO                                                      IN
        (SELECT APD.VALOR1
        FROM DB_GENERAL.ADMI_PARAMETRO_DET APD
        WHERE APD.PARAMETRO_ID =
          (SELECT ID_PARAMETRO
          FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC
          WHERE APC.NOMBRE_PARAMETRO = 'CANCELACION_MASIVA'
          AND APC.ESTADO             = 'Activo'
          )
        AND APD.VALOR2 = 'Estados'
        AND APD.VALOR3 = 'MD'
        AND APD.ESTADO = 'Activo'
        )
     AND SERVICIO_HISTO_IN_CORTE.ESTADO IN
        (SELECT APD.VALOR1   
        FROM DB_GENERAL.ADMI_PARAMETRO_DET APD   
        WHERE APD.PARAMETRO_ID =   
          (SELECT ID_PARAMETRO   
          FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC   
          WHERE APC.NOMBRE_PARAMETRO = 'CANCELACION_MASIVA'   
          AND APC.ESTADO             = 'Activo'   
          )   
        AND APD.VALOR2 = 'Estados'   
        AND APD.VALOR3 = 'MD'   
        AND APD.ESTADO = 'Activo'
        )
     AND (TO_NUMBER(EXTRACT(DAY FROM (SYSDATE - SERVICIO_HISTO_IN_CORTE.FE_CREACION)))) >=
        (SELECT NVL(TO_NUMBER(APD.VALOR1), 45)   
        FROM DB_GENERAL.ADMI_PARAMETRO_DET APD   
        WHERE APD.PARAMETRO_ID =   
          (SELECT ID_PARAMETRO   
          FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC   
          WHERE APC.NOMBRE_PARAMETRO = 'CANCELACION_MASIVA'   
          AND APC.ESTADO             = 'Activo'   
          )   
        AND APD.VALOR2 = 'Dias-In-Corte'   
        AND APD.VALOR3 = 'MD'   
        AND APD.ESTADO = 'Activo'   
        );
    --
    CURSOR C_GetParametros(Cv_NombreParametro ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE, Cv_EstadoCab ADMI_PARAMETRO_CAB.ESTADO%TYPE, Cv_Valor2 ADMI_PARAMETRO_DET.VALOR2%TYPE, Cv_Prefijo ADMI_PARAMETRO_DET.VALOR3%TYPE, Cv_EstadoDet ADMI_PARAMETRO_DET.ESTADO%TYPE)
    IS
      SELECT APD.VALOR1 VALOR
      FROM ADMI_PARAMETRO_DET APD
      WHERE APD.PARAMETRO_ID =
        (SELECT ID_PARAMETRO
        FROM ADMI_PARAMETRO_CAB APC
        WHERE APC.NOMBRE_PARAMETRO = Cv_NombreParametro
        AND APC.ESTADO             = Cv_EstadoCab
        )
    AND APD.VALOR2 = Cv_Valor2
    AND APD.VALOR3 = Cv_Prefijo
    AND APD.ESTADO = Cv_EstadoDet;
    --
    --
    Lr_GetParametros          C_GetParametros%ROWTYPE                            := NULL;
    Lv_CodEmpresa             NUMBER                                             := 18;
    Lv_Prefijo                VARCHAR2(2)                                        := 'MD';
    Lv_EstadoActivo           VARCHAR2(7)                                        := 'Activo';
    Lv_ProcesoCancelarCliente VARCHAR2(15)                                       := 'CancelarCliente';
    Lv_EstadoProcesando       VARCHAR2(11)                                       := 'Procesando';
    Lv_EstadoPendiente        VARCHAR2(9)                                        := 'Pendiente';
    Lv_Usuario                VARCHAR2(20)                                       := USER;
    Lv_Observacion            VARCHAR2(2000)                                     := 'Cancelacion por servicio en estado In-Corte';
    Ln_Count                  NUMBER                                             := 0;
    Lr_InfoProcesoMasivoCab   INFO_PROCESO_MASIVO_CAB%ROWTYPE                    := NULL;
    Ln_IdInfoProcesoMasivoCab INFO_PROCESO_MASIVO_CAB.ID_PROCESO_MASIVO_CAB%TYPE := 0;
    Lr_InfoProcesoMasivoDet   INFO_PROCESO_MASIVO_DET%ROWTYPE                    := NULL;
    Ln_IdInfoProcesoMasivoDet INFO_PROCESO_MASIVO_DET.ID_PROCESO_MASIVO_DET%TYPE := 0;
    Lv_MsnError VARCHAR2(2000)                                                   := '';
    Lr_GeneraNdiCancAdmi      C_GetParametros%ROWTYPE                            := NULL;
    Lv_MsnErrorNdiDiferido    VARCHAR2(2000)                                     := '';
    Lv_UserCancelacion        VARCHAR2(15)                                       := 'JOBCANCELMASIVA';
    --
  BEGIN
    --
    IF C_GetParametros%ISOPEN THEN
      --
      CLOSE C_GetParametros;
      --
    END IF;
    --Obtiene el estado de ejecucion del proceso
    OPEN C_GetParametros('CANCELACION_MASIVA', Lv_EstadoActivo, 'EstadoJob', Lv_Prefijo, Lv_EstadoActivo);
    --
    FETCH C_GetParametros INTO Lr_GetParametros;
    --
    CLOSE C_GetParametros;
    --Entra si el parametro tiene como valor Activo
    IF Lr_GetParametros.VALOR = Lv_EstadoActivo THEN
      --
      Lr_GetParametros := NULL;
      --
      --
      IF C_GetParametros%ISOPEN THEN
        --
        CLOSE C_GetParametros;
        --
      END IF;
      --Obtiene la observacion que se insertara en el detalle de procesos masivos
      OPEN C_GetParametros('CANCELACION_MASIVA', Lv_EstadoActivo, 'Observacion', Lv_Prefijo, Lv_EstadoActivo);
      --
      FETCH C_GetParametros INTO Lr_GetParametros;
      --
      CLOSE C_GetParametros;
      --Si encontro observacion se setea caso contrario inserta la que se declaro por default
      IF Lr_GetParametros.VALOR IS NOT NULL THEN
        --
        Lv_Observacion := Lr_GetParametros.VALOR;
        --
      END IF;
      --Itera los servicios segun los parametros configurados
      FOR I_GetServiciosACancelar IN C_GetServiciosACancelar
      LOOP
        --Entra cuando el contador es 0 para insertar la cabecera de procesos masivos
        IF Ln_Count = 0 THEN
          --
          Lr_InfoProcesoMasivoCab.TIPO_PROCESO := Lv_ProcesoCancelarCliente;
          Lr_InfoProcesoMasivoCab.EMPRESA_ID   := Lv_CodEmpresa;
          Lr_InfoProcesoMasivoCab.ESTADO       := Lv_EstadoProcesando;
          Lr_InfoProcesoMasivoCab.FE_CREACION  := SYSDATE;
          Lr_InfoProcesoMasivoCab.USR_CREACION := Lv_UserCancelacion;
          Lr_InfoProcesoMasivoCab.IP_CREACION  := NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1');
          --
          INFRK_TRANSACCIONES.INSERT_PROCESO_MASIVO_CAB(Lr_InfoProcesoMasivoCab, Ln_IdInfoProcesoMasivoCab, Lv_MsnError);
          --
        END IF;
        --Entra si el id de la cabecera es diferente de 0
        IF Ln_IdInfoProcesoMasivoCab <> 0 THEN
          --
          Lr_InfoProcesoMasivoDet.PROCESO_MASIVO_CAB_ID := Ln_IdInfoProcesoMasivoCab;
          Lr_InfoProcesoMasivoDet.PUNTO_ID              := I_GetServiciosACancelar.PUNTO_ID;
          Lr_InfoProcesoMasivoDet.ESTADO                := Lv_EstadoPendiente;
          Lr_InfoProcesoMasivoDet.FE_CREACION           := SYSDATE;
          Lr_InfoProcesoMasivoDet.USR_CREACION          := Lv_UserCancelacion;
          Lr_InfoProcesoMasivoDet.IP_CREACION           := NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1');
          Lr_InfoProcesoMasivoDet.SERVICIO_ID           := I_GetServiciosACancelar.ID_SERVICIO;
          Lr_InfoProcesoMasivoDet.OBSERVACION           := Lv_Observacion;
          --
          INFRK_TRANSACCIONES.INSERT_PROCESO_MASIVO_DET(Lr_InfoProcesoMasivoDet, Ln_IdInfoProcesoMasivoDet, Lv_MsnError);
          --Entra para hacer commmit si el id del detalle del proceso es diferente de 0
          IF Ln_IdInfoProcesoMasivoDet <> 0 THEN
            --
            COMMIT;
            --
            Ln_Count := Ln_Count + 1;
            --
          END IF;
          --
        END IF;
	--
	--Se genera NDI agrupadas por el proceso de Cancelacion Administrativa.
        BEGIN 

            --Se obtiene parametro para generar las NDI diferidas agrupadas en el proceso de Cancelacion Administrativa.
            OPEN C_GetParametros('CANCELACION_MASIVA', Lv_EstadoActivo, 'GeneraNdiAgrupada', Lv_Prefijo, Lv_EstadoActivo);
                FETCH C_GetParametros INTO Lr_GeneraNdiCancAdmi;
            CLOSE C_GetParametros;
            --
            IF Lr_GeneraNdiCancAdmi.VALOR = 'S' THEN

                DB_FINANCIERO.FNCK_PAGOS_DIFERIDOS.P_GENERAR_NDI_CANCELACION(I_GetServiciosACancelar.ID_SERVICIO, 
                                                                             Lv_CodEmpresa, 
                                                                             'CancelacionAdministrativa', 
                                                                             Lv_MsnErrorNdiDiferido); 

                IF Lv_MsnErrorNdiDiferido = 'ERROR' THEN
                    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('CANCELACION_MASIVA_MD', 
                                                         'FNCK_PAGOS_DIFERIDOS.P_GENERAR_NDI_CANCELACION', 
                                                         'El cliente no tiene NDI diferidas o existio un error en el proceso.' 
                                                         ||' ID_SERVICIO = '||I_GetServiciosACancelar.ID_SERVICIO,
                                                         Lv_UserCancelacion, 
                                                         SYSDATE, 
                                                         NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1'));
                END IF;
            END IF;

         EXCEPTION
          WHEN OTHERS THEN
            DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('CANCELACION_MASIVA_MD', 
                                                 'FNCK_PAGOS_DIFERIDOS.P_GENERAR_NDI_CANCELACION', 
                                                 SQLERRM, 
                                                 Lv_UserCancelacion, 
                                                 SYSDATE, 
                                                 NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1'));
        END;
        --
        --
      END LOOP;
      --Actualiza la cabecera con el total de servicios, que es igual al total de puntos, cuando el contador es diferente de 0
      IF Ln_Count <> 0 THEN
        --
        UPDATE INFO_PROCESO_MASIVO_CAB
        SET CANTIDAD_PUNTOS         = Ln_Count,
          CANTIDAD_SERVICIOS        = Ln_Count,
          ESTADO                    = Lv_EstadoPendiente
        WHERE ID_PROCESO_MASIVO_CAB = Ln_IdInfoProcesoMasivoCab;
        --
      END IF;
      --
    END IF;
    --
  EXCEPTION
  WHEN OTHERS THEN
    --
    ROLLBACk;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('CANCELACION_MASIVA_MD', 
                                         'INFRK_TRANSACCIONES.CANCELACION_MASIVA_MD', 
                                         SQLERRM, 
                                         Lv_UserCancelacion, 
                                         SYSDATE, 
                                         NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1'));
    --
  END CANCELACION_MASIVA_MD;
--
PROCEDURE P_REGULARIZA_CLIENTE_RADIO_TN(
    Pn_IdServicio     IN INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_NombreSw       IN INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE,
    Pv_InterfaceSw    IN INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO%TYPE,
    Pv_ValorModeloRbb IN ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
    Pv_ValorMacRbb    IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorIpRbb     IN INFO_IP.IP%TYPE,
    Pv_ValorSidRbb    IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorModeloRc  IN ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
    Pv_ValorMacRc     IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_ValorSidRc     IN INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE,
    Pv_Status         OUT VARCHAR2,
    Pv_MsnError       OUT VARCHAR2,
    Pv_MsnErrorBd     OUT VARCHAR2)
IS
  LN_ID_MODELO_INTERFACE     NUMBER ;
  LN_ID_UBICACION            NUMBER ;
  LN_ID_ELEMENTO_SWITCH      NUMBER ;
  LN_ID_INTERFACE_ELE_SWITCH NUMBER ;
  LN_ID_DETALLE_ELEMENTO_MAC NUMBER := 0;
  LN_ID_INTERFACE_ELE_RADIO  NUMBER ;
  LN_IDELEMENTO              NUMBER ;
  LN_PARROQUIA_ID            NUMBER ;
  LV_DIRECCION_UBICACION     VARCHAR2(150) := '';
  LN_ID_ELEMENTO_EXISTENTE   NUMBER;
  LN_CANT_ELEMENTO_EXISTENTE NUMBER;
  LV_NOMBRE_ELEMENTO_RADIO   VARCHAR2(100) := '';
  LF_LONGITUD_UBICACION      FLOAT;
  LF_LATITUD_UBICACION       FLOAT;
  LF_ALTURA_SNM              FLOAT;
  LV_ESTADO_REGISTRO         VARCHAR2(30)  := '';
  LV_MENSAJE_ERROR           VARCHAR2(100) := '';
  LV_NOMBRE_SW               VARCHAR2(100) := REPLACE(PV_NOMBRESW, '.telconet.net');
  LE_INFOELEMENTO            DB_INFRAESTRUCTURA.INFO_ELEMENTO%ROWTYPE;
  LE_INFOHISTORIALELEMENTO   DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE;
  LE_INFOUBICACION           DB_INFRAESTRUCTURA.INFO_UBICACION%ROWTYPE;
  LE_INFOIP                  DB_INFRAESTRUCTURA.INFO_IP%ROWTYPE;
  LE_INFOINTERFACEELEMENTO   DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO%ROWTYPE;
  LE_INFOEMPELEUBI           DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA%ROWTYPE;
  LE_INFOEMPELE              DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO%ROWTYPE;
  LE_INFODETALLE_ELEMENTO    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE;
  LE_INFOENLACE              DB_INFRAESTRUCTURA.INFO_ENLACE%ROWTYPE;
  LE_INFOSERVICIO            DB_COMERCIAL.INFO_SERVICIO%ROWTYPE;
  LV_RESULT                  VARCHAR2(3000) := '';
  LN_ID_INTER_ELE_ESP_RADIO  NUMBER ;
  LN_ID_INTER_ELE_ESP_RABACK NUMBER ;
  LN_ID_SERVICIO_CLI         NUMBER;
  LN_ID_SERVICIO_TEC_CLI     NUMBER;
  LN_ID_CPE_CLI              NUMBER;
  LN_ID_INT_CPE_CLI          NUMBER;
  LN_ID_ELE_RADIO_BCK        NUMBER;
--
 PROCEDURE P_INSERT_ELEMENTO
  (
    PR_INFOELEMENTO IN DB_INFRAESTRUCTURA.INFO_ELEMENTO%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.INFO_ELEMENTO VALUES PR_INFOELEMENTO;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO;
--
PROCEDURE P_INSERT_ELEMENTO_HISTORIAL
  (
    PR_INFOHISTORIALELEMENTO IN DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT
  INTO DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO VALUES PR_INFOHISTORIALELEMENTO;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_HISTORIAL;
--
PROCEDURE P_INSERT_ELEMENTO_DETALLE
  (
    PR_INFODETALLEELEMENTO IN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT
  INTO DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO VALUES PR_INFODETALLEELEMENTO;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_DETALLE;
--
PROCEDURE P_INSERT_ELEMENTO_IP
  (
    PR_INFOIP IN DB_INFRAESTRUCTURA.INFO_IP%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.INFO_IP VALUES PR_INFOIP;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_IP;
--
PROCEDURE P_INSERT_ELEMENTO_INTERFACE
  (
    PR_INFOINTERFACEELEMENTO IN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT
  INTO DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO VALUES PR_INFOINTERFACEELEMENTO;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_INTERFACE;
--
PROCEDURE P_INSERT_ELEMENTO_UBICACION
  (
    PR_INFOUBICACION IN DB_INFRAESTRUCTURA.INFO_UBICACION%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.INFO_UBICACION VALUES PR_INFOUBICACION;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_UBICACION;
--
PROCEDURE P_INSERT_ELEMENTO_EMPRESA_UBIC
  (
    PR_INFOEMPELEUBI IN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT
  INTO DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA VALUES PR_INFOEMPELEUBI;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_EMPRESA_UBIC;
--
PROCEDURE P_INSERT_ELEMENTO_EMPRESA
  (
    PR_INFOEMPELE IN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO VALUES PR_INFOEMPELE;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_EMPRESA;
--
PROCEDURE P_INSERT_ELEMENTO_ENLACE_SW
  (
    PR_INFOENLACE IN DB_INFRAESTRUCTURA.INFO_ENLACE%ROWTYPE,
    PV_RESULT OUT VARCHAR2
  )
IS
BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.INFO_ENLACE VALUES PR_INFOENLACE;
  PV_RESULT := 'SUCCESS';
EXCEPTION
WHEN OTHERS THEN
  PV_RESULT := SQLERRM;
END P_INSERT_ELEMENTO_ENLACE_SW;
--
BEGIN
  BEGIN
    SELECT SERVICIO.*
    INTO LE_INFOSERVICIO
    FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
    WHERE ID_SERVICIO= PN_IDSERVICIO;
  EXCEPTION
  WHEN OTHERS THEN
    LE_INFOSERVICIO := NULL;
  END;
  BEGIN
    --INICIO CREACION O RECUPERACION DE INFORMACI¿N DE RADIO DE BB
    SELECT DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO
    INTO LN_ID_MODELO_INTERFACE
    FROM DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO, DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO
    WHERE DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.TIPO_ELEMENTO_ID     = DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO
    AND DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO     = 'RADIO'
    AND DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO = PV_VALORMODELORBB
    AND DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ESTADO                 = 'Activo';
  EXCEPTION
  WHEN OTHERS THEN
    LN_ID_MODELO_INTERFACE := 0;
  END;
  --
  IF LN_ID_MODELO_INTERFACE > 0 THEN
    BEGIN
      LN_ID_ELEMENTO_EXISTENTE := 0;
      SELECT NVL(COUNT(1),0)
      INTO LN_ID_ELEMENTO_EXISTENTE
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO,
        DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
      WHERE DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ELEMENTO_ID    = DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO
      AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO LIKE 'AP-'
                                                                ||LV_NOMBRE_SW
                                                                ||'-'
                                                                ||'%'
                                                                ||PV_INTERFACESW
      AND DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_NOMBRE = 'MAC'
      AND DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_VALOR  = PV_VALORMACRBB;
    EXCEPTION
    WHEN OTHERS THEN
      LN_ID_ELEMENTO_EXISTENTE := 0;
    END;
    IF LN_ID_ELEMENTO_EXISTENTE   = 0 THEN
      LV_NOMBRE_ELEMENTO_RADIO   := '';
      LN_CANT_ELEMENTO_EXISTENTE := 0;
      BEGIN
        SELECT NVL(COUNT(1),0)
        INTO LN_CANT_ELEMENTO_EXISTENTE
        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
        WHERE DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO LIKE 'AP-'
          ||LV_NOMBRE_SW
          ||'-'
          ||'%'
          ||PV_INTERFACESW;
      EXCEPTION
      WHEN OTHERS THEN
        LN_CANT_ELEMENTO_EXISTENTE := 0;
      END;
      IF LN_CANT_ELEMENTO_EXISTENTE > 0 THEN
        LV_NOMBRE_ELEMENTO_RADIO  := 'AP-'||LV_NOMBRE_SW||'-'||TO_CHAR(LN_CANT_ELEMENTO_EXISTENTE+1)||'-'||PV_INTERFACESW;
      ELSE
        LV_NOMBRE_ELEMENTO_RADIO := 'AP-'||LV_NOMBRE_SW||'-'||PV_INTERFACESW;
      END IF;
      LV_RESULT                            := '';
      LE_INFOELEMENTO                      := NULL;
      LE_INFOELEMENTO.ID_ELEMENTO          := DB_INFRAESTRUCTURA.SEQ_INFO_ELEMENTO.NEXTVAL;
      LN_IDELEMENTO                        := LE_INFOELEMENTO.ID_ELEMENTO;
      LE_INFOELEMENTO.MODELO_ELEMENTO_ID   := LN_ID_MODELO_INTERFACE;
      LE_INFOELEMENTO.NOMBRE_ELEMENTO      := LV_NOMBRE_ELEMENTO_RADIO;
      LE_INFOELEMENTO.DESCRIPCION_ELEMENTO := LV_NOMBRE_ELEMENTO_RADIO || ' - [MIGRACION]';
      LE_INFOELEMENTO.USR_RESPONSABLE      := 'radio_regu';
      LE_INFOELEMENTO.USR_CREACION         := 'radio_regu';
      LE_INFOELEMENTO.FE_CREACION          := SYSDATE;
      LE_INFOELEMENTO.IP_CREACION          := '127.0.0.1';
      LE_INFOELEMENTO.ESTADO               := 'Activo';
      P_INSERT_ELEMENTO( LE_INFOELEMENTO, LV_RESULT);
      --
      IF LV_RESULT                                = 'SUCCESS' THEN
        LV_RESULT                                := '';
        LE_INFOHISTORIALELEMENTO                 := NULL;
        LE_INFOHISTORIALELEMENTO.ID_HISTORIAL    := DB_INFRAESTRUCTURA.SEQ_INFO_HISTORIAL_ELEMENTO.NEXTVAL;
        LE_INFOHISTORIALELEMENTO.ELEMENTO_ID     := LN_IDELEMENTO;
        LE_INFOHISTORIALELEMENTO.ESTADO_ELEMENTO := 'Activo';
        LE_INFOHISTORIALELEMENTO.CAPACIDAD       := NULL;
        LE_INFOHISTORIALELEMENTO.OBSERVACION     := 'Se creo el elemento';
        LE_INFOHISTORIALELEMENTO.USR_CREACION    := 'radio_regu';
        LE_INFOHISTORIALELEMENTO.FE_CREACION     := SYSDATE;
        LE_INFOHISTORIALELEMENTO.IP_CREACION     := '127.0.0.1';
        P_INSERT_ELEMENTO_HISTORIAL( LE_INFOHISTORIALELEMENTO, LV_RESULT);
        --
        IF LV_RESULT              = 'SUCCESS' THEN
          LV_RESULT              := '';
          LE_INFOIP              := NULL;
          LE_INFOIP.ID_IP        := DB_INFRAESTRUCTURA.SEQ_INFO_IP.NEXTVAL;
          LE_INFOIP.IP           := PV_VALORIPRBB;
          LE_INFOIP.ELEMENTO_ID  := LN_IDELEMENTO;
          LE_INFOIP.VERSION_IP   := 'IPV4';
          LE_INFOIP.ESTADO       := 'Activo';
          LE_INFOIP.USR_CREACION := 'radio_regu';
          LE_INFOIP.FE_CREACION  := SYSDATE;
          LE_INFOIP.IP_CREACION  := '127.0.0.1';
          P_INSERT_ELEMENTO_IP( LE_INFOIP, LV_RESULT);
          --
          IF LV_RESULT                                          = 'SUCCESS' THEN
            LN_ID_INTERFACE_ELE_RADIO                          := 0;
            LV_RESULT                                          := '';
            LE_INFOINTERFACEELEMENTO                           := NULL;
            LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO     := DB_INFRAESTRUCTURA.SEQ_INFO_INTERFACE_ELEMENTO.NEXTVAL;
            LN_ID_INTERFACE_ELE_RADIO                          := LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO;
            LE_INFOINTERFACEELEMENTO.NOMBRE_INTERFACE_ELEMENTO := 'wlan1';
            LE_INFOINTERFACEELEMENTO.ELEMENTO_ID               := LN_IDELEMENTO;
            LE_INFOINTERFACEELEMENTO.ESTADO                    := 'connected';
            LE_INFOINTERFACEELEMENTO.USR_CREACION              := 'radio_regu';
            LE_INFOINTERFACEELEMENTO.FE_CREACION               := SYSDATE;
            LE_INFOINTERFACEELEMENTO.IP_CREACION               := '127.0.0.1';
            P_INSERT_ELEMENTO_INTERFACE( LE_INFOINTERFACEELEMENTO, LV_RESULT);
            LE_INFOINTERFACEELEMENTO                           := NULL;
            LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO     := DB_INFRAESTRUCTURA.SEQ_INFO_INTERFACE_ELEMENTO.NEXTVAL;
            LE_INFOINTERFACEELEMENTO.NOMBRE_INTERFACE_ELEMENTO := 'esp1';
            LE_INFOINTERFACEELEMENTO.ELEMENTO_ID               := LN_IDELEMENTO;
            LE_INFOINTERFACEELEMENTO.ESTADO                    := 'not connect';
            LE_INFOINTERFACEELEMENTO.USR_CREACION              := 'radio_regu';
            LE_INFOINTERFACEELEMENTO.FE_CREACION               := SYSDATE;
            LE_INFOINTERFACEELEMENTO.IP_CREACION               := '127.0.0.1';
            P_INSERT_ELEMENTO_INTERFACE( LE_INFOINTERFACEELEMENTO, LV_RESULT);
            --
            IF LV_RESULT                  = 'SUCCESS' THEN
              LN_ID_ELEMENTO_SWITCH      := 0;
              LN_ID_INTERFACE_ELE_SWITCH := 0;
              LE_INFOUBICACION           := NULL;
              LN_PARROQUIA_ID            := 0;
              LV_DIRECCION_UBICACION     := '';
              LF_LONGITUD_UBICACION      := NULL;
              LF_LATITUD_UBICACION       := NULL;
              LF_ALTURA_SNM              := NULL;
              UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
              SET DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ESTADO                  = 'connected'
              WHERE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO =
                (SELECT INTERFACEELE.ID_INTERFACE_ELEMENTO
                FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO,
                  DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACEELE
                WHERE INTERFACEELE.ELEMENTO_ID                      = DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO
                AND INTERFACEELE.NOMBRE_INTERFACE_ELEMENTO          = PV_INTERFACESW
                AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO= PV_NOMBRESW
                AND ROWNUM                                         <= 1
                );
              BEGIN
                SELECT DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO,
                  DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO,
                  DB_INFRAESTRUCTURA.INFO_UBICACION.PARROQUIA_ID,
                  DB_INFRAESTRUCTURA.INFO_UBICACION.DIRECCION_UBICACION,
                  DB_INFRAESTRUCTURA.INFO_UBICACION.LONGITUD_UBICACION,
                  DB_INFRAESTRUCTURA.INFO_UBICACION.LATITUD_UBICACION,
                  DB_INFRAESTRUCTURA.INFO_UBICACION.ALTURA_SNM
                INTO LN_ID_ELEMENTO_SWITCH,
                  LN_ID_INTERFACE_ELE_SWITCH,
                  LN_PARROQUIA_ID,
                  LV_DIRECCION_UBICACION,
                  LF_LONGITUD_UBICACION,
                  LF_LATITUD_UBICACION,
                  LF_ALTURA_SNM
                FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO,
                  DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA ,
                  DB_INFRAESTRUCTURA.INFO_UBICACION,
                  DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
                WHERE DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO=PV_NOMBRESW
                AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO                         = DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA.ELEMENTO_ID
                AND DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA.UBICACION_ID          = DB_INFRAESTRUCTURA.INFO_UBICACION.ID_UBICACION
                AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO                         = DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
                AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ESTADO                              = 'Activo'
                AND DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA.EMPRESA_COD           = '10'
                AND DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO = PV_INTERFACESW
                AND DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ESTADO                    = 'connected'
                AND ROWNUM                                                              <= 1;
              EXCEPTION
              WHEN OTHERS THEN
                LN_ID_ELEMENTO_SWITCH := 0;
              END;
              IF LN_ID_ELEMENTO_SWITCH                > 0 THEN
                LV_RESULT                            := '';
                LN_ID_UBICACION                      := 0;
                LE_INFOUBICACION                     := NULL;
                LE_INFOUBICACION.ID_UBICACION        := DB_INFRAESTRUCTURA.SEQ_INFO_UBICACION.NEXTVAL;
                LN_ID_UBICACION                      := LE_INFOUBICACION.ID_UBICACION;
                LE_INFOUBICACION.PARROQUIA_ID        := LN_PARROQUIA_ID;
                LE_INFOUBICACION.DIRECCION_UBICACION := LV_DIRECCION_UBICACION;
                LE_INFOUBICACION.LONGITUD_UBICACION  := LF_LONGITUD_UBICACION;
                LE_INFOUBICACION.LATITUD_UBICACION   := LF_LATITUD_UBICACION;
                LE_INFOUBICACION.ALTURA_SNM          := LF_ALTURA_SNM;
                LE_INFOUBICACION.USR_CREACION        := 'radio_regu';
                LE_INFOUBICACION.FE_CREACION         := SYSDATE;
                LE_INFOUBICACION.IP_CREACION         := '127.0.0.1';
                P_INSERT_ELEMENTO_UBICACION( LE_INFOUBICACION, LV_RESULT);
                --
                IF LV_RESULT                                      = 'SUCCESS' THEN
                  LV_RESULT                                      := '';
                  LE_INFOEMPELEUBI                               := NULL;
                  LE_INFOEMPELEUBI.ID_EMPRESA_ELEMENTO_UBICACION := DB_INFRAESTRUCTURA.SEQ_INFO_EMPRESA_ELEMENTO_UBI.NEXTVAL;
                  LE_INFOEMPELEUBI.EMPRESA_COD                   := '10';
                  LE_INFOEMPELEUBI.ELEMENTO_ID                   := LN_IDELEMENTO;
                  LE_INFOEMPELEUBI.UBICACION_ID                  := LN_ID_UBICACION;
                  LE_INFOEMPELEUBI.USR_CREACION                  := 'radio_regu';
                  LE_INFOEMPELEUBI.FE_CREACION                   := SYSDATE;
                  LE_INFOEMPELEUBI.IP_CREACION                   := '127.0.0.1';
                  P_INSERT_ELEMENTO_EMPRESA_UBIC( LE_INFOEMPELEUBI, LV_RESULT);
                  --
                  IF LV_RESULT                         = 'SUCCESS' THEN
                    LV_RESULT                         := '';
                    LE_INFOEMPELE                     := NULL;
                    LE_INFOEMPELE.ID_EMPRESA_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_EMPRESA_ELEMENTO.NEXTVAL;
                    LE_INFOEMPELE.EMPRESA_COD         := '10';
                    LE_INFOEMPELE.ELEMENTO_ID         := LN_IDELEMENTO;
                    LE_INFOEMPELE.OBSERVACION         := '';
                    LE_INFOEMPELE.ESTADO              := 'Activo';
                    LE_INFOEMPELE.USR_CREACION        := 'radio_regu';
                    LE_INFOEMPELE.FE_CREACION         := SYSDATE;
                    LE_INFOEMPELE.IP_CREACION         := '127.0.0.1';
                    P_INSERT_ELEMENTO_EMPRESA( LE_INFOEMPELE, LV_RESULT);
                    --
                    IF LV_RESULT                                   = 'SUCCESS' THEN
                      LV_RESULT                                   := '';
                      LE_INFODETALLE_ELEMENTO                     := NULL;
                      LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                      LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                      LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'TIPO ELEMENTO RED';
                      LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := 'BACKBONE';
                      LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'TIPO ELEMENTO RED';
                      LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                      LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                      LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                      LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                      P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                      --
                      IF LV_RESULT                                   = 'SUCCESS' THEN
                        LV_RESULT                                   := '';
                        LE_INFODETALLE_ELEMENTO                     := NULL;
                        LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                        LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                        LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'SID';
                        LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := PV_VALORSIDRBB;
                        LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'SID';
                        LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                        LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                        LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                        LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                        P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                        --
                        IF LV_RESULT                                   = 'SUCCESS' THEN
                          LV_RESULT                                   := '';
                          LE_INFODETALLE_ELEMENTO                     := NULL;
                          LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                          LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                          LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'MAC';
                          LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := PV_VALORMACRBB;
                          LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'MAC';
                          LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                          LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                          LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                          LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                          P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                          --
                          IF LV_RESULT                               = 'SUCCESS' THEN
                            LV_RESULT                               := '';
                            LE_INFOENLACE                           := NULL;
                            LE_INFOENLACE.ID_ENLACE                 := DB_INFRAESTRUCTURA.SEQ_INFO_ENLACE.NEXTVAL;
                            LE_INFOENLACE.INTERFACE_ELEMENTO_INI_ID := LN_ID_INTERFACE_ELE_SWITCH;
                            LE_INFOENLACE.INTERFACE_ELEMENTO_FIN_ID := LN_ID_INTERFACE_ELE_RADIO;
                            LE_INFOENLACE.TIPO_MEDIO_ID             := 1;
                            LE_INFOENLACE.TIPO_ENLACE               := 'PRINCIPAL';
                            LE_INFOENLACE.CAPACIDAD_INPUT           := 1;
                            LE_INFOENLACE.CAPACIDAD_OUTPUT          := 1;
                            LE_INFOENLACE.UNIDAD_MEDIDA_INPUT       := 'mbps';
                            LE_INFOENLACE.UNIDAD_MEDIDA_OUTPUT      := 'mbps';
                            LE_INFOENLACE.CAPACIDAD_INI_FIN         := 1;
                            LE_INFOENLACE.CAPACIDAD_FIN_INI         := 1;
                            LE_INFOENLACE.UNIDAD_MEDIDA_UP          := 'mbps';
                            LE_INFOENLACE.UNIDAD_MEDIDA_DOWN        := 'mbps';
                            LE_INFOENLACE.ESTADO                    := 'Activo';
                            LE_INFOENLACE.USR_CREACION              := 'radio_regu';
                            LE_INFOENLACE.FE_CREACION               := SYSDATE;
                            LE_INFOENLACE.IP_CREACION               := '127.0.0.1';
                            P_INSERT_ELEMENTO_ENLACE_SW( LE_INFOENLACE, LV_RESULT);
                            --
                            IF LV_RESULT     = 'SUCCESS' THEN
                              PV_STATUS     := 'SUCCESS';
                              PV_MSNERROR   := 'OK';
                              PV_MSNERRORBD := '';
                            ELSE
                              PV_STATUS     := 'ERROR';
                              PV_MSNERROR   := 'Fall¿ al insertar enlace de elemento.';
                              PV_MSNERRORBD := LV_RESULT;
                            END IF;
                          ELSE
                            PV_STATUS     := 'ERROR';
                            PV_MSNERROR   := 'Fall¿ al insertar mac del elemento.';
                            PV_MSNERRORBD := LV_RESULT;
                          END IF;
                        ELSE
                          PV_STATUS     := 'ERROR';
                          PV_MSNERROR   := 'Fall¿ al insertar sid del elemento.';
                          PV_MSNERRORBD := LV_RESULT;
                        END IF;
                      ELSE
                        PV_STATUS     := 'ERROR';
                        PV_MSNERROR   := 'Fall¿ al insertar tipo de red de elemento.';
                        PV_MSNERRORBD := LV_RESULT;
                      END IF;
                    ELSE
                      PV_STATUS     := 'ERROR';
                      PV_MSNERROR   := 'Fall¿ al insertar interface del elemento.';
                      PV_MSNERRORBD := LV_RESULT;
                    END IF;
                  ELSE
                    PV_STATUS     := 'ERROR';
                    PV_MSNERROR   := 'Fall¿ al insertar informaci¿n de ubicacion del elemento con la empresa.';
                    PV_MSNERRORBD := LV_RESULT;
                  END IF;
                ELSE
                  PV_STATUS     := 'ERROR';
                  PV_MSNERROR   := 'Fall¿ al insertar informaci¿n de ubicacion del elemento.';
                  PV_MSNERRORBD := LV_RESULT;
                END IF;
              ELSE
                PV_STATUS   := 'ERROR';
                PV_MSNERROR := 'Fall¿ al recuperar informaci¿n de ubicacion e interface del servicio';
              END IF;
            ELSE
              PV_STATUS     := 'ERROR';
              PV_MSNERROR   := 'Fall¿ al insertar interface de elemento.';
              PV_MSNERRORBD := LV_RESULT;
            END IF;
          ELSE
            PV_STATUS     := 'ERROR';
            PV_MSNERROR   := 'Fall¿ al insertar ip del elemento.';
            PV_MSNERRORBD := LV_RESULT;
          END IF;
        ELSE
          PV_STATUS     := 'ERROR';
          PV_MSNERROR   := 'Fall¿ al insertar historial del elemento.';
          PV_MSNERRORBD := LV_RESULT;
        END IF;
      ELSE
        PV_STATUS     := 'ERROR';
        PV_MSNERROR   := 'Fall¿ al crear elemento.';
        PV_MSNERRORBD := LV_RESULT;
      END IF;
    ELSE
      PV_STATUS     := 'SUCCESS';
      PV_MSNERROR   := 'ELEMENTO YA EXISTENTE';
      PV_MSNERRORBD := '';
      --setear valores de radio bb ya existente
    END IF;
  ELSE
    PV_STATUS   := 'ERROR';
    PV_MSNERROR := 'Fall¿ al obtener modelo de la radio de backbone';
  END IF;
  --VALIDAR SUCCESS O ERROR
  IF PV_STATUS = 'SUCCESS' THEN
    COMMIT;
    --enceramiento de variables
    LN_ID_MODELO_INTERFACE     := NULL;
    LN_IDELEMENTO              := NULL;
    LN_ID_INTER_ELE_ESP_RABACK := NULL ;
    LV_RESULT                  := '';
    LN_ID_SERVICIO_CLI         := NULL;
    LN_ID_SERVICIO_TEC_CLI     := NULL;
    LN_ID_CPE_CLI              := NULL;
    LN_ID_INT_CPE_CLI          := NULL;
    LN_ID_ELE_RADIO_BCK        := NULL;
    BEGIN
      SELECT DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO,
        DB_COMERCIAL.INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO,
        DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID,
        DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID,
        (SELECT INT2.ELEMENTO_ID
        FROM DB_INFRAESTRUCTURA.INFO_ENLACE,
          DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INT2,
          DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE2,
          DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETELE2
        WHERE DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID=DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO
        AND INT2.ID_INTERFACE_ELEMENTO                                = DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_FIN_ID
        AND ELE2.ID_ELEMENTO                                          = INT2.ELEMENTO_ID
        AND DETELE2.ELEMENTO_ID                                       = ELE2.ID_ELEMENTO
        AND DB_INFRAESTRUCTURA.INFO_ENLACE.ESTADO                     = 'Activo'
        AND DETELE2.DETALLE_NOMBRE                                    = 'MAC'
        AND DETELE2.ESTADO                                            = 'Activo'
        AND DETELE2.DETALLE_VALOR                                     = PV_VALORMACRBB
        AND ROWNUM                                                   <= 1
        ) ID_ELEMENTO_RADIO_BASE
      INTO LN_ID_SERVICIO_CLI,
        LN_ID_SERVICIO_TEC_CLI,
        LN_ID_CPE_CLI,
        LN_ID_INT_CPE_CLI,
        LN_ID_ELE_RADIO_BCK
      FROM DB_COMERCIAL.INFO_SERVICIO,
        DB_COMERCIAL.INFO_SERVICIO_TECNICO,
        DB_INFRAESTRUCTURA.INFO_ELEMENTO,
        DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
      WHERE DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO                            = DB_COMERCIAL.INFO_SERVICIO_TECNICO.SERVICIO_ID
      AND DB_COMERCIAL.INFO_SERVICIO.LOGIN_AUX                                = LE_INFOSERVICIO.LOGIN_AUX
      AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO                        = DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_ID
      AND DB_COMERCIAL.INFO_SERVICIO_TECNICO.ULTIMA_MILLA_ID                  = 2
      AND DB_COMERCIAL.INFO_SERVICIO.ESTADO                                   IN ('Activo', 'In-Corte')
      AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO                    = PV_NOMBRESW
      AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO                        = DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
      AND DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO= PV_INTERFACESW ;
    EXCEPTION
    WHEN OTHERS THEN
      LN_ID_SERVICIO_CLI     := 0;
      LN_ID_SERVICIO_TEC_CLI := 0;
      LN_ID_CPE_CLI          := 0;
      LN_ID_INT_CPE_CLI      := 0;
      LN_ID_ELE_RADIO_BCK    := 0;
    END;
    IF LN_ID_ELE_RADIO_BCK > 0 THEN
      BEGIN
        SELECT DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO
        INTO LN_ID_MODELO_INTERFACE
        FROM DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO, DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO
        WHERE DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.TIPO_ELEMENTO_ID     = DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO
        AND DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO     = 'RADIO'
        AND DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO = PV_VALORMODELORC
        AND DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ESTADO                 = 'Activo';
      EXCEPTION
      WHEN OTHERS THEN
        LN_ID_MODELO_INTERFACE := 0;
      END;
      IF LN_ID_MODELO_INTERFACE > 0 THEN
        BEGIN
          SELECT DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO
          INTO LN_ID_DETALLE_ELEMENTO_MAC
          FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ,
            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
          WHERE DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ELEMENTO_ID  = DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO
          AND DB_INFRAESTRUCTURA.INFO_ELEMENTO.ESTADO                 = 'Activo'
          AND DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_NOMBRE = 'MAC'
          AND DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ESTADO         = 'Activo'
          AND DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_VALOR  = PV_VALORMACRC
          AND ROWNUM                                                 <= 1;
        EXCEPTION
        WHEN OTHERS THEN
          LN_ID_DETALLE_ELEMENTO_MAC := 0;
        END;
        IF LN_ID_DETALLE_ELEMENTO_MAC = 0 THEN
          -- crea radio cliente
          LV_RESULT                            := '';
          LE_INFOELEMENTO                      := NULL;
          LE_INFOELEMENTO.ID_ELEMENTO          := DB_INFRAESTRUCTURA.SEQ_INFO_ELEMENTO.NEXTVAL;
          LN_IDELEMENTO                        := LE_INFOELEMENTO.ID_ELEMENTO;
          LE_INFOELEMENTO.MODELO_ELEMENTO_ID   := LN_ID_MODELO_INTERFACE;
          LE_INFOELEMENTO.NOMBRE_ELEMENTO      := 'AP-'||LE_INFOSERVICIO.LOGIN_AUX||'-'||'CLI';
          LE_INFOELEMENTO.DESCRIPCION_ELEMENTO := LE_INFOSERVICIO.LOGIN_AUX || ' - [MIGRACION]';
          LE_INFOELEMENTO.USR_RESPONSABLE      := 'radio_regu';
          LE_INFOELEMENTO.USR_CREACION         := 'radio_regu';
          LE_INFOELEMENTO.FE_CREACION          := SYSDATE;
          LE_INFOELEMENTO.IP_CREACION          := '127.0.0.1';
          LE_INFOELEMENTO.ESTADO               := 'Activo';
          P_INSERT_ELEMENTO( LE_INFOELEMENTO, LV_RESULT);
          --
          IF LV_RESULT                                = 'SUCCESS' THEN
            LV_RESULT                                := '';
            LE_INFOHISTORIALELEMENTO                 := NULL;
            LE_INFOHISTORIALELEMENTO.ID_HISTORIAL    := DB_INFRAESTRUCTURA.SEQ_INFO_HISTORIAL_ELEMENTO.NEXTVAL;
            LE_INFOHISTORIALELEMENTO.ELEMENTO_ID     := LN_IDELEMENTO;
            LE_INFOHISTORIALELEMENTO.ESTADO_ELEMENTO := 'Activo';
            LE_INFOHISTORIALELEMENTO.CAPACIDAD       := NULL;
            LE_INFOHISTORIALELEMENTO.OBSERVACION     := 'Se creo el elemento cliente';
            LE_INFOHISTORIALELEMENTO.USR_CREACION    := 'radio_regu';
            LE_INFOHISTORIALELEMENTO.FE_CREACION     := SYSDATE;
            LE_INFOHISTORIALELEMENTO.IP_CREACION     := '127.0.0.1';
            P_INSERT_ELEMENTO_HISTORIAL( LE_INFOHISTORIALELEMENTO, LV_RESULT);
            --
            IF LV_RESULT                                          = 'SUCCESS' THEN
              LN_ID_INTERFACE_ELE_RADIO                          := 0;
              LN_ID_INTER_ELE_ESP_RADIO                          := 0;
              LV_RESULT                                          := '';
              LE_INFOINTERFACEELEMENTO                           := NULL;
              LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO     := DB_INFRAESTRUCTURA.SEQ_INFO_INTERFACE_ELEMENTO.NEXTVAL;
              LN_ID_INTERFACE_ELE_RADIO                          := LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO;
              LE_INFOINTERFACEELEMENTO.NOMBRE_INTERFACE_ELEMENTO := 'wlan1';
              LE_INFOINTERFACEELEMENTO.ELEMENTO_ID               := LN_IDELEMENTO;
              LE_INFOINTERFACEELEMENTO.ESTADO                    := 'connected';
              LE_INFOINTERFACEELEMENTO.USR_CREACION              := 'radio_regu';
              LE_INFOINTERFACEELEMENTO.FE_CREACION               := SYSDATE;
              LE_INFOINTERFACEELEMENTO.IP_CREACION               := '127.0.0.1';
              P_INSERT_ELEMENTO_INTERFACE( LE_INFOINTERFACEELEMENTO, LV_RESULT);
              LE_INFOINTERFACEELEMENTO                           := NULL;
              LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO     := DB_INFRAESTRUCTURA.SEQ_INFO_INTERFACE_ELEMENTO.NEXTVAL;
              LN_ID_INTER_ELE_ESP_RADIO                          := LE_INFOINTERFACEELEMENTO.ID_INTERFACE_ELEMENTO;
              LE_INFOINTERFACEELEMENTO.NOMBRE_INTERFACE_ELEMENTO := 'esp1';
              LE_INFOINTERFACEELEMENTO.ELEMENTO_ID               := LN_IDELEMENTO;
              LE_INFOINTERFACEELEMENTO.ESTADO                    := 'connected';
              LE_INFOINTERFACEELEMENTO.USR_CREACION              := 'radio_regu';
              LE_INFOINTERFACEELEMENTO.FE_CREACION               := SYSDATE;
              LE_INFOINTERFACEELEMENTO.IP_CREACION               := '127.0.0.1';
              P_INSERT_ELEMENTO_INTERFACE( LE_INFOINTERFACEELEMENTO, LV_RESULT);
              --
              IF LV_RESULT                                   = 'SUCCESS' THEN
                LV_RESULT                                   := '';
                LE_INFODETALLE_ELEMENTO                     := NULL;
                LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'TIPO ELEMENTO RED';
                LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := 'CLIENTE';
                LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'TIPO ELEMENTO RED';
                LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                --
                IF LV_RESULT                                   = 'SUCCESS' THEN
                  LV_RESULT                                   := '';
                  LE_INFODETALLE_ELEMENTO                     := NULL;
                  LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                  LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                  LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'SID';
                  LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := PV_VALORSIDRC;
                  LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'SID';
                  LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                  LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                  LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                  LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                  P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                  --
                  IF LV_RESULT                                   = 'SUCCESS' THEN
                    LV_RESULT                                   := '';
                    LE_INFODETALLE_ELEMENTO                     := NULL;
                    LE_INFODETALLE_ELEMENTO.ID_DETALLE_ELEMENTO := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                    LE_INFODETALLE_ELEMENTO.ELEMENTO_ID         := LN_IDELEMENTO;
                    LE_INFODETALLE_ELEMENTO.DETALLE_NOMBRE      := 'MAC';
                    LE_INFODETALLE_ELEMENTO.DETALLE_VALOR       := PV_VALORMACRC;
                    LE_INFODETALLE_ELEMENTO.DETALLE_DESCRIPCION := 'MAC';
                    LE_INFODETALLE_ELEMENTO.ESTADO              := 'Activo';
                    LE_INFODETALLE_ELEMENTO.USR_CREACION        := 'radio_regu';
                    LE_INFODETALLE_ELEMENTO.FE_CREACION         := SYSDATE;
                    LE_INFODETALLE_ELEMENTO.IP_CREACION         := '127.0.0.1';
                    P_INSERT_ELEMENTO_DETALLE( LE_INFODETALLE_ELEMENTO, LV_RESULT);
                    --
                    IF LV_RESULT = 'SUCCESS' THEN
                      BEGIN
                        SELECT DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO
                        INTO LN_ID_INTER_ELE_ESP_RABACK
                        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
                        WHERE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ELEMENTO_ID            = LN_ID_ELE_RADIO_BCK
                        AND DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO='esp1';
                      EXCEPTION
                      WHEN OTHERS THEN
                        LN_ID_INTER_ELE_ESP_RABACK := 0;
                      END;
                      IF LN_ID_INTER_ELE_ESP_RABACK              > 0 THEN
                        LV_RESULT                               := '';
                        LE_INFOENLACE                           := NULL;
                        LE_INFOENLACE.ID_ENLACE                 := DB_INFRAESTRUCTURA.SEQ_INFO_ENLACE.NEXTVAL;
                        LE_INFOENLACE.INTERFACE_ELEMENTO_INI_ID := LN_ID_INTER_ELE_ESP_RABACK;
                        LE_INFOENLACE.INTERFACE_ELEMENTO_FIN_ID := LN_ID_INTER_ELE_ESP_RADIO;
                        LE_INFOENLACE.TIPO_MEDIO_ID             := 1;
                        LE_INFOENLACE.TIPO_ENLACE               := 'PRINCIPAL';
                        LE_INFOENLACE.CAPACIDAD_INPUT           := 1;
                        LE_INFOENLACE.CAPACIDAD_OUTPUT          := 1;
                        LE_INFOENLACE.UNIDAD_MEDIDA_INPUT       := 'mbps';
                        LE_INFOENLACE.UNIDAD_MEDIDA_OUTPUT      := 'mbps';
                        LE_INFOENLACE.CAPACIDAD_INI_FIN         := 1;
                        LE_INFOENLACE.CAPACIDAD_FIN_INI         := 1;
                        LE_INFOENLACE.UNIDAD_MEDIDA_UP          := 'mbps';
                        LE_INFOENLACE.UNIDAD_MEDIDA_DOWN        := 'mbps';
                        LE_INFOENLACE.ESTADO                    := 'Activo';
                        LE_INFOENLACE.USR_CREACION              := 'radio_regu';
                        LE_INFOENLACE.FE_CREACION               := SYSDATE;
                        LE_INFOENLACE.IP_CREACION               := '127.0.0.1';
                        P_INSERT_ELEMENTO_ENLACE_SW( LE_INFOENLACE, LV_RESULT);
                        UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
                        SET DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ESTADO                  = 'connected'
                        WHERE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO = LN_ID_INTER_ELE_ESP_RABACK;
                      END IF;
                      LV_RESULT                               := '';
                      LE_INFOENLACE                           := NULL;
                      LE_INFOENLACE.ID_ENLACE                 := DB_INFRAESTRUCTURA.SEQ_INFO_ENLACE.NEXTVAL;
                      LE_INFOENLACE.INTERFACE_ELEMENTO_INI_ID := LN_ID_INTERFACE_ELE_RADIO;
                      LE_INFOENLACE.INTERFACE_ELEMENTO_FIN_ID := LN_ID_INT_CPE_CLI;
                      LE_INFOENLACE.TIPO_MEDIO_ID             := 1;
                      LE_INFOENLACE.TIPO_ENLACE               := 'PRINCIPAL';
                      LE_INFOENLACE.CAPACIDAD_INPUT           := 1;
                      LE_INFOENLACE.CAPACIDAD_OUTPUT          := 1;
                      LE_INFOENLACE.UNIDAD_MEDIDA_INPUT       := 'mbps';
                      LE_INFOENLACE.UNIDAD_MEDIDA_OUTPUT      := 'mbps';
                      LE_INFOENLACE.CAPACIDAD_INI_FIN         := 1;
                      LE_INFOENLACE.CAPACIDAD_FIN_INI         := 1;
                      LE_INFOENLACE.UNIDAD_MEDIDA_UP          := 'mbps';
                      LE_INFOENLACE.UNIDAD_MEDIDA_DOWN        := 'mbps';
                      LE_INFOENLACE.ESTADO                    := 'Activo';
                      LE_INFOENLACE.USR_CREACION              := 'radio_regu';
                      LE_INFOENLACE.FE_CREACION               := SYSDATE;
                      LE_INFOENLACE.IP_CREACION               := '127.0.0.1';
                      P_INSERT_ELEMENTO_ENLACE_SW( LE_INFOENLACE, LV_RESULT);
                      UPDATE DB_COMERCIAL.INFO_SERVICIO_TECNICO
                      SET DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CONECTOR_ID       = LN_ID_ELE_RADIO_BCK,
                        DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID          = LN_IDELEMENTO,
                        DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID= LN_ID_INTERFACE_ELE_RADIO
                      WHERE DB_COMERCIAL.INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO      = LN_ID_SERVICIO_TEC_CLI;
                      PV_STATUS                                                        := 'SUCCESS';
                      PV_MSNERROR                                                      := 'OK';
                    ELSE
                      PV_STATUS     := 'ERROR';
                      PV_MSNERROR   := 'Fall¿ al insertar la mac de radio del cliente.';
                      PV_MSNERRORBD := LV_RESULT;
                    END IF;
                  ELSE
                    PV_STATUS     := 'ERROR';
                    PV_MSNERROR   := 'Fall¿ al insertar el sid de la radio del cliente.';
                    PV_MSNERRORBD := LV_RESULT;
                  END IF;
                ELSE
                  PV_STATUS     := 'ERROR';
                  PV_MSNERROR   := 'Fall¿ al insertar el tipo de red de la radio del cliente.';
                  PV_MSNERRORBD := LV_RESULT;
                END IF;
              ELSE
                PV_STATUS     := 'ERROR';
                PV_MSNERROR   := 'Fall¿ al insertar las interface de la radio del cliente.';
                PV_MSNERRORBD := LV_RESULT;
              END IF;
            ELSE
              PV_STATUS     := 'ERROR';
              PV_MSNERROR   := 'Fall¿ al insertar el historial de la radio del cliente.';
              PV_MSNERRORBD := LV_RESULT;
            END IF;
          ELSE
            PV_STATUS     := 'ERROR';
            PV_MSNERROR   := 'Fall¿ al crear la radio del cliente.';
            PV_MSNERRORBD := LV_RESULT;
          END IF;
        ELSE
          PV_STATUS     := 'ERROR';
          PV_MSNERROR   := ' La mac del elemento radio ya se encuentra utilizada en otro elemento.';
          PV_MSNERRORBD := '';
        END IF;
      ELSE
        PV_STATUS     := 'ERROR';
        PV_MSNERROR   := 'Fall¿ al obtener el modelo de la radio de cliente';
        PV_MSNERRORBD := '';
      END IF;
    ELSE
      PV_STATUS     := 'ERROR';
      PV_MSNERROR   := 'No se encontro informaci¿n del cliente';
      PV_MSNERRORBD := '';
    END IF;
    --validar Status
    IF PV_STATUS = 'SUCCESS' THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
  ELSE
    ROLLBACK;
  END IF;
EXCEPTION
WHEN OTHERS THEN
  PV_STATUS     := 'ERROR';
  PV_MSNERROR   := 'Se presento un error no controlado, favor notificar a sistemas';
  PV_MSNERRORBD := SQLERRM||'.<br> Error en INFRK_TRANSACCIONES.P_REGULARIZA_CLIENTE_RADIO_TN ';
END P_REGULARIZA_CLIENTE_RADIO_TN;

PROCEDURE INFRP_CREAR_VLANS_EN_PE( Pv_IdElementoPe    IN  INFO_ELEMENTO.ID_ELEMENTO%TYPE,
                                   Pv_usuarioCreacion IN  VARCHAR2,
                                   Lv_MensaError      OUT VARCHAR2)
AS
--
    --   
    Pn_Contador       NUMBER;
--
BEGIN
--    
    FOR RANGOS IN
    (
        SELECT 
          DET.VALOR1,
          DET.VALOR2,
          DET.VALOR3
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
          DB_GENERAL.ADMI_PARAMETRO_DET DET
        WHERE CAB.NOMBRE_PARAMETRO = 'ANILLOS_MPLS'
        AND CAB.ID_PARAMETRO       = DET.PARAMETRO_ID
        AND DET.ESTADO             = 'Activo'
        AND CAB.ESTADO             = 'Activo'
        ORDER BY DET.DESCRIPCION ASC
    )
    LOOP

        --Se agregan las VLANs relacionada a cada anillo 0 al 4 en el PE
        FOR Pn_Contador IN RANGOS.VALOR1..RANGOS.VALOR2
           LOOP
               INSERT
                  INTO DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO VALUES
                    (
                      DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL,
                      Pv_IdElementoPe ,
                      'VLAN',
                      Pn_Contador,
                      'VLAN PE',
                      Pv_usuarioCreacion,
                      SYSDATE,
                      '127.0.0.1',
                      NULL,
                      'Activo'
                    );
        END LOOP;

        --Se agrega la VLAN relacionada a Internet MPLS para el PE
        INSERT
          INTO DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO VALUES
            (
              DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL,
              Pv_IdElementoPe ,
              'VLAN',
              RANGOS.VALOR3,
              'VLAN PE',
              Pv_usuarioCreacion,
              SYSDATE,
              '127.0.0.1',
              NULL,
              'Activo'
            );              

    END LOOP;

    COMMIT;

EXCEPTION
WHEN OTHERS THEN
--
    --
    ROLLBACK;
    --
    Lv_MensaError := SQLERRM || '.<br> Error en la Creaci¿n de las <b>VLANS</b> para el PE, notificar a Sistemas ';
    --
--
END INFRP_CREAR_VLANS_EN_PE;



PROCEDURE INFRP_OCUPA_SUBREDES( 
                                          Pn_IdSubred           IN INTEGER,
                                          Pn_IdSubredPadre      IN INTEGER,
                                          Pv_Uso                IN VARCHAR2,
                                          Lv_MensaError         OUT VARCHAR2 )
AS
    --
    Pn_IdSubredTmp        DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE;
    Pn_IdSubredPadreTmp   DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED_ID%TYPE;
    Pv_TieneHijos         VARCHAR(1);
    --
BEGIN
  Pn_IdSubredTmp      := Pn_IdSubred;
  Pn_IdSubredPadreTmp := Pn_IdSubredPadre;
  WHILE Pn_IdSubredPadreTmp > 0
  LOOP
  --
    --
    FOR Le_SubredesPadres IN ( SELECT subredPadre.ID_SUBRED, subredPadre.SUBRED, subredPadre.SUBRED_ID
                                FROM DB_INFRAESTRUCTURA.INFO_SUBRED subredPadre
                                WHERE subredPadre.ID_SUBRED = Pn_IdSubredPadreTmp )
    LOOP
      UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
      SET ESTADO = 'Ocupado'
      WHERE ID_SUBRED = Pn_IdSubredPadreTmp;
      Pn_IdSubredPadreTmp := Le_SubredesPadres.SUBRED_ID;
    END LOOP;
    --
  --
  END LOOP;

  WHILE Pn_IdSubredTmp > 0
  LOOP
  --
    --
    Pv_TieneHijos := 'N';
    --
    FOR Le_SubredesActivasHijas IN ( SELECT subredHija.ID_SUBRED, subredHija.SUBRED, subredHija.SUBRED_ID
                                     FROM DB_INFRAESTRUCTURA.INFO_SUBRED subredHija
                                     WHERE subredHija.SUBRED_ID = Pn_IdSubredTmp
                                       AND subredHija.ESTADO = 'Activo' )
    LOOP
    --
        --
        Pv_TieneHijos := 'S';
        --
        Pn_IdSubredTmp := Le_SubredesActivasHijas.ID_SUBRED;
        --
    --
    END LOOP;
    --
    --
    IF Pv_TieneHijos = 'N' THEN
    --
        --
        UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
        SET ESTADO = 'Ocupado'
        WHERE ID_SUBRED = Pn_IdSubredTmp;
        --
        --
        IF Pn_IdSubredTmp <> Pn_IdSubred THEN
        --
            Pn_IdSubredTmp := Pn_IdSubred;
        --
        ELSE
        --
            Pn_IdSubredTmp := 0;
        --
        END IF;
        --
    --
    END IF;
    --
  --
  END LOOP;
  --
  COMMIT;


EXCEPTION
WHEN OTHERS THEN
  --
  --
  ROLLBACK;
  --
  Lv_MensaError := SQLCODE || ' -ERROR- ' || SQLERRM;

  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.INFRP_OCUPA_SUBREDES', 
                                        Lv_MensaError, 
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  --
END INFRP_OCUPA_SUBREDES;

PROCEDURE INFRP_REGULA_REDES_Y_SUBREDES(
    Pv_PrefijoRed IN VARCHAR2,
    Pn_InicioRed  IN INTEGER,
    Pn_FinRed     IN INTEGER,
    Pv_PrimerOct  IN VARCHAR2,
    Pv_TercerOct  IN VARCHAR2,
    Pv_Uso        IN VARCHAR2,
    Lv_MensaError OUT VARCHAR2 )
AS
  --
  --
  Pn_InicioContador     NUMBER;
  Pn_FinContador        NUMBER;
  Pn_IpInicio           NUMBER;
  Pn_IpFin              NUMBER;
  Pn_Gateway            NUMBER;
  Pn_Mascara            NUMBER;
  Pn_IdSubredNueva      NUMBER;
  Pv_IpMascara          VARCHAR2(20);
  Pv_SubredABuscar      VARCHAR2(20);
  Pv_IpInicial          VARCHAR2(16);
  Pv_IpFinal            VARCHAR2(16);
  Pv_Gateway            VARCHAR2(20);
  Pn_Subred             NUMBER;
  Pn_ValorMascara       NUMBER;
  Pn_Anadir             NUMBER;
  Pn_RangoCInicial      NUMBER;
  Pn_RangoCFinal        NUMBER;
  Pn_Contador           NUMBER;
  Pv_SubredPadre        VARCHAR2(15);
  Pv_SubredPadreFinal   VARCHAR2(20);
  Pv_EstadoACambiar     VARCHAR2(10);
  Pv_MensaErrorAsignar  VARCHAR2(100);
  Pn_ContadorGrupos     NUMBER;
  Pn_IdSubredABuscar    NUMBER;
  Pn_IdSubredAsignar    NUMBER;
  Pn_IdSubredEncontrada NUMBER;
  Pn_IdIpUsada          NUMBER;
  /*
  * Esta variable verificar¿ que cada 2 iteraciones debe cambiarse la subred padre de la que proviene la subred que
  * se va a ingresar
  */
  Pn_Secuencia NUMBER;
  --
  --
  TYPE Mascaras IS VARRAY(7) OF NUMBER;
  --
  arrayMascaras Mascaras := Mascaras(24, 25, 26, 27, 28, 29, 30);
  --
  TYPE IpMascaras IS VARRAY(7) OF VARCHAR2(30);
  --
  arrayIpMascaras IpMascaras := IpMascaras('255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240', '255.255.255.248', '255.255.255.252');
  --
  TYPE Subredes IS VARRAY(7) OF NUMBER;
  --
  arraySubredes Subredes := Subredes(1, 2, 4, 8, 16, 32, 64);
  --
  TYPE CantidadIpPorSubRed IS VARRAY(7) OF NUMBER;
  --
  arrayCantidadIps CantidadIpPorSubRed := CantidadIpPorSubRed(255, 128, 64, 32, 16, 8, 4);
  CURSOR C_GetSubredABuscar(Cv_Subred DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED%TYPE)
  IS
    --
    SELECT ISUBRED.ID_SUBRED,
      ISUBRED.IP_FINAL,
      ISUBRED.RED_ID,
      ISUBRED.ESTADO,
      ISUBRED.ELEMENTO_ID,
      ISUBRED.NOTIFICACION,
      ISUBRED.IP_DISPONIBLE,
      ISUBRED.TIPO,
      ISUBRED.USO,
      ISUBRED.SUBRED_ID,
      ISUBRED.EMPRESA_COD,
      ISUBRED.PREFIJO_ID,
      ISUBRED.CANTON_ID,
      ISUBRED.VERSION_IP,
      ISUBRED.ANILLO
    FROM DB_INFRAESTRUCTURA.INFO_SUBRED ISUBRED
    WHERE ISUBRED.SUBRED = Cv_Subred
    AND ISUBRED.ESTADO  IN ('Activo','Ocupado')
    AND ISUBRED.USO      = 'DATOSMPLS';

  CURSOR C_GetSubredesOcupadasTmp
  IS
    --
    SELECT ISUBRED.ID_SUBRED, ISUBRED.SUBRED_ID
    FROM DB_INFRAESTRUCTURA.INFO_SUBRED ISUBRED
    WHERE ISUBRED.ESTADO = 'OcupadoTmp'
    AND ISUBRED.USO      = 'DATOSMPLS'
    ORDER BY ISUBRED.ID_SUBRED ASC;

  CURSOR C_GetIpsSubred(Cn_IdSubred DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE)
  IS
    --
    SELECT IIP.ID_IP
    FROM DB_INFRAESTRUCTURA.INFO_IP IIP
    WHERE IIP.SUBRED_ID = Cn_IdSubred;

  CURSOR C_GetVerificaIpsSubred(Cn_IdSubred DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE)
  IS
    --
    SELECT IIP.ID_IP
    FROM DB_INFRAESTRUCTURA.INFO_IP IIP
    WHERE IIP.SUBRED_ID = Cn_IdSubred
    AND IIP.ESTADO = 'Activo'
    AND ROWNUM = 1;

  Lr_GetSubredABuscar C_GetSubredABuscar%ROWTYPE;
--
BEGIN
  --
  --
  Pn_RangoCInicial := Pn_InicioRed;
  Pn_RangoCFinal   := Pn_FinRed;
  --Si el3er octeto es Nulo se crea la subred con el rango establecido
  IF Pv_TercerOct    IS NOT NULL THEN
    Pn_RangoCInicial := Pv_TercerOct;
    Pn_RangoCFinal   := Pv_TercerOct;
  END IF;
  --
  FOR i IN Pn_RangoCInicial..Pn_RangoCFinal
  LOOP
    --
    --
    FOR j IN 1..arrayMascaras.COUNT
    LOOP
      --
      --
      Pn_Mascara        := arrayMascaras(j);
      Pv_IpMascara      := arrayIpMascaras(j);
      Pn_InicioContador := 0;
      Pn_FinContador    := arraySubredes(j) - 1;
      Pn_Secuencia      := 0;
      Pn_ContadorGrupos := 0;
      Pn_IdSubredABuscar:= 0;
      --
      --
      FOR contador IN Pn_InicioContador..Pn_FinContador
      LOOP
        --
        --
        Pn_Gateway          := (contador  * arrayCantidadIps(j)) + 1;
        Pn_IpInicio         := (contador  * arrayCantidadIps(j)) + 2;
        Pn_IpFin            := (contador  * arrayCantidadIps(j)) + (arrayCantidadIps(j) - 2);
        Pv_SubredPadreFinal := '';
        --
        --
        IF Pn_Mascara > 24 THEN
          --
          --
          IF Pn_Secuencia = 0 THEN
            --
            --
            Pv_SubredPadre := '.'||(Pn_ContadorGrupos * arrayCantidadIps(j-1))||'/'||(arrayMascaras(j-1));
            --
            --
          END IF;
          --
          --
        END IF;
        --
        --
        IF Pn_Mascara = 24 THEN
          --
          --
          Pn_Subred := NULL;
          --
          --
        ELSE
          --
          --
          Pv_SubredPadreFinal := CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, Pv_SubredPadre))));
          SELECT isr.ID_SUBRED
          INTO Pn_Subred
          FROM DB_INFRAESTRUCTURA.INFO_SUBRED isr
          WHERE isr.SUBRED = Pv_SubredPadreFinal
          AND isr.ESTADO   IN ('Activo', 'OcupadoTmp')
          AND isr.USO      = 'DATOSMPLS';
          --
        END IF;
        --
        --
        Pn_Secuencia := Pn_Secuencia + 1;
        --
        --
        IF Pn_Secuencia = 2 THEN
          --
          --
          Pn_Secuencia      := 0;
          Pn_ContadorGrupos := Pn_ContadorGrupos + 1;
          --
          --
        END IF;
        --
        --
        Pv_SubredABuscar := CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.', CONCAT((Pn_Gateway-1), CONCAT('/', Pn_Mascara)))))));
        Pv_IpInicial     := CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.',Pn_IpInicio)))));
        Pv_IpFinal       := CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.',Pn_IpFin)))));
        Pv_Gateway       := CONCAT(CONCAT(Pv_PrimerOct,'.'), CONCAT(Pv_PrefijoRed, CONCAT('.', CONCAT(i, CONCAT('.',Pn_Gateway)))));
        Pn_IdSubredNueva := DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL;
        OPEN C_GetSubredABuscar(Pv_SubredABuscar);
        FETCH C_GetSubredABuscar INTO Lr_GetSubredABuscar;
        CLOSE C_GetSubredABuscar;
        IF(Lr_GetSubredABuscar.ID_SUBRED > 0) THEN
          Pn_IdIpUsada                  := 0;
          Pn_IdSubredABuscar            := Lr_GetSubredABuscar.ID_SUBRED;
          Pv_EstadoACambiar             := 'Activo';

          SELECT NVL (
                        (
                            SELECT IIP.ID_IP
                            FROM DB_INFRAESTRUCTURA.INFO_IP IIP
                            WHERE IIP.SUBRED_ID = Pn_IdSubredABuscar
                            AND IIP.ESTADO = 'Activo'
                            AND ROWNUM = 1
                        ),
                        0
                     ) INTO Pn_IdIpUsada FROM DUAL;

          IF (Lr_GetSubredABuscar.ESTADO = 'Ocupado' AND Pn_IdIpUsada > 0 ) THEN
            Pv_EstadoACambiar := 'OcupadoTmp';
          END IF;

          INSERT
          INTO DB_INFRAESTRUCTURA.INFO_SUBRED
            (
              ID_SUBRED,
              RED_ID,
              SUBRED,
              IP_INICIAL,
              IP_FINAL,
              ESTADO,
              ELEMENTO_ID,
              NOTIFICACION,
              IP_DISPONIBLE,
              FE_CREACION,
              USR_CREACION,
              IP_CREACION,
              MASCARA,
              GATEWAY,
              SUBRED_ID,
              EMPRESA_COD,
              TIPO,
              USO,
              PREFIJO_ID,
              CANTON_ID,
              VERSION_IP,
              ANILLO
            )
            VALUES
            (
              Pn_IdSubredNueva,
              Lr_GetSubredABuscar.RED_ID,
              Pv_SubredABuscar,
              Pv_IpInicial,
              Pv_IpFinal,
              Pv_EstadoACambiar,
              Lr_GetSubredABuscar.ELEMENTO_ID,
              Lr_GetSubredABuscar.NOTIFICACION,
              Lr_GetSubredABuscar.IP_DISPONIBLE,
              SYSDATE,
              'regula_telcos',
              '127.0.0.1',
              Pv_IpMascara,
              Pv_Gateway,
              Pn_Subred,
              Lr_GetSubredABuscar.EMPRESA_COD,
              Lr_GetSubredABuscar.TIPO,
              Lr_GetSubredABuscar.USO,
              Lr_GetSubredABuscar.PREFIJO_ID,
              Lr_GetSubredABuscar.CANTON_ID,
              Lr_GetSubredABuscar.VERSION_IP,
              Lr_GetSubredABuscar.ANILLO
            );
          FOR I_GetIpsSubred IN C_GetIpsSubred
          (
            Lr_GetSubredABuscar.ID_SUBRED
          )
          LOOP
            UPDATE DB_INFRAESTRUCTURA.INFO_IP
            SET SUBRED_ID = Pn_IdSubredNueva
            WHERE ID_IP   = I_GetIpsSubred.ID_IP;
          END LOOP;
          UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED
          SET ESTADO      = 'Eliminado'
          WHERE ID_SUBRED = Lr_GetSubredABuscar.ID_SUBRED;
        ELSE
          Pn_IdSubredABuscar := 0;
          INSERT
          INTO DB_INFRAESTRUCTURA.INFO_SUBRED
            (
              ID_SUBRED,
              SUBRED,
              IP_INICIAL,
              IP_FINAL,
              ESTADO,
              FE_CREACION,
              USR_CREACION,
              IP_CREACION,
              MASCARA,
              GATEWAY,
              SUBRED_ID,
              EMPRESA_COD,
              VERSION_IP,
              TIPO,
              USO
            )
            VALUES
            (
              Pn_IdSubredNueva,
              Pv_SubredABuscar,
              Pv_IpInicial,
              Pv_IpFinal,
              'Activo',
              SYSDATE,
              'regula_telcos',
              '127.0.0.1',
              Pv_IpMascara,
              Pv_Gateway,
              Pn_Subred,
              '10',
              'IPv4',
              'WAN',
              'DATOSMPLS'
            );
        END IF;
        --
        --
      END LOOP;
      --
      --
      COMMIT;
      --
      --
    END LOOP;
    --
    --
  END LOOP;
  --
  FOR I_GetSubredesOcupadasTmp IN C_GetSubredesOcupadasTmp
  LOOP
    Pv_MensaErrorAsignar := '';
    INFRK_TRANSACCIONES.INFRP_OCUPA_SUBREDES(
      Pn_IdSubred       => I_GetSubredesOcupadasTmp.ID_SUBRED,
      Pn_IdSubredPadre  => I_GetSubredesOcupadasTmp.SUBRED_ID,
      Pv_Uso            => 'DATOSMPLS',
      Lv_MensaError     => Pv_MensaErrorAsignar
    );
  END LOOP;

  Lv_MensaError := 'OK';
  --
EXCEPTION
WHEN OTHERS THEN
  --
  --
  ROLLBACK;
  --
  Lv_MensaError := SQLCODE || ' -ERROR- ' || SQLERRM;

  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.INFRP_REGULA_REDES_Y_SUBREDES', 
                                        Lv_MensaError, 
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  --
END INFRP_REGULA_REDES_Y_SUBREDES;

PROCEDURE P_LIBERA_RECURSOS_FACTIBILIDAD
AS
  --
  Lv_EstadoAnulado VARCHAR2(7) := 'Anulado'; 
  Lv_ObservacionServicio VARCHAR2(100) := 'Se anulo el servicio por liberacion de factibilidad'; 
  Lv_ObservacionSolicitud VARCHAR2(100) := 'Se anula solicitud por liberacion de factibilidad'; 
  Lv_MensajeError VARCHAR2(4000);
  Lv_StatusLiberacion VARCHAR2(5);
  Lv_InfoTecnica VARCHAR2(1000);
  Lr_RegServicioLiberaFactib INFRK_TRANSACCIONES.Lr_ServicioLiberaFactib;
  Lt_TServiciosLiberaFactib INFRK_TRANSACCIONES.Lt_ServiciosLiberaFactib;
  Lrf_ServiciosLiberaFactib SYS_REFCURSOR;
  Ln_TotalRegistros NUMBER := 0;
  Ln_IndxServiciosLiberaFactib NUMBER;
  Lv_Remitente VARCHAR2(100);
  Lv_AsuntoInicial VARCHAR2(300);
  Lv_Asunto VARCHAR2(300);
  Lv_AsuntoVendedor VARCHAR2(300) := 'Notificacion de Estado del Servicio';
  Lv_FechaArchivo VARCHAR2(20)   := TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
  Lv_NombreArchivo VARCHAR2(100) := '';
  Lv_NombreArchivoZip VARCHAR2(100) := '';
  Lv_PrefijoNombreArchivo VARCHAR2(100) := 'ReportesFactib_';
  Lv_Delimitador VARCHAR2(1) := ';'; 
  Lf_Archivo utl_file.file_type;
  Lv_Gzip VARCHAR2(100) := '';
  Lcl_PlantillaReporte CLOB;
  Lcl_PlantillaVendedorInicial CLOB;
  Lcl_PlantillaVendedor CLOB;
  Le_Exception EXCEPTION;
  Lr_ServicioHistorial DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
  Lr_DetalleSolHistorial DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
  Lv_SufijoCorreoVendedor VARCHAR2(20);
  Ln_IdPunto                DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE;
  Lr_AdmiTipoDocFinanciero  DB_FINANCIERO.ADMI_TIPO_DOCUMENTO_FINANCIERO%ROWTYPE;
  Lv_NombreMotivo           DB_GENERAL.ADMI_MOTIVO.NOMBRE_MOTIVO%TYPE:='Falta de pago de las facturas de instalaci¿n';
  Ln_IdMotivo               DB_GENERAL.ADMI_MOTIVO.ID_MOTIVO%TYPE;
  Lbool_Done                BOOLEAN;
  Ln_ValorTotal             DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_CAB.VALOR_TOTAL%TYPE;
  Lv_Observacion            VARCHAR2(3000);
  Ln_IdDocumentoNC          DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_CAB.ID_DOCUMENTO%TYPE;
  Lv_AplicaProceso          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR2%TYPE;
  Lv_PrefijoEmpresa         DB_COMERCIAL.INFO_EMPRESA_GRUPO.PREFIJO%TYPE;
  Lv_ObservacionHistorial  DB_FINANCIERO.INFO_DOCUMENTO_HISTORIAL.OBSERVACION%TYPE := 'Se aprueba la N/C autom¿ticamente: 
Por Liberaci¿n de Factibilidad';

  Lv_EstadoActivo                 VARCHAR2(7) := 'Activo';
  Lv_NombreParamDirBdArchivosTmp  VARCHAR2(33) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
  Lv_DirectorioBaseDatos          VARCHAR2(100);
  Lv_RutaDirectorioBaseDatos      VARCHAR2(500);
  Lv_NombreParamsServiciosMd      VARCHAR2(35) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
  Lv_NombreParamRemitenteYAsunto  VARCHAR2(41) := 'REMITENTES_Y_ASUNTOS_CORREOS_POR_PROCESO';
  Lv_ProcesoRemitenteYAsunto      VARCHAR2(30) := 'LIBERAR_RECURSOS_FACTIBILIDAD';

  CURSOR Lc_GetValoresParamsGeneral(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
  IS
    SELECT DET.VALOR1, DET.VALOR2
    FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
    INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
    ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
    WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
    AND CAB.ESTADO = Lv_EstadoActivo
    AND DET.ESTADO = Lv_EstadoActivo;

  CURSOR Lc_GetValorParamServiciosMd(   Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE,
                                        Cv_Valor1          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                        Cv_Valor2          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR2%TYPE)
  IS
    SELECT DET.VALOR3, DET.VALOR4
    FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
    INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
    ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
    WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
    AND CAB.ESTADO = Lv_EstadoActivo
    AND DET.VALOR1 = Cv_Valor1
    AND DET.VALOR2 = Cv_Valor2
    AND DET.ESTADO = Lv_EstadoActivo;

  CURSOR C_GetNombreMotivo(Cv_NombreMotivo DB_GENERAL.ADMI_MOTIVO.NOMBRE_MOTIVO%TYPE)
  IS
    SELECT ID_MOTIVO FROM DB_GENERAL.ADMI_MOTIVO
    WHERE NOMBRE_MOTIVO = Cv_NombreMotivo;

  CURSOR C_GetPuntoServicio(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
  IS
    SELECT PUNTO_ID FROM DB_COMERCIAL.INFO_SERVICIO
    WHERE ID_SERVICIO=Cn_IdServicio;

  --Costo: 51
  CURSOR C_GetFactContratFisicoDigital(Cn_IdPunto DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE,
                                      Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT OFI.EMPRESA_ID, IDFC.*
      FROM DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_CAB  IDFC,
      DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_DET IDFD, 
      DB_FINANCIERO.ADMI_TIPO_DOCUMENTO_FINANCIERO ATDF, 
      DB_FINANCIERO.INFO_DOCUMENTO_CARACTERISTICA IDCA, 
      DB_COMERCIAL.ADMI_CARACTERISTICA AC,
      DB_COMERCIAL.INFO_OFICINA_GRUPO OFI
      WHERE  
      IDFC.ID_DOCUMENTO                 = IDFD.DOCUMENTO_ID
      AND IDFC.TIPO_DOCUMENTO_ID        = ATDF.ID_TIPO_DOCUMENTO
      AND IDFC.ID_DOCUMENTO             = IDCA.DOCUMENTO_ID
      AND AC.ID_CARACTERISTICA          = IDCA.CARACTERISTICA_ID
      AND IDFC.OFICINA_ID               = OFI.ID_OFICINA
      AND AC.DESCRIPCION_CARACTERISTICA IN ('POR_CONTRATO_FISICO','POR_CONTRATO_DIGITAL') 
      AND IDCA.VALOR                    = 'S' 
      AND IDCA.ESTADO                   = 'Activo' 
      AND IDFC.PUNTO_ID                 = Cn_IdPunto 
      AND IDFD.SERVICIO_ID              = Cn_IdServicio 
      AND IDFC.ESTADO_IMPRESION_FACT    IN ('Activo','Cerrado')
      AND ATDF.CODIGO_TIPO_DOCUMENTO    IN ('FAC','FACP')
      AND NOT EXISTS (SELECT 1 
                      FROM DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_CAB NC,
                      DB_FINANCIERO.ADMI_TIPO_DOCUMENTO_FINANCIERO ATDNC
                      WHERE NC.REFERENCIA_DOCUMENTO_ID = IDFC.ID_DOCUMENTO
                      AND NC.TIPO_DOCUMENTO_ID         = ATDNC.ID_TIPO_DOCUMENTO
                      AND ATDNC.ESTADO                 = 'Activo' 
                      AND ATDNC.CODIGO_TIPO_DOCUMENTO  IN ('NC', 'NCI')
                      AND NC.ESTADO_IMPRESION_FACT     IN ('Activo','Pendiente') 
                      AND NC.PUNTO_ID                  = IDFC.PUNTO_ID                     
                      ) 
      ORDER BY IDFC.FE_CREACION;

  CURSOR C_GetParamsTiempoLiberaFactib
    IS
      SELECT APD.ID_PARAMETRO_DET,
          APD.DESCRIPCION AS PREFIJO_EMPRESA,
          APD.VALOR1 AS REGION,
          APD.VALOR2 AS CODIGO_ULTIMA_MILLA,
          APD.VALOR3 AS DIAS_LIBERA_FACTIB,
          APD.VALOR4 AS ALIAS_LIBERA_FACTIB,
          APD.EMPRESA_COD AS CODIGO_EMPRESA 
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET APD
      ON APD.PARAMETRO_ID = APC.ID_PARAMETRO
      WHERE APC.NOMBRE_PARAMETRO = 'TIEMPOS_Y_ALIAS_LIBERACION_FACTIBILIDAD'
        AND APC.ID_PARAMETRO       = APD.PARAMETRO_ID
        AND APD.ESTADO             = 'Activo'
        AND APC.ESTADO             = 'Activo';
  CURSOR C_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
  IS
    SELECT
      AP.PLANTILLA
    FROM
      DB_COMUNICACION.ADMI_PLANTILLA AP 
    WHERE
      AP.CODIGO = Cv_CodigoPlantilla
    AND AP.ESTADO <> 'Eliminado';

    Lr_RegGetValoresParamsGeneral   Lc_GetValoresParamsGeneral%ROWTYPE;
    Lr_RegGetValorParamServiciosMd  Lc_GetValorParamServiciosMd%ROWTYPE;
  BEGIN
    OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamDirBdArchivosTmp);
    FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
    CLOSE Lc_GetValoresParamsGeneral;
    Lv_DirectorioBaseDatos      := Lr_RegGetValoresParamsGeneral.VALOR1;
    IF Lv_DirectorioBaseDatos IS NULL THEN
      Lv_MensajeError := 'No se ha podido obtener el directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;
    Lv_RutaDirectorioBaseDatos  := Lr_RegGetValoresParamsGeneral.VALOR2;
    IF Lv_RutaDirectorioBaseDatos IS NULL THEN
      Lv_MensajeError := 'No se ha podido obtener la rura del directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;
    OPEN Lc_GetValorParamServiciosMd(Lv_NombreParamsServiciosMd, Lv_NombreParamRemitenteYAsunto, Lv_ProcesoRemitenteYAsunto);
    FETCH Lc_GetValorParamServiciosMd INTO Lr_RegGetValorParamServiciosMd;
    CLOSE Lc_GetValorParamServiciosMd;
    Lv_Remitente        := Lr_RegGetValorParamServiciosMd.VALOR3;
    Lv_AsuntoInicial    := Lr_RegGetValorParamServiciosMd.VALOR4;
    IF Lv_Remitente IS NULL OR Lv_AsuntoInicial IS NULL THEN
      Lv_MensajeError := 'No se ha podido obtener el remitente y/o el asunto del correo para el proceso de liberaci¿n de factibilidades';
      RAISE Le_Exception;
    END IF;

    IF C_GetPlantilla%ISOPEN THEN
      CLOSE C_GetPlantilla;
    END IF;
    OPEN C_GetPlantilla('LIBERA_FACTIB');
    FETCH C_GetPlantilla INTO Lcl_PlantillaReporte;
    CLOSE C_GetPlantilla;
    IF C_GetPlantilla%ISOPEN THEN
      CLOSE C_GetPlantilla;
    END IF;
    OPEN C_GetPlantilla('ANULASERVFACTIB');
    FETCH C_GetPlantilla INTO Lcl_PlantillaVendedorInicial;
    CLOSE C_GetPlantilla;

    FOR I_GetParamsTiempoLiberaFactib IN C_GetParamsTiempoLiberaFactib
    LOOP
      IF I_GetParamsTiempoLiberaFactib.CODIGO_EMPRESA IS NOT NULL AND I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA IS NOT NULL
        AND I_GetParamsTiempoLiberaFactib.REGION IS NOT NULL AND I_GetParamsTiempoLiberaFactib.CODIGO_ULTIMA_MILLA IS NOT NULL 
        AND I_GetParamsTiempoLiberaFactib.DIAS_LIBERA_FACTIB IS NOT NULL THEN
        IF I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA = 'TN' THEN
          Lv_SufijoCorreoVendedor := '@telconet.ec';
        ELSE
          Lv_SufijoCorreoVendedor := '@netlife.ec';
        END IF;

        Ln_TotalRegistros := 0;
        --Se obtiene el listado de servicios a liberarse
        Lrf_ServiciosLiberaFactib := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_SERVICIOS_LIBERA_FACTIB(I_GetParamsTiempoLiberaFactib.CODIGO_EMPRESA,
                                                                                                I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA,
                                                                                                I_GetParamsTiempoLiberaFactib.REGION,
                                                                                                I_GetParamsTiempoLiberaFactib.CODIGO_ULTIMA_MILLA,
                                                                                                I_GetParamsTiempoLiberaFactib.DIAS_LIBERA_FACTIB,
                                                                                                Ln_TotalRegistros );
        --Se verifica que existan servicios por liberarse por empresa, regi¿n y ¿ltima milla
        IF Ln_TotalRegistros > 0 THEN 
          Lv_NombreArchivo          := Lv_PrefijoNombreArchivo || I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA || '_' 
                                       || I_GetParamsTiempoLiberaFactib.REGION || '_' || I_GetParamsTiempoLiberaFactib.CODIGO_ULTIMA_MILLA || '_'
                                       || Lv_FechaArchivo || '.csv';
          Lv_NombreArchivoZip       := Lv_NombreArchivo || '.gz';
          Lv_Gzip                   := 'gzip ' || Lv_RutaDirectorioBaseDatos || Lv_NombreArchivo;
          Lv_Asunto                 := Lv_AsuntoInicial || ' ' 
                                       || I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA || ' - '
                                       || I_GetParamsTiempoLiberaFactib.REGION || ' - ' || I_GetParamsTiempoLiberaFactib.CODIGO_ULTIMA_MILLA;
          Lf_Archivo                := UTL_FILE.fopen(Lv_DirectorioBaseDatos,Lv_NombreArchivo,'w',3000);

          --Cabecera del archivo adjunto con la informaci¿n de los servicios cuyos recursos de factibilidad ser¿n liberados
          utl_file.put_line(Lf_Archivo,
                            'CLIENTE' || Lv_Delimitador 
                            ||'LOGIN' || Lv_Delimitador 
                            ||'JURISDICCION' || Lv_Delimitador
                            ||'CIUDAD' || Lv_Delimitador
                            ||'PRODUCTO/PLAN' || Lv_Delimitador
                            ||'VENDEDOR' || Lv_Delimitador
                            ||'AUTOMATICA' || Lv_Delimitador
                            ||'FECHA DE FACTIBILIDAD' || Lv_Delimitador
                            ||'DIAS FACTIBLE' || Lv_Delimitador
                            ||'ESTADO' || Lv_Delimitador);

          FETCH Lrf_ServiciosLiberaFactib BULK COLLECT INTO Lt_TServiciosLiberaFactib;
          FOR Ln_IndxServiciosLiberaFactib IN 1 .. Lt_TServiciosLiberaFactib.COUNT
          LOOP
            Lr_RegServicioLiberaFactib  := Lt_TServiciosLiberaFactib(Ln_IndxServiciosLiberaFactib);
            Lv_InfoTecnica              := '';

            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_LIBERA_FACTIB_SERVICIO(I_GetParamsTiempoLiberaFactib.PREFIJO_EMPRESA,
                                                                            Lr_RegServicioLiberaFactib.ID_SERVICIO_TECNICO,
                                                                            I_GetParamsTiempoLiberaFactib.CODIGO_ULTIMA_MILLA,
                                                                            Lv_StatusLiberacion,
                                                                            Lv_InfoTecnica,
                                                                            Lv_MensajeError);

            --Se actualiza el estado del servicio a Anulado
            UPDATE DB_COMERCIAL.INFO_SERVICIO 
            SET ESTADO = Lv_EstadoAnulado 
            WHERE ID_SERVICIO = Lr_RegServicioLiberaFactib.ID_SERVICIO;

            --Se agrega el historial con la respectiva informaci¿n de liberaci¿n de servicio
            Lr_ServicioHistorial                        := NULL;
            Lr_ServicioHistorial.ID_SERVICIO_HISTORIAL  := DB_COMERCIAL.SEQ_INFO_SERVICIO_HISTORIAL.NEXTVAL;
            Lr_ServicioHistorial.SERVICIO_ID            := Lr_RegServicioLiberaFactib.ID_SERVICIO;
            Lr_ServicioHistorial.OBSERVACION            := Lv_ObservacionServicio || '<br><b>Informacion Tecnica Anterior</b>' || Lv_InfoTecnica;
            Lr_ServicioHistorial.IP_CREACION            := '127.0.0.1';
            Lr_ServicioHistorial.FE_CREACION            := SYSDATE;
            Lr_ServicioHistorial.USR_CREACION           := 'libera_factib';
            Lr_ServicioHistorial.ESTADO                 := Lv_EstadoAnulado;
            DB_COMERCIAL.COMEK_TRANSACTION.P_INSERT_SERVICIO_HISTO(Lr_ServicioHistorial, Lv_MensajeError);

            --Se actualiza el estado y la observaci¿n de la solicitud de factibilidad del servicio
            UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
            SET ESTADO = Lv_EstadoAnulado,
                OBSERVACION = Lv_ObservacionSolicitud
            WHERE ID_DETALLE_SOLICITUD = Lr_RegServicioLiberaFactib.ID_DETALLE_SOLICITUD;

            --Se agrega el historial de la solicitud
            Lr_DetalleSolHistorial                        := NULL;
            Lr_DetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
            Lr_DetalleSolHistorial.DETALLE_SOLICITUD_ID   := Lr_RegServicioLiberaFactib.ID_DETALLE_SOLICITUD;
            Lr_DetalleSolHistorial.ESTADO                 := Lv_EstadoAnulado;
            Lr_DetalleSolHistorial.OBSERVACION            := Lv_ObservacionSolicitud;
            Lr_DetalleSolHistorial.USR_CREACION           := 'libera_factib';
            Lr_DetalleSolHistorial.IP_CREACION            := '127.0.0.1';
            DB_COMERCIAL.COMEK_TRANSACTION.P_INSERT_DETALLE_SOL_HIST(Lr_DetalleSolHistorial, Lv_MensajeError);

            IF C_GetPuntoServicio%ISOPEN THEN
              CLOSE C_GetPuntoServicio;
            END IF;
            OPEN C_GetPuntoServicio(Lr_RegServicioLiberaFactib.ID_SERVICIO);
            FETCH C_GetPuntoServicio INTO Ln_IdPunto;
            CLOSE C_GetPuntoServicio;

            IF C_GetNombreMotivo%ISOPEN THEN
              CLOSE C_GetNombreMotivo;
            END IF;
            Ln_IdMotivo:=NULL;
            OPEN C_GetNombreMotivo(Lv_NombreMotivo);
            FETCH C_GetNombreMotivo INTO Ln_IdMotivo;
            CLOSE C_GetNombreMotivo;

            Lr_AdmiTipoDocFinanciero:= NULL;
            --Obtiene el id tipo documento NC
            Lr_AdmiTipoDocFinanciero := DB_FINANCIERO.FNCK_CONSULTS.F_GET_TIPO_DOC_FINANCIERO(NULL, 'NC');

            Lv_Observacion              := '';
            Ln_ValorTotal               := 0;
            Lbool_Done                  := FALSE;

            FOR Lr_GetFactContratFisicoDigital IN C_GetFactContratFisicoDigital(Ln_IdPunto,Lr_RegServicioLiberaFactib.ID_SERVICIO) 
            LOOP                 
              DB_FINANCIERO.FNCK_CONSULTS.P_CREA_NOTA_CREDITO(Lr_GetFactContratFisicoDigital.ID_DOCUMENTO,
                                          Lr_AdmiTipoDocFinanciero.ID_TIPO_DOCUMENTO,
                                          Lv_NombreMotivo,
                                          Ln_IdMotivo,
                                          'telcos_liberaFactib',
                                          'Pendiente',
                                          'Y',
                                          'N',
                                          0,
                                          'N',
                                          '',
                                          '',
                                          Lr_GetFactContratFisicoDigital.OFICINA_ID,
                                          Lr_GetFactContratFisicoDigital.EMPRESA_ID,
                                          Ln_ValorTotal,
                                          Ln_IdDocumentoNC,
                                          Lv_Observacion,
                                          Lbool_Done,
                                          Lv_MensajeError);
              --
              IF Lv_MensajeError IS NOT NULL AND Lbool_Done = FALSE THEN
                Lv_MensajeError := Lv_MensajeError || ' Error al crear N/C por instalaci¿n: Pn_IdDocumento (Factura):' 
                                || Lr_GetFactContratFisicoDigital.ID_DOCUMENTO ||                                
                                ' Lv_Observacion: ' || Lv_Observacion;
                RAISE Le_Exception;
              END IF;

              SELECT PREFIJO INTO Lv_PrefijoEmpresa 
              FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO WHERE COD_EMPRESA = Lr_GetFactContratFisicoDigital.EMPRESA_ID;

              Lv_AplicaProceso := DB_GENERAL.GNRLPCK_UTIL.F_EMPRESA_APLICA_PROCESO('NUMERACION_AUTOMATICA_NOTA_CREDITO', 
Lr_GetFactContratFisicoDigital.EMPRESA_ID);
              IF TRIM(Lv_AplicaProceso) = 'S' THEN
                --Se numero autom¿ticamente la nota de cr¿dito.
                DB_FINANCIERO.FNCK_TRANSACTION.P_NUMERA_NOTA_CREDITO(Pn_DocumentoId    => Ln_IdDocumentoNC,
                                                                     Pv_PrefijoEmpresa => Lv_PrefijoEmpresa,
                                                                     Pv_ObsHistorial   => Lv_ObservacionHistorial,
                                                                     Pv_UsrCreacion    => 'libera_factib',
                                                                     Pv_Mensaje        => Lv_MensajeError);
                IF Lv_MensajeError IS NOT NULL THEN
                    Lv_MensajeError := Lv_MensajeError || ' Error al numerar N/C por instalaci¿n: Pn_IdDocumento (Factura):' 
                                    || Lr_GetFactContratFisicoDigital.ID_DOCUMENTO ||                                 
                                    ' Lv_Observacion: ' || Lv_Observacion;
                    RAISE Le_Exception;
                END IF;
              END IF;
              --
            END LOOP;                              
            COMMIT;

            UTL_FILE.put_line(  Lf_Archivo, 
                                Lr_RegServicioLiberaFactib.CLIENTE || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.LOGIN || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.JURISDICCION || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.CIUDAD || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.NOMBRE_SERVICIO || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.USR_VENDEDOR || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.AUTOMATICA || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.FECHA_FACTIBILIDAD || Lv_Delimitador ||
                                Lr_RegServicioLiberaFactib.DIAS_FACTIBLES_REPORTE || Lv_Delimitador ||
                                Lv_EstadoAnulado || Lv_Delimitador
            );

            --Env¿o de correo al vendedor
            IF Lr_RegServicioLiberaFactib.USR_VENDEDOR IS NOT NULL THEN 
              Lcl_PlantillaVendedor := Lcl_PlantillaVendedorInicial;
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ CLIENTE }}', Lr_RegServicioLiberaFactib.CLIENTE);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ LOGIN }}', Lr_RegServicioLiberaFactib.LOGIN);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ JURISDICCION }}', Lr_RegServicioLiberaFactib.JURISDICCION);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ CIUDAD }}', Lr_RegServicioLiberaFactib.CIUDAD);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ PRODUCTO_PLAN }}', Lr_RegServicioLiberaFactib.NOMBRE_SERVICIO);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ FECHA_FACTIBILIDAD }}', Lr_RegServicioLiberaFactib.FECHA_FACTIBILIDAD);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ OBSERVACION_SERVICIO }}', Lv_ObservacionServicio);
              Lcl_PlantillaVendedor := REPLACE(Lcl_PlantillaVendedor,'{{ ESTADO_SERVICIO }}', Lv_EstadoAnulado);
              --Env¿o de correo al vendedor
              DB_COMUNICACION.CUKG_TRANSACTIONS.P_SEND_MAIL(Lv_Remitente, 
                                                            Lr_RegServicioLiberaFactib.USR_VENDEDOR || Lv_SufijoCorreoVendedor,
                                                            Lv_AsuntoVendedor,
                                                            SUBSTR(Lcl_PlantillaVendedor, 1, 32767), 
                                                            'text/html; charset=UTF-8',
                                                            Lv_MensajeError);
            END IF;
          END LOOP;
          UTL_FILE.fclose(Lf_Archivo);
          DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND (Lv_Gzip));

          --Env¿o de correo con el reporte a los alias indicados
          DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, 
                                                    I_GetParamsTiempoLiberaFactib.ALIAS_LIBERA_FACTIB,
                                                    Lv_Asunto, 
                                                    Lcl_PlantillaReporte, 
                                                    Lv_DirectorioBaseDatos,
                                                    Lv_NombreArchivoZip);
          UTL_FILE.FREMOVE (Lv_DirectorioBaseDatos,Lv_NombreArchivoZip);
        END IF;
      ELSE
        Lv_MensajeError := Lv_MensajeError || ' No existen los par¿metros requeridos para realizar la liberaci¿n de factibilidad ' 
                           || I_GetParamsTiempoLiberaFactib.ID_PARAMETRO_DET;
      END IF;
    END LOOP;

    IF TRIM(Lv_MensajeError) IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;
EXCEPTION
WHEN Le_Exception THEN
  --
  ROLLBACK;
  --
  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.P_LIBERA_RECURSOS_FACTIBILIDAD', 
                                        Lv_MensajeError || ' - ' || SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

WHEN OTHERS THEN
  --
  ROLLBACK;
  --
  Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.P_LIBERA_RECURSOS_FACTIBILIDAD', 
                                        Lv_MensajeError, 
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  --
END P_LIBERA_RECURSOS_FACTIBILIDAD;

PROCEDURE INFRP_PROCESA_MIGRA_TG
AS
  CURSOR C_QUERYREGISTROS
  IS
    SELECT TMP_MIGRA_TELCOGRAPH.ID_MIGRA_TELCOGRAPH,
      TMP_MIGRA_TELCOGRAPH.LOGIN_AUX,
      TMP_MIGRA_TELCOGRAPH.CORREO_TECNICO,
      TMP_MIGRA_TELCOGRAPH.URL_TELCOGRAPH,
      TMP_MIGRA_TELCOGRAPH.ORGANIZACION,
      TMP_MIGRA_TELCOGRAPH.ZABBIX_ID,
      TMP_MIGRA_TELCOGRAPH.VALOR1
    FROM DB_INFRAESTRUCTURA.TMP_MIGRA_TELCOGRAPH
    WHERE TMP_MIGRA_TELCOGRAPH.ESTADO = 'Pendiente';
TYPE T_QUERYREGISTROS
IS
  TABLE OF C_QUERYREGISTROS%ROWTYPE INDEX BY PLS_INTEGER;
  V_QUERYREGISTROS T_QUERYREGISTROS;
  LV_CORREOS       VARCHAR2(500);
  Lv_Metodo        VARCHAR2(10);
  Lv_Version       VARCHAR2(10);
  Lv_Aplicacion    VARCHAR2(50);
  Lv_UrlTelcoTg    VARCHAR2(200);
  Ln_LongitudReq   NUMBER;
  Ln_LongitudIdeal NUMBER:= 32767;
  Ln_Offset        NUMBER:= 1;
  Ln_Buffer        VARCHAR2(2000);
  Ln_Amount        NUMBER := 2000;
  Lc_Json CLOB;
  Lhttp_Request   UTL_HTTP.req;
  Lhttp_Response  UTL_HTTP.resp;
  data            VARCHAR2(4000);
  Lv_MensajeTk    VARCHAR2(4000);
  Lv_MensajeError VARCHAR2(4000);
  Lv_Status       VARCHAR2(50);
  Lv_User         VARCHAR2(30);
  Lv_UserName     VARCHAR2(30);
  Lv_UserCreate   VARCHAR2(30) := 'MIGRA_TG';
  Lv_AppError     VARCHAR2(30) := 'TELCOS';
  Lv_ProcesoError VARCHAR2(70) := 'INFRK_TRANSACCIONES.INFRP_PROCESA_MIGRA_TG';
  Lv_Password     VARCHAR2(30);
  Lv_URLToken     VARCHAR2(200);
  Lv_Name         VARCHAR2(30);
  Lv_Token        VARCHAR2(100);
  Lv_StatusToken  VARCHAR2(30);
  Le_Error        Exception;

BEGIN
  Lv_User         := 'jbozada';
  Lv_UserName     := 'TELCOGRAPH';
  Lv_Password     := 'J&6sJ';                                 
  Lv_URLToken     := 'http://apps.telconet.ec/ws/token-security/rest/token/authentication';                                  
  Lv_Name         := 'APP.TELCOGRAPH';                              
  Lv_Token        := '';
  Lv_Status       := '';
  Lv_StatusToken  := '';
  Lv_MensajeTk    := '';
  Lv_MensajeError := '';
  Lv_Metodo       := 'POST';
  Lv_Version      := ' HTTP/1.1';
  Lv_Aplicacion   := 'application/json';
  Lv_UrlTelcoTg   := 'http://apps.telconet.ec/ws/gateway-tecnico/rest/tecnico/procesar';

  --se recorren registros del cursor
  OPEN C_QUERYREGISTROS;
  LOOP
    FETCH C_QUERYREGISTROS BULK COLLECT INTO V_QUERYREGISTROS LIMIT 500;
    EXIT
  WHEN V_QUERYREGISTROS.COUNT = 0;
    FOR I IN 1 .. V_QUERYREGISTROS.COUNT
    LOOP
    Lv_Status := 'ERROR';
      BEGIN
        NAF47_TNET.GEKG_TRANSACCION.P_GENERAR_TOKEN ( Lv_UserName,
                                                      Lv_Password,                                             
                                                      Lv_URLToken,                                             
                                                      Lv_Name,                                             
                                                      Lv_Token,                                    
                                                      Lv_StatusToken,     
                                                      Lv_MensajeTk,
                                                      Lv_MensajeError                              
                                                    );
        IF Lv_MensajeError IS NOT NULL OR Lv_StatusToken <>'200' THEN
          Raise Le_Error;
        ELSE
          Lc_Json := '{';
          Lc_Json := Lc_Json || '"op":"' ||'procesarConfirmarTelcographTn'||'",';
          Lc_Json := Lc_Json || '"token":"' || Lv_Token ||'",';
          Lc_Json := Lc_Json || '"user":"' ||Lv_UserName ||'",';
          Lc_Json := Lc_Json || '"data":' ||'{"loginAux":"' ||V_QUERYREGISTROS(I).LOGIN_AUX ||'",';
          Lc_Json := Lc_Json || '"usrCreacion":"' || Lv_UserCreate ||'",';
          Lc_Json := Lc_Json || '"ipCreacion":"' ||'127.0.0.1' ||'",';
          Lc_Json := Lc_Json || '"correoTecnico":"' ||V_QUERYREGISTROS(I).CORREO_TECNICO ||'",';
          Lc_Json := Lc_Json || '"organizacion":"' ||V_QUERYREGISTROS(I).ORGANIZACION ||'",';
          Lc_Json := Lc_Json || '"zbxZabbixId":"' ||V_QUERYREGISTROS(I).ZABBIX_ID ||'",';
          Lc_Json := Lc_Json || '"serverIp":"' ||V_QUERYREGISTROS(I).VALOR1 ||'",';
          Lc_Json := Lc_Json || '"urlTelcograph":"' ||V_QUERYREGISTROS(I).URL_TELCOGRAPH ||'"},';
          Lc_Json := Lc_Json || '"source":'||'{"name":"' ||Lv_Name||'",';
          Lc_Json := Lc_Json || '"originID":"' ||'127.0.0.1' ||'",';
          Lc_Json := Lc_Json || '"tipoOriginID":"'||'IP' ||'"}';
          Lc_Json := Lc_Json ||'}';
          Lhttp_Request := UTL_HTTP.begin_request (Lv_UrlTelcoTg, Lv_Metodo, Lv_Version);
          UTL_HTTP.set_header(Lhttp_Request, 'Content-Type', Lv_Aplicacion);
          UTL_HTTP.set_header(Lhttp_Request, 'Accept', Lv_Aplicacion);
          Ln_LongitudReq    := DBMS_LOB.getlength(Lc_Json);
          IF Ln_LongitudReq <= Ln_LongitudIdeal THEN
            UTL_HTTP.set_header(Lhttp_Request, 'Content-Length', LENGTH(Lc_Json));
            UTL_HTTP.write_text(Lhttp_Request, Lc_Json);
          ELSE
            UTL_HTTP.set_header(Lhttp_Request, 'Transfer-Encoding', 'chunked');
            WHILE (Ln_Offset < Ln_LongitudReq)
            LOOP
              DBMS_LOB.READ(Lc_Json, Ln_Amount, Ln_Offset, Ln_Buffer);
              UTL_HTTP.WRITE_TEXT(Lhttp_Request, Ln_Buffer);
              Ln_Offset := Ln_Offset + Ln_Amount;
            END LOOP;
          END IF;
          Lhttp_Response := UTL_HTTP.get_response(Lhttp_Request);
          utl_http.read_text(Lhttp_Response, data);
          apex_json.parse (data);
          Lv_Status       := apex_json.get_varchar2('status');
          Lv_MensajeError := apex_json.get_varchar2('mensaje');
          UTL_HTTP.end_response(Lhttp_Response);

        END IF;  
      EXCEPTION
       WHEN Le_Error THEN
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(Lv_AppError,
                                             Lv_ProcesoError,
                                             Lv_MensajeError,
                                             Lv_UserCreate, SYSDATE, '127.0.0.1');

      WHEN UTL_HTTP.end_of_body THEN
        Lv_MensajeError := 'Error UTL_HTTP.end_of_body';
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(Lv_AppError, Lv_ProcesoError, Lv_MensajeError, Lv_UserCreate, SYSDATE, '127.0.0.1');

        UTL_HTTP.end_response(Lhttp_Response);
      WHEN OTHERS THEN
        Lv_MensajeError := 'Error en INFRK_TRANSACCIONES.INFRP_PROCESA_MIGRA_TG: '||SQLERRM ||' ' ||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(Lv_AppError, Lv_ProcesoError, Lv_MensajeError, Lv_UserCreate, SYSDATE, '127.0.0.1');

      END;
      UPDATE DB_INFRAESTRUCTURA.TMP_MIGRA_TELCOGRAPH
      SET TMP_MIGRA_TELCOGRAPH.ESTADO               = Lv_Status,
        TMP_MIGRA_TELCOGRAPH.OBSERVACION            = Lv_MensajeError
      WHERE TMP_MIGRA_TELCOGRAPH.ID_MIGRA_TELCOGRAPH= V_QUERYREGISTROS(I).ID_MIGRA_TELCOGRAPH;
      COMMIT;
    END LOOP;
  END LOOP;
  CLOSE C_QUERYREGISTROS;
  LV_CORREOS := 'jbozada@telconet.ec';
  UTL_MAIL.SEND (SENDER => 'procesos_masivos@telconet.ec',
                 RECIPIENTS => LV_CORREOS,
                 SUBJECT => 'Reporte de migraci¿n TELCOGRAPH procesada '||
                            SYSDATE, MESSAGE => 'Se proceso la informaci&oacute;n enviada.' ||' <br> <br> Atentamente,<br> Migraci&oacute;n Masiva ',
                 MIME_TYPE => 'text/html; charset=UTF-8' );
EXCEPTION

WHEN OTHERS THEN
  ROLLBACK;
  UTL_MAIL.SEND (sender => 'procesos_masivos@telconet.ec', recipients => 'jbozada@telconet.ec', subject => 'Ejecuci¿n del job DB_INFRAESTRUCTURA.INFRP_PROCESA_MIGRA_TG', MESSAGE => 'Error en el job DB_INFRAESTRUCTURA.INFRP_PROCESA_MIGRA_TG : <br>'||SQLERRM, mime_type => 'text/html; charset=UTF-8' );
  NULL;
END INFRP_PROCESA_MIGRA_TG;


PROCEDURE P_LIBERA_FACTIB_SERVICIO(
                                    Pv_PrefijoEmpresa       IN VARCHAR2,
                                    Pn_IdServicioTecnico    IN NUMBER,
                                    Pv_CodigoUltimaMilla    IN VARCHAR2,
                                    Pv_StatusLiberacion     OUT VARCHAR2,
                                    Pv_InfoTecnica          OUT VARCHAR2,
                                    Pv_MensajeError         OUT VARCHAR2 )
AS
  Lv_ValorServicioProdCaract DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
  CURSOR C_GetInfoServicioTecnico(Cn_IdServicioTecnico DB_COMERCIAL.INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO%TYPE)
  IS
    SELECT
      SERVICIO_TECNICO.*, 
      ELEMENTO.NOMBRE_ELEMENTO AS ELEMENTO,TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO AS TIPO_ELEMENTO, 
      INTERFACE_ELEMENTO.NOMBRE_INTERFACE_ELEMENTO AS INTERFACE_ELEMENTO,

      ELEMENTO_CONTENEDOR.NOMBRE_ELEMENTO AS ELEMENTO_CONTENEDOR,TIPO_ELEMENTO_CONTENEDOR.NOMBRE_TIPO_ELEMENTO AS TIPO_ELEMENTO_CONTENEDOR,

      ELEMENTO_CONECTOR.NOMBRE_ELEMENTO AS ELEMENTO_CONECTOR,TIPO_ELEMENTO_CONECTOR.NOMBRE_TIPO_ELEMENTO AS TIPO_ELEMENTO_CONECTOR, 
      INTERFACE_ELEMENTO_CONECTOR.NOMBRE_INTERFACE_ELEMENTO AS INTERFACE_ELEMENTO_CONECTOR

    FROM
      DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO
    LEFT JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_ELEMENTO
    ON INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO = SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
    ON ELEMENTO.ID_ELEMENTO = SERVICIO_TECNICO.ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ELEMENTO
    ON MODELO_ELEMENTO.ID_MODELO_ELEMENTO = ELEMENTO.MODELO_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_ELEMENTO
    ON TIPO_ELEMENTO.ID_TIPO_ELEMENTO = MODELO_ELEMENTO.TIPO_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_CONTENEDOR
    ON ELEMENTO_CONTENEDOR.ID_ELEMENTO = SERVICIO_TECNICO.ELEMENTO_CONTENEDOR_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ELEMENTO_CONTENEDOR
    ON MODELO_ELEMENTO_CONTENEDOR.ID_MODELO_ELEMENTO = ELEMENTO_CONTENEDOR.MODELO_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_ELEMENTO_CONTENEDOR
    ON TIPO_ELEMENTO_CONTENEDOR.ID_TIPO_ELEMENTO = MODELO_ELEMENTO_CONTENEDOR.TIPO_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_ELEMENTO_CONECTOR
    ON INTERFACE_ELEMENTO_CONECTOR.ID_INTERFACE_ELEMENTO = SERVICIO_TECNICO.INTERFACE_ELEMENTO_CONECTOR_ID
    LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_CONECTOR
    ON ELEMENTO_CONECTOR.ID_ELEMENTO = SERVICIO_TECNICO.ELEMENTO_CONECTOR_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ELEMENTO_CONECTOR
    ON MODELO_ELEMENTO_CONECTOR.ID_MODELO_ELEMENTO = ELEMENTO_CONECTOR.MODELO_ELEMENTO_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_ELEMENTO_CONECTOR
    ON TIPO_ELEMENTO_CONECTOR.ID_TIPO_ELEMENTO = MODELO_ELEMENTO_CONECTOR.TIPO_ELEMENTO_ID
    WHERE
      SERVICIO_TECNICO.ID_SERVICIO_TECNICO = Cn_IdServicioTecnico;
  Lr_GetInfoServicioTecnico C_GetInfoServicioTecnico%ROWTYPE;
  Ln_IdInterfaceElemento NUMBER := NULL;
  Le_Exception EXCEPTION;
BEGIN

  IF Pv_PrefijoEmpresa IS NOT NULL AND Pn_IdServicioTecnico IS NOT NULL AND Pv_CodigoUltimaMilla IS NOT NULL THEN
    IF C_GetInfoServicioTecnico%ISOPEN THEN
      CLOSE C_GetInfoServicioTecnico;
    END IF;
    OPEN C_GetInfoServicioTecnico(Pn_IdServicioTecnico);
    FETCH C_GetInfoServicioTecnico INTO Lr_GetInfoServicioTecnico;
    CLOSE C_GetInfoServicioTecnico;

    Pv_InfoTecnica :=  '<br>Elemento: ' || Lr_GetInfoServicioTecnico.ELEMENTO ||
                       '<br>Tipo Elemento: ' || Lr_GetInfoServicioTecnico.TIPO_ELEMENTO ||
                       '<br>Interface Elemento: ' || Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO ||
                       '<br>Elemento Contenedor: ' || Lr_GetInfoServicioTecnico.ELEMENTO_CONTENEDOR ||
                       '<br>Tipo Elemento Contenedor: ' || Lr_GetInfoServicioTecnico.TIPO_ELEMENTO_CONTENEDOR ||
                       '<br>Elemento Conector: ' || Lr_GetInfoServicioTecnico.ELEMENTO_CONECTOR ||
                       '<br>Tipo Elemento Conector: ' || Lr_GetInfoServicioTecnico.TIPO_ELEMENTO_CONECTOR ||
                       '<br>Interface Elemento Conector: ' || Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_CONECTOR;

    IF Pv_PrefijoEmpresa = 'TN' THEN
      IF Pv_CodigoUltimaMilla = 'FO' THEN 
        Lv_ValorServicioProdCaract := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(Lr_GetInfoServicioTecnico.SERVICIO_ID,
                                                                                                  'TIPO_FACTIBILIDAD');
        IF Lv_ValorServicioProdCaract = 'DIRECTO' THEN
          Ln_IdInterfaceElemento := Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_ID;
        ELSE
          Ln_IdInterfaceElemento := Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_CONECTOR_ID;
        END IF;
      ELSIF Pv_CodigoUltimaMilla = 'UTP' THEN 
        Ln_IdInterfaceElemento := Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_ID;
      ELSIF Pv_CodigoUltimaMilla = 'FTTx' THEN 
        Ln_IdInterfaceElemento := Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_CONECTOR_ID;
      END IF;
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_DEPENDENCIA_MISMA_UM(Lr_GetInfoServicioTecnico.SERVICIO_ID,
                                                                            'libera_factib',
                                                                            Pv_StatusLiberacion, 
                                                                            Pv_MensajeError);
    ELSIF Pv_PrefijoEmpresa = 'MD' THEN
      IF Pv_CodigoUltimaMilla = 'FO' THEN 
        Ln_IdInterfaceElemento := Lr_GetInfoServicioTecnico.INTERFACE_ELEMENTO_CONECTOR_ID;
      END IF ;
    END IF;

    UPDATE DB_COMERCIAL.INFO_SERVICIO_TECNICO 
    SET ELEMENTO_ID = NULL,
        INTERFACE_ELEMENTO_ID = NULL,
        ELEMENTO_CONTENEDOR_ID = NULL,
        ELEMENTO_CONECTOR_ID =  NULL,
        INTERFACE_ELEMENTO_CONECTOR_ID = NULL
    WHERE ID_SERVICIO_TECNICO = Pn_IdServicioTecnico;

    IF Ln_IdInterfaceElemento > 0 THEN 
      UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO 
      SET ESTADO = 'not connect',
          USR_ULT_MOD = 'libera_factib',
          FE_ULT_MOD = SYSDATE 
      WHERE ID_INTERFACE_ELEMENTO = Ln_IdInterfaceElemento;
    END IF;
    Pv_StatusLiberacion := 'OK';
  ELSE
    Pv_StatusLiberacion := 'ERROR';
    Pv_MensajeError     := 'No se enviaron los par¿metros necesarios para liberar los recursos de ' ||
                           'factibilidad del servicio con id de info tecnica ' || Pn_IdServicioTecnico;
    RAISE Le_Exception; 
  END IF;
EXCEPTION
WHEN Le_Exception THEN
  --
  ROLLBACK;
  --
  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.P_LIBERA_FACTIB_SERVICIO', 
                                        Pv_MensajeError || ' - ' || SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

WHEN OTHERS THEN
  Pv_StatusLiberacion := 'ERROR'; 
  --
  ROLLBACK;
  --
  Pv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

  DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                        'INFRK_TRANSACCIONES.P_LIBERA_FACTIB_SERVICIO', 
                                        Pv_MensajeError, 
                                        NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                        SYSDATE,
                                        NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

END P_LIBERA_FACTIB_SERVICIO;


PROCEDURE       INTMPLS_CREAR_SUBREDES( pn_idElemento       IN NUMBER,
                                  pn_id_subred_padre  IN NUMBER,
                                  pn_subred_ip        IN VARCHAR2,
                                  pn_subred_mascara   IN NUMBER ,
                                  pv_tag              IN VARCHAR2,
                                  pv_uso              in varchar2,
                                  pv_msg_error        OUT VARCHAR2)
AS
  -- arreglos
  TYPE Mascaras IS VARRAY(8) OF NUMBER;
  arrayMascaras Mascaras := Mascaras(24, 25, 26, 27, 28, 29, 30, 31);

  TYPE IpMascaras IS VARRAY(8) OF VARCHAR2(30);
  arrayIpMascaras IpMascaras := IpMascaras('255.255.255.0', '255.255.255.128', '255.255.255.192', '255.255.255.224', '255.255.255.240', '255.255.255.248', '255.255.255.252', '255.255.255.254');

  TYPE Subredes IS VARRAY(8) OF NUMBER;
  arraySubredes Subredes := Subredes(1, 2, 4, 8, 16, 32, 64, 128);

  TYPE CantidadIpPorSubRed IS VARRAY(8) OF NUMBER;
  arrayCantidadIps CantidadIpPorSubRed := CantidadIpPorSubRed(255, 128, 64, 32, 16, 8, 4, 2);

    CURSOR C_ValidarSubred(Cv_Subred DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED%TYPE,Cv_Uso DB_INFRAESTRUCTURA.INFO_SUBRED.USO%TYPE)
    IS
    SELECT COUNT(ISU.ID_SUBRED)
    FROM INFO_SUBRED ISU
    WHERE ISU.SUBRED = Cv_Subred
    AND ISU.USO = Cv_Uso
    AND ISU.ESTADO IN ('Ocupado','Activo');

  --
  -- otras variables
  Pv_3octetos         VARCHAR2(15);
  Pv_4octeto          VARCHAR2(15);
  j                   NUMBER;
  Pn_IpInicio         NUMBER;
  Pn_IpFin            NUMBER;
  Pn_ContadorGrupos   NUMBER;
  Pn_InicioContador   NUMBER;
  Pn_IpSubred         NUMBER;
  Pn_FinContador      NUMBER;
  Pv_IpMascara        VARCHAR2(30);
  Pn_Subred           NUMBER;
  Pv_mascara          VARCHAR2(100);
  Pn_nextVal          NUMBER;
  Pn_idPadre          NUMBER;
  Pn_idPe             NUMBER;
  Pn_nombrePe         VARCHAR2(100);
  Pn_existeSubred     NUMBER;
  Pn_Secuencia        NUMBER; -- Esta variable verificar¿ que cada 2 interaciones debe cambiarse la subred padre
                              -- de la que proviene la subred que se va a ingresar
  -- constantes
  pv_usu_migr         VARCHAR2(30) := 'telcos_db';

BEGIN
  -- separamos la ip
  Pv_3octetos := CONCAT(regexp_substr(pn_subred_ip, '[^.]+', 1, 1),'.'); -- AA.
  Pv_3octetos := CONCAT(Pv_3octetos, regexp_substr(pn_subred_ip, '[^.]+', 1, 2)); -- AA.BB
  Pv_3octetos := CONCAT(Pv_3octetos,'.'); -- AA.BB.
  Pv_3octetos := CONCAT(Pv_3octetos, regexp_substr(pn_subred_ip, '[^.]+', 1, 3)); -- AA.BB.CC
  Pv_4octeto := regexp_substr(pn_subred_ip, '[^.]+', 1, 4);

  j := 0;
  FOR pos IN 1..arrayMascaras.COUNT LOOP
    IF arrayMascaras(pos) = pn_subred_mascara THEN
      j := pos + 1; -- se asigna la siguiente subred que necesita crear
    END IF;
  END LOOP;

  IF (j <= arrayMascaras.COUNT) THEN
    Pn_Subred           := arrayMascaras(j);
    Pv_IpMascara        := arrayIpMascaras(j);

    Pn_idPadre := pn_id_subred_padre;
    Pn_idPe    := pn_idElemento;

    IF (pn_id_subred_padre IS NULL) THEN

      /*
        -- Se valida que la subred a crear no exista creada --
      */

      IF C_ValidarSubred%ISOPEN THEN
        CLOSE C_ValidarSubred;
      END IF;

      Pn_existeSubred := 0;

      open C_ValidarSubred(TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pv_4octeto, CONCAT('/',pn_subred_mascara))))),pv_uso);
      fetch C_ValidarSubred into Pn_existeSubred;
      close C_ValidarSubred;

      IF (Pn_existeSubred = 0) THEN

          -- ----------------------------------------------
          -- Se registra la subred padre del arbol
          -- ----------------------------------------------
          Pn_idPadre := DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL;
          INSERT INTO DB_INFRAESTRUCTURA.INFO_SUBRED
          (
            ID_SUBRED,
            RED_ID,
            SUBRED,
            MASCARA,
            GATEWAY,
            IP_INICIAL,
            IP_FINAL,
            SUBRED_ID,
            EMPRESA_COD,
            VERSION_IP,
            ELEMENTO_ID,
            TIPO,
            USO,
            ESTADO, FE_CREACION, USR_CREACION, IP_CREACION
          )
          VALUES
          (
            Pn_idPadre,
            pn_subred_mascara,
            TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pv_4octeto, CONCAT('/',pn_subred_mascara))))),
            TRIM(arrayIpMascaras(j-1)),
            TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pv_4octeto + 1))),
            TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pv_4octeto + 2))),
            TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pv_4octeto + arrayCantidadIps(j -1) - 1))),
            null,
            '10',
            'IPv4',
            Pn_idPe,
            'LAN',
            pv_uso,
            'Activo', SYSDATE, pv_usu_migr, '127.0.0.1'
          );

      ELSE

        pv_msg_error := 'La subred padre del arbol ('||TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pv_4octeto,
                                                    CONCAT('/',pn_subred_mascara)))))||') no ha sido creada porque ya existe';

      END IF;

    END IF;


    FOR contador IN 0..1 LOOP
      Pv_mascara := TRIM(arrayIpMascaras(j));      
      Pn_nextVal := DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL;      
      if Pv_mascara = '255.255.255.254' then 
        Pn_IpSubred := Pv_4octeto + (contador * arrayCantidadIps(j));
        Pn_IpInicio := Pn_IpSubred;
        Pn_IpFin    := Pn_IpSubred+1;


      /*
        -- Se valida que la subred a crear no exista creada --
      */

      IF C_ValidarSubred%ISOPEN THEN
        CLOSE C_ValidarSubred;
      END IF;

      Pn_existeSubred := 0;

      open C_ValidarSubred(TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpSubred,CONCAT('/',Pn_Subred))))),pv_uso);
      fetch C_ValidarSubred into Pn_existeSubred;
      close C_ValidarSubred;

      IF (Pn_existeSubred = 0) THEN

            -- INSERT DE LA SUBRED
            INSERT INTO DB_INFRAESTRUCTURA.INFO_SUBRED
            (
              ID_SUBRED,
              RED_ID,
              SUBRED,
              MASCARA,
              GATEWAY,
              IP_INICIAL,
              IP_FINAL,
              SUBRED_ID,
              EMPRESA_COD,
              VERSION_IP,
              ELEMENTO_ID,
              TIPO,
              USO,
              ESTADO, FE_CREACION, USR_CREACION, IP_CREACION
            )
            VALUES
            (
              Pn_nextVal,
              pn_subred_mascara,
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpSubred,CONCAT('/',Pn_Subred))))),
              TRIM(arrayIpMascaras(j)),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpSubred))),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpInicio))),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpFin))),
              Pn_idPadre, -- id del padre
              '10',
              'IPV4',
              Pn_idPe,
              'LAN',
              pv_uso,
              'Activo', SYSDATE, pv_usu_migr, '127.0.0.1'
            );

      ELSE

        pv_msg_error := 'La subred ('||TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpSubred,
                                            CONCAT('/',Pn_Subred)))))||') no ha sido creada porque ya existe';

      END IF;

      else
        Pn_IpInicio := Pv_4octeto + (contador * arrayCantidadIps(j)) + 1;
        Pn_IpFin    := Pn_IpInicio + (arrayCantidadIps(j) - 3);

        /*
          -- Se valida que la subred a crear no exista creada --
        */

        IF C_ValidarSubred%ISOPEN THEN
          CLOSE C_ValidarSubred;
        END IF;

        Pn_existeSubred := 0;

        open C_ValidarSubred(TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpInicio-1,CONCAT('/',Pn_Subred))))),pv_uso);
        fetch C_ValidarSubred into Pn_existeSubred;
        close C_ValidarSubred;

        IF (Pn_existeSubred = 0) THEN

            -- INSERT DE LA SUBRED
            INSERT INTO DB_INFRAESTRUCTURA.INFO_SUBRED
            (
              ID_SUBRED,
              RED_ID,
              SUBRED,
              MASCARA,
              GATEWAY,
              IP_INICIAL,
              IP_FINAL,
              SUBRED_ID,
              EMPRESA_COD,
              VERSION_IP,
              ELEMENTO_ID,
              TIPO,
              USO,
              ESTADO, FE_CREACION, USR_CREACION, IP_CREACION
            )
            VALUES
            (
              Pn_nextVal,
              pn_subred_mascara,
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpInicio-1,CONCAT('/',Pn_Subred))))),
              TRIM(arrayIpMascaras(j)),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpInicio))),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpInicio + 1))),
              TRIM(CONCAT (Pv_3octetos, CONCAT('.', Pn_IpFin))),
              Pn_idPadre, -- id del padre
              '10',
              'IPV4',
              Pn_idPe,
              'LAN',
              pv_uso,
              'Activo', SYSDATE, pv_usu_migr, '127.0.0.1'
            ); 

        ELSE

          pv_msg_error := 'La subred ('||TRIM(CONCAT (Pv_3octetos, CONCAT('.', CONCAT(Pn_IpInicio-1,
                                              CONCAT('/',Pn_Subred)))))||') no ha sido creada porque ya existe';

        END IF;

      end if;
      -- LLAMADA RECURSIVA
      IF (j < arrayMascaras.COUNT) THEN
        INTMPLS_CREAR_SUBREDES(Pn_idPe, Pn_nextVal, CONCAT (Pv_3octetos, CONCAT('.', Pn_IpInicio - 1)), Pn_Subred, CONCAT (pv_tag, pv_tag), pv_uso, pv_msg_error );
      END IF;
    END LOOP;
  END IF;

 commit;
END;

  PROCEDURE P_LIBERA_PUERTO_WIFI(
      Pn_IdServicio             IN NUMBER,
      Pn_IdServicioTecnico      IN NUMBER,
      Pn_InterfaceEleConectorId IN NUMBER,
      Pn_IdProducto             IN NUMBER,
      Pv_StatusLiberacion OUT VARCHAR2,
      Pv_MensajeError OUT VARCHAR2 )
  AS
    CURSOR C_GetEnlacesInterfaceEleIni(Cn_InterfaceElementoIniId DB_COMERCIAL.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE, Cv_EstadoActivo VARCHAR2)
    IS
      SELECT ID_ENLACE,
        INTERFACE_ELEMENTO_INI_ID,
        INTERFACE_ELEMENTO_FIN_ID
      FROM DB_COMERCIAL.INFO_ENLACE
      WHERE INTERFACE_ELEMENTO_INI_ID = Cn_InterfaceElementoIniId
      AND ESTADO                      = Cv_EstadoActivo;
    CURSOR C_GetServicioProdCaract( Cv_DescripcionCaract DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE, 
                                    Cn_IdProducto DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE, 
                                    Cv_EstadoActivo VARCHAR2)
    IS
      SELECT ISPC.ID_SERVICIO_PROD_CARACT,
        ISPC.VALOR
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO AP
      ON AP.ID_PRODUCTO = APC.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON APC.CARACTERISTICA_ID          = AC.ID_CARACTERISTICA
      WHERE ISPC.SERVICIO_ID            = Pn_IdServicio
      AND ISPC.ESTADO                   = Cv_EstadoActivo
      AND APC.ESTADO                    = Cv_EstadoActivo
      AND AC.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaract
      AND AC.ESTADO                     = Cv_EstadoActivo
      AND AP.ID_PRODUCTO                = Cn_IdProducto
      AND ROWNUM                        = 1;
    Lr_GetServicioProdCaract C_GetServicioProdCaract%ROWTYPE;
    Lv_EstadoActivo VARCHAR2(6) := 'Activo';
  BEGIN
    IF Pn_InterfaceEleConectorId IS NOT NULL AND Pn_InterfaceEleConectorId > 0 THEN
      FOR I_GetEnlacesInterfaceEleIni IN C_GetEnlacesInterfaceEleIni(Pn_InterfaceEleConectorId, Lv_EstadoActivo)
      LOOP
        UPDATE DB_INFRAESTRUCTURA.INFO_ENLACE
        SET ESTADO      = 'Eliminado'
        WHERE ID_ENLACE = I_GetEnlacesInterfaceEleIni.ID_ENLACE;
        UPDATE INFO_INTERFACE_ELEMENTO
        SET ESTADO                  = 'not connect',
          USR_ULT_MOD               = 'libera_factib',
          FE_ULT_MOD                = SYSDATE
        WHERE ID_INTERFACE_ELEMENTO = I_GetEnlacesInterfaceEleIni.INTERFACE_ELEMENTO_FIN_ID;
      END LOOP;
      UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
      SET ESTADO                  = 'not connect',
        USR_ULT_MOD               = 'libera_factib',
        FE_ULT_MOD                = SYSDATE
      WHERE ID_INTERFACE_ELEMENTO = Pn_InterfaceEleConectorId;
    END IF;
    IF C_GetServicioProdCaract%ISOPEN THEN
      CLOSE C_GetServicioProdCaract;
    END IF;
    OPEN C_GetServicioProdCaract('ENLACE_DATOS', Pn_IdProducto, Lv_EstadoActivo);
    FETCH C_GetServicioProdCaract INTO Lr_GetServicioProdCaract;
    IF C_GetServicioProdCaract%FOUND THEN
      UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
      SET ESTADO                    = 'Eliminado',
        USR_ULT_MOD                 = 'libera_factib',
        FE_ULT_MOD                  = SYSDATE
      WHERE ID_SERVICIO_PROD_CARACT = Lr_GetServicioProdCaract.ID_SERVICIO_PROD_CARACT;
    END IF;
    IF C_GetServicioProdCaract%ISOPEN THEN
      CLOSE C_GetServicioProdCaract;
    END IF;
    OPEN C_GetServicioProdCaract('INTERFACE_ELEMENTO_ID', Pn_IdProducto, Lv_EstadoActivo);
    FETCH C_GetServicioProdCaract INTO Lr_GetServicioProdCaract;
    IF C_GetServicioProdCaract%FOUND THEN
      UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
      SET ESTADO                         = 'Eliminado',
        USR_ULT_MOD                      = 'libera_factib',
        FE_ULT_MOD                       = SYSDATE
      WHERE ID_SERVICIO_PROD_CARACT      = Lr_GetServicioProdCaract.ID_SERVICIO_PROD_CARACT;
      IF Lr_GetServicioProdCaract.VALOR IS NOT NULL AND Lr_GetServicioProdCaract.VALOR > 0 THEN
        FOR I_GetEnlacesInterfaceEleIni IN C_GetEnlacesInterfaceEleIni( Lr_GetServicioProdCaract.VALOR, Lv_EstadoActivo)
        LOOP
          UPDATE DB_INFRAESTRUCTURA.INFO_ENLACE
          SET ESTADO      = 'Eliminado'
          WHERE ID_ENLACE = I_GetEnlacesInterfaceEleIni.ID_ENLACE;
          UPDATE INFO_INTERFACE_ELEMENTO
          SET ESTADO                  = 'not connect',
            USR_ULT_MOD               = 'libera_factib',
            FE_ULT_MOD                = SYSDATE
          WHERE ID_INTERFACE_ELEMENTO = I_GetEnlacesInterfaceEleIni.INTERFACE_ELEMENTO_FIN_ID;
        END LOOP;
        UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
        SET ESTADO                  = 'not connect',
          USR_ULT_MOD               = 'libera_factib',
          FE_ULT_MOD                = SYSDATE
        WHERE ID_INTERFACE_ELEMENTO = Lr_GetServicioProdCaract.VALOR;
      END IF;
    END IF;
    Pv_StatusLiberacion := 'OK';
  EXCEPTION
  WHEN OTHERS THEN
    Pv_StatusLiberacion := 'ERROR';
    Pv_MensajeError     := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'INFRK_TRANSACCIONES.P_LIBERA_PUERTO_WIFI', Pv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_LIBERA_PUERTO_WIFI;

  FUNCTION F_GET_SERVICIOS_X_CONCENTRADOR( Fn_IdServicio IN NUMBER )
    RETURN VARCHAR2
  IS
    CURSOR C_GetServiciosProdCaract(Cv_DescripcionCaract DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE, 
                                    Cv_NombreProducto DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE, 
                                    Cv_EstadoActivo VARCHAR2)
    IS
      SELECT DISTINCT PUNTO.LOGIN, SERVICIO.DESCRIPCION_PRESENTA_FACTURA, SERVICIO.ESTADO
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
      ON SERVICIO.ID_SERVICIO = ISPC.SERVICIO_ID
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO AP
      ON AP.ID_PRODUCTO                                                    = APC.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC 
      ON APC.CARACTERISTICA_ID = AC.ID_CARACTERISTICA
      WHERE COALESCE(TO_NUMBER(REGEXP_SUBSTR(ISPC.VALOR,'^\d+')),0) = Fn_IdServicio 
      AND ISPC.ESTADO = Cv_EstadoActivo
      AND APC.ESTADO = Cv_EstadoActivo
      AND AC.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaract
      AND AC.ESTADO = Cv_EstadoActivo
      AND AP.DESCRIPCION_PRODUCTO       = Cv_NombreProducto
      AND AP.NOMBRE_TECNICO             = Cv_NombreProducto
      AND AP.ESTADO                     = Cv_EstadoActivo
      AND SERVICIO.ESTADO NOT IN ('Anulado', 'Eliminado', 'Rechazado', 'Rechazada', 'Cancelado');
    Lv_MensajeError VARCHAR2(4000);
    Lv_EstadoActivo VARCHAR2(6) := 'Activo';
  BEGIN
    FOR I_GetServiciosProdCaract IN C_GetServiciosProdCaract('ENLACE_DATOS', 'L3MPLS', Lv_EstadoActivo)
    LOOP
      Lv_MensajeError := I_GetServiciosProdCaract.LOGIN || ' -> ' || I_GetServiciosProdCaract.DESCRIPCION_PRESENTA_FACTURA || ' -> '
                         || I_GetServiciosProdCaract.ESTADO || '<br>' || Lv_MensajeError; 
    END LOOP;
    IF Lv_MensajeError IS NOT NULL THEN
      Lv_MensajeError := 'No se puede Eliminar el servicio concentrador, debido a que tiene extremos enlazados ' || Lv_MensajeError;
    END IF;
    RETURN Lv_MensajeError;
  EXCEPTION
  WHEN OTHERS THEN
    Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.F_GET_SERVICIOS_X_CONCENTRADOR', 
                                            Lv_MensajeError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    RETURN Lv_MensajeError;
  END F_GET_SERVICIOS_X_CONCENTRADOR;

  PROCEDURE P_ELIMINA_DEPENDENCIA_MISMA_UM(
      Pn_IdServicio IN NUMBER,
      Pv_UsrCreacion IN VARCHAR2,
      Pv_Status OUT VARCHAR2,
      Pv_MensajeError OUT VARCHAR2 )
  AS
    CURSOR C_GetServicioProdCaractMismaUm(  Cv_DescripcionCaract DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE, 
                                            Cv_EstadoActivo VARCHAR2)
    IS
      SELECT ISPC.ID_SERVICIO_PROD_CARACT,
        ISPC.ESTADO AS ESTADO_ISPC,
        SERVICIO.ID_SERVICIO,
        SERVICIO.ESTADO AS ESTADO_SERVICIO
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
      ON SERVICIO.ID_SERVICIO = ISPC.SERVICIO_ID
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO AP
      ON AP.ID_PRODUCTO = APC.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON APC.CARACTERISTICA_ID                                      = AC.ID_CARACTERISTICA
      WHERE COALESCE(TO_NUMBER(REGEXP_SUBSTR(ISPC.VALOR,'^\d+')),0) = Pn_IdServicio
      AND ISPC.ESTADO                                               = Cv_EstadoActivo
      AND APC.ESTADO                                                = Cv_EstadoActivo
      AND AC.DESCRIPCION_CARACTERISTICA                             = Cv_DescripcionCaract
      AND AC.ESTADO                                                 = Cv_EstadoActivo;
    Lv_CaractMismaUm VARCHAR2(50)                                   := 'SERVICIO_MISMA_ULTIMA_MILLA';
    Lv_EstadoActivo VARCHAR2(6)                                     := 'Activo';
  BEGIN
    FOR I_GetServicioProdCaractMismaUm IN C_GetServicioProdCaractMismaUm(Lv_CaractMismaUm, Lv_EstadoActivo)
    LOOP
      UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
      SET ESTADO                    = 'Eliminado',
        USR_ULT_MOD                 = Pv_UsrCreacion,
        FE_ULT_MOD                  = SYSDATE
      WHERE ID_SERVICIO_PROD_CARACT = I_GetServicioProdCaractMismaUm.ID_SERVICIO_PROD_CARACT;
      INSERT
      INTO DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
        (
          ID_SERVICIO_HISTORIAL,
          SERVICIO_ID,
          USR_CREACION,
          FE_CREACION,
          IP_CREACION,
          ESTADO,
          ACCION,
          OBSERVACION
        )
        VALUES
        (
          DB_COMERCIAL.SEQ_INFO_SERVICIO_HISTORIAL.NEXTVAL,
          I_GetServicioProdCaractMismaUm.ID_SERVICIO,
          Pv_UsrCreacion,
          SYSDATE,
          '127.0.0.1',
          I_GetServicioProdCaractMismaUm.ESTADO_SERVICIO,
          'actualizaCaracteristica',
          'Se actualizo caracteristica '
          || Lv_CaractMismaUm
          || ' con ID '
          || I_GetServicioProdCaractMismaUm.ID_SERVICIO_PROD_CARACT
          || ' : <br>'
          || 'Valores Anteriores: <br>&nbsp;&nbsp;&nbsp;&nbsp;Estado: '
          || I_GetServicioProdCaractMismaUm.ESTADO_ISPC
          || '<br>Valores Actuales: <br>'
          || '&nbsp;&nbsp;&nbsp;&nbsp;Estado: Eliminado'
        );
    END LOOP;
    Pv_Status := 'OK';
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status       := 'ERROR';
    Pv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ELIMINA_DEPENDENCIA_MISMA_UM', 
                                            Pv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_DEPENDENCIA_MISMA_UM;



 PROCEDURE P_RESERVAR_VLAN_PE(PN_PERSONA_EMP_ROL IN NUMBER,PV_VLAN IN VARCHAR2) AS


    --Cursor que obtiene la lista de PE
    CURSOR CU_ELEMENTO_PE IS
    SELECT DISTINCT(BB.NOMBRE_ELEMENTO)  AS NOMBRE_ELEMENTO FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO BB WHERE BB.NOMBRE_ELEMENTO IN (
    SELECT
        (SELECT NOMBRE_ELEMENTO FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO WHERE ID_ELEMENTO = (
            SELECT ELEMENTO_ID FROM DB_INFRAESTRUCTURA.INFO_SUBRED WHERE ID_SUBRED = (
            SELECT MAX(SUBRED_ID) FROM DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = B.ID_SERVICIO)))

    FROM DB_COMERCIAL.INFO_PUNTO A,DB_COMERCIAL.INFO_SERVICIO B,DB_COMERCIAL.INFO_SERVICIO_TECNICO C

    WHERE A.ID_PUNTO = B.PUNTO_ID
    AND B.ID_SERVICIO = C.SERVICIO_ID
    AND B.ESTADO IN ('Activo','In-Corte')
    AND A.ID_PUNTO IN (SELECT ID_PUNTO FROM DB_COMERCIAL.INFO_PUNTO WHERE PERSONA_EMPRESA_ROL_ID IN (
        SELECT ID_PERSONA_ROL FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL WHERE PERSONA_ID IN (
        SELECT ID_PERSONA FROM DB_COMERCIAL.INFO_PERSONA WHERE RAZON_SOCIAL = 'NEGOCIOS Y TELEFONIA NEDETEL S.A.')))
    AND C.ELEMENTO_ID IN (    SELECT ELEMENTO_ID FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO WHERE DETALLE_NOMBRE = 'ANILLO'
    AND DETALLE_VALOR = '0' AND ESTADO = 'Activo' ));

    --Se obtiene el detalle_elemento en base a la VLAN y el PE
    CURSOR CU_OBTIENE_VLAN_PE(CV_VLAN VARCHAR2,CV_PE VARCHAR2) IS
    SELECT IDE.ID_DETALLE_ELEMENTO FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE WHERE IDE.DETALLE_VALOR = CV_VLAN
        AND IDE.DETALLE_DESCRIPCION = 'VLAN PE' AND IDE.DETALLE_NOMBRE = 'VLAN' AND IDE.ESTADO = 'Activo'
        AND ELEMENTO_ID = (SELECT MAX(ID_ELEMENTO) FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO WHERE NOMBRE_ELEMENTO = CV_PE);

    --Se verifica si la VLAN ya se encuentra asociada al cliente     
    CURSOR CU_VERIFICAR_VLAN_PE(CN_PERSONA_EMP_ROL NUMBER,CV_DETALLE_ELEM VARCHAR2) IS
    SELECT count(*) FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC
    WHERE persona_empresa_rol_id = CN_PERSONA_EMP_ROL 
    AND caracteristica_id = 5 AND VALOR = CV_DETALLE_ELEM 
    AND ESTADO = 'Activo';  


    Lv_Vlan               VARCHAR2(2) := PV_VLAN;
    Ln_PersonaEmpresaRol  NUMBER      := PN_PERSONA_EMP_ROL;
    Ln_DetalleElemento    NUMBER;
    Ln_Caracteristica     NUMBER := 5; -- VLAN
    Ln_RegVlanCliente     NUMBER := 0;
    Lv_MensajeError       VARCHAR2(400);


  BEGIN

      FOR I IN CU_ELEMENTO_PE LOOP

        --Se obtiene el id_detalle_elemento
        OPEN CU_OBTIENE_VLAN_PE(Lv_Vlan,I.NOMBRE_ELEMENTO);
        FETCH CU_OBTIENE_VLAN_PE INTO Ln_DetalleElemento;
        CLOSE CU_OBTIENE_VLAN_PE;


        --Se valida si ya esta asociada al cliente
        OPEN CU_VERIFICAR_VLAN_PE(Ln_PersonaEmpresaRol,TO_CHAR(Ln_DetalleElemento));
        FETCH CU_VERIFICAR_VLAN_PE INTO Ln_RegVlanCliente;
        CLOSE CU_VERIFICAR_VLAN_PE;

        --Si es igual a 0 quiere decir que aun no esta relacionada la vlan con el cliente
        IF(Ln_RegVlanCliente = 0) THEN

            --Se cambia a estado Reservada
            UPDATE DB_COMERCIAL.INFO_DETALLE_ELEMENTO SET ESTADO = 'Reservada' WHERE ID_DETALLE_ELEMENTO = Ln_DetalleElemento;

            --Se asocia el ID_DETALLE_ELEMENTO al cliente
            INSERT INTO DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC VALUES (
                DB_COMERCIAL.SEQ_INFO_PERSONA_EMP_ROL_CARAC.NEXTVAL, 
                Ln_PersonaEmpresaRol,
                Ln_Caracteristica,
                TO_CHAR(Ln_DetalleElemento),
                SYSDATE,
                SYSDATE,
                'rcabrera',
                'rcabrera',
                '127.0.0.1',
                'Activo',
                NULL
            );

            Ln_RegVlanCliente := 0;

        END IF;    

    END LOOP;

    COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
   Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM;
   DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_RESERVAR_VLAN_PE', 
                                            Lv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

  END P_RESERVAR_VLAN_PE;

  PROCEDURE P_CONTEO_SERVICIOS(
      Pn_IdElemento IN NUMBER,
      Pn_Reintento  IN NUMBER,
      Pn_Conteo OUT NUMBER,
      Pv_MensajeError OUT VARCHAR2 )
  AS
    CURSOR C_GetParametroKaspersky
    IS
      SELECT VALOR3
  	  FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
  	DB_GENERAL.ADMI_PARAMETRO_DET DET
      WHERE CAB.NOMBRE_PARAMETRO LIKE 'ANTIVIRUS_PLANES_Y_PRODS_MD%'
      AND DET.PARAMETRO_ID = CAB.ID_PARAMETRO
      AND VALOR1 = 'ANTERIOR';

    CURSOR C_GetProductoId(Lv_Valor3 VARCHAR2)
    IS
      SELECT ID_PRODUCTO
  	  FROM DB_COMERCIAL.ADMI_PRODUCTO
      WHERE DESCRIPCION_PRODUCTO LIKE Lv_Valor3||'%';

    CURSOR C_GetCaracterisitcaId
    IS
      SELECT ID_CARACTERISTICA
  	  FROM DB_COMERCIAL.ADMI_CARACTERISTICA
      WHERE DESCRIPCION_CARACTERISTICA LIKE 'SUSCRIBER_ID%';  

    CURSOR C_GetCaractReintentos
    IS
      SELECT ID_CARACTERISTICA
  	  FROM DB_COMERCIAL.ADMI_CARACTERISTICA
      WHERE DESCRIPCION_CARACTERISTICA LIKE 'NUMERO REINTENTOS%';  

    CURSOR C_GetCaractAntivirus
    IS  
      SELECT ID_CARACTERISTICA
  	  FROM DB_COMERCIAL.ADMI_CARACTERISTICA
      WHERE DESCRIPCION_CARACTERISTICA LIKE 'ANTIVIRUS%';  

    CURSOR C_GetProductoIdCaract(Ln_IdProducto NUMBER, Ln_IdCaracteristica NUMBER)
    IS
      SELECT ID_PRODUCTO_CARACTERISITICA
  	  FROM DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA
      WHERE PRODUCTO_ID = Ln_IdProducto
      AND CARACTERISTICA_ID = Ln_IdCaracteristica;  

    CURSOR C_GetServicioId(Ln_IdElemento NUMBER)
    IS
      SELECT SERVICIO_ID
  	  FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO
      WHERE ELEMENTO_ID = Ln_IdElemento; 

    CURSOR C_GetProdPlan(Ln_IdServicio NUMBER)
    IS
      SELECT PRODUCTO_ID, PLAN_ID, PUNTO_ID
  	  FROM DB_COMERCIAL.INFO_SERVICIO
      WHERE ID_SERVICIO = Ln_IdServicio
      AND (ESTADO = 'Activo' OR ESTADO = 'In-Corte');

    CURSOR C_GetSerPunto(Ln_PuntoId NUMBER)
    IS
      SELECT PRODUCTO_ID, ID_SERVICIO
  	  FROM DB_COMERCIAL.INFO_SERVICIO
      WHERE PUNTO_ID = Ln_PuntoId
      AND PRODUCTO_ID IS NOT NULL
      AND (ESTADO = 'Activo' OR ESTADO = 'In-Corte');  

    CURSOR C_GetServicioProdCaract(Ln_IdServicio NUMBER, Ln_ProdCaract NUMBER)
    IS
      SELECT ID_SERVICIO_PROD_CARACT
  	  FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
      WHERE SERVICIO_ID = Ln_IdServicio
      AND PRODUCTO_CARACTERISITICA_ID = Ln_ProdCaract;  

    CURSOR C_GetInfoPlanDet(Ln_PlanId NUMBER)
    IS
      SELECT PRODUCTO_ID
  	  FROM DB_COMERCIAL.INFO_PLAN_DET
      WHERE PLAN_ID = Ln_PlanId;  

    CURSOR C_GetInfoAntiReint(Ln_IdServicio       NUMBER,
                              Ln_CaracReintento   NUMBER,
                              Ln_Antivirus        NUMBER)
    IS  
      SELECT PRODUCTO_CARACTERISITICA_ID ANTIVIRUS
      FROM
      INFO_SERVICIO_PROD_CARACT
      WHERE SERVICIO_ID = Ln_IdServicio
      AND PRODUCTO_CARACTERISITICA_ID = Ln_Antivirus;

    Lv_Valor3               VARCHAR2(30);
    Ln_IdElemento           NUMBER;
    Ln_Contador             NUMBER;
    Ln_IdServicio           NUMBER;
    Ln_ProdCaract           NUMBER;
    Ln_IdCaracteristica     NUMBER;
    Ln_IdProducto           NUMBER;
    Ln_ProductoId           NUMBER;
    Ln_PlanId               NUMBER;
    Ln_ServProdCaract       NUMBER;
    Ln_ProductoPlanDet      NUMBER;
    Ln_PuntoId              NUMBER;
    Ln_ProdIdSer            NUMBER;
    Ln_Reintento            NUMBER;
    Ln_Antivirus            NUMBER;
    Ln_CaracReintento       NUMBER;
    Ln_ContAntivirus        NUMBER;
    Ln_ProdCaractReintento  NUMBER;
    Ln_ProdCaractAntivirus  NUMBER;
    Ln_ServicioPuntoId      NUMBER;
  BEGIN
    Ln_Contador   := 0;
    Ln_IdElemento := Pn_IdElemento;
    Ln_Reintento  := Pn_Reintento;

    --Se valida si existe plan kaspersky 
    OPEN C_GetCaracterisitcaId;
    FETCH C_GetCaracterisitcaId INTO Ln_IdCaracteristica;
    CLOSE C_GetCaracterisitcaId;

    --Se valida si existe plan kaspersky 
    OPEN C_GetCaractReintentos;
    FETCH C_GetCaractReintentos INTO Ln_CaracReintento;
    CLOSE C_GetCaractReintentos;

    --Se valida si existe plan kaspersky 
    OPEN C_GetCaractAntivirus;
    FETCH C_GetCaractAntivirus INTO Ln_Antivirus;
    CLOSE C_GetCaractAntivirus;

    FOR I_GetServicioId IN C_GetServicioId(Ln_IdElemento)
    LOOP
      Ln_IdServicio := I_GetServicioId.SERVICIO_ID;

      FOR I_GetProdPlan IN C_GetProdPlan(Ln_IdServicio)
      LOOP
        Ln_ProductoId := I_GetProdPlan.PRODUCTO_ID; 
        Ln_PlanId     := I_GetProdPlan.PLAN_ID;
        Ln_PuntoId    := I_GetProdPlan.PUNTO_ID;

        FOR I_GetSerPunto IN C_GetSerPunto(Ln_PuntoId)
        LOOP
          Ln_ProdIdSer        := I_GetSerPunto.PRODUCTO_ID; 
          Ln_ServicioPuntoId  := I_GetSerPunto.ID_SERVICIO;
          FOR I_GetParametroKaspersky IN C_GetParametroKaspersky
          LOOP
            Lv_Valor3 := I_GetParametroKaspersky.VALOR3; 

            --Se obtiene ID_PRODUCTO
            OPEN C_GetProductoId(Lv_Valor3);
            FETCH C_GetProductoId INTO Ln_IdProducto;
            CLOSE C_GetProductoId;

            IF (Ln_ProdIdSer = Ln_IdProducto) THEN

              Ln_ContAntivirus := NULL;
              --Se obtiene ID_PRODUCTO_CARACTERISTICA
              OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_IdCaracteristica);
              FETCH C_GetProductoIdCaract INTO Ln_ProdCaract;
              CLOSE C_GetProductoIdCaract;

              --Se obtiene ID_PRODUCTO_CARACTERISTICA POR REINTENTO
              OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_CaracReintento);
              FETCH C_GetProductoIdCaract INTO Ln_ProdCaractReintento;
              CLOSE C_GetProductoIdCaract;

              --Se obtiene ID_PRODUCTO_CARACTERISTICA POR ANTIVIRUS
              OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_Antivirus);
              FETCH C_GetProductoIdCaract INTO Ln_ProdCaractAntivirus;
              CLOSE C_GetProductoIdCaract;

              OPEN C_GetInfoAntiReint(Ln_ServicioPuntoId,Ln_ProdCaractReintento,Ln_ProdCaractAntivirus);
              FETCH C_GetInfoAntiReint INTO Ln_ContAntivirus;
              CLOSE C_GetInfoAntiReint;   

              IF (Ln_ContAntivirus IS NOT NULL) THEN
                CONTINUE;  
              END IF;

              OPEN C_GetServicioProdCaract(Ln_ServicioPuntoId,Ln_ProdCaract);
              FETCH C_GetServicioProdCaract INTO Ln_ServProdCaract;
              IF C_GetServicioProdCaract%NOTFOUND THEN
                Ln_Contador := Ln_Contador + 1;   
              END IF;
              CLOSE C_GetServicioProdCaract;
            END IF;
          END LOOP;
        END LOOP;

        IF (Ln_PlanId is not null) THEN
          FOR I_GetInfoPlanDet IN C_GetInfoPlanDet(Ln_PlanId)
          LOOP
            Ln_ProductoPlanDet := I_GetInfoPlanDet.PRODUCTO_ID; 
            FOR I_GetParametroKaspersky IN C_GetParametroKaspersky
            LOOP
              Lv_Valor3 := I_GetParametroKaspersky.VALOR3; 

              --Se obtiene ID_PRODUCTO
              OPEN C_GetProductoId(Lv_Valor3);
              FETCH C_GetProductoId INTO Ln_IdProducto;
              CLOSE C_GetProductoId;

              IF (Ln_ProductoPlanDet = Ln_IdProducto) THEN

                Ln_ContAntivirus := NULL;
                --Se obtiene ID_PRODUCTO_CARACTERISTICA
                OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_IdCaracteristica);
                FETCH C_GetProductoIdCaract INTO Ln_ProdCaract;
                CLOSE C_GetProductoIdCaract;

                --Se obtiene ID_PRODUCTO_CARACTERISTICA POR REINTENTO
                OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_CaracReintento);
                FETCH C_GetProductoIdCaract INTO Ln_ProdCaractReintento;
                CLOSE C_GetProductoIdCaract;

                --Se obtiene ID_PRODUCTO_CARACTERISTICA POR ANTIVIRUS
                OPEN C_GetProductoIdCaract(Ln_IdProducto,Ln_Antivirus);
                FETCH C_GetProductoIdCaract INTO Ln_ProdCaractAntivirus;
                CLOSE C_GetProductoIdCaract;

                OPEN C_GetInfoAntiReint(Ln_IdServicio,Ln_ProdCaractReintento,Ln_ProdCaractAntivirus);
                FETCH C_GetInfoAntiReint INTO Ln_ContAntivirus;
                CLOSE C_GetInfoAntiReint;   

                IF (Ln_ContAntivirus IS NOT NULL) THEN
                  CONTINUE;  
                END IF;

                OPEN C_GetServicioProdCaract(Ln_IdServicio,Ln_ProdCaract);
                FETCH C_GetServicioProdCaract INTO Ln_ServProdCaract;
                IF C_GetServicioProdCaract%NOTFOUND THEN
                  Ln_Contador := Ln_Contador + 1;   
                END IF;
                CLOSE C_GetServicioProdCaract;
              END IF;
            END LOOP;
          END LOOP;
        END IF;
      END LOOP;
    END LOOP;
    Pn_Conteo := Ln_Contador;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                        ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CONTEO_SERVICIOS', 
                                            Pv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CONTEO_SERVICIOS;

  PROCEDURE P_REENVIO_ERROR_MIGRA_X_OLT
  AS
    CURSOR C_GetRegistros(Pv_DescCaract VARCHAR2,Pv_EstadoActivo VARCHAR2, Pv_BusquedaProductos VARCHAR2)
    IS
      SELECT INFO_SERVICIO_TECNICO.ELEMENTO_ID AS ID_ELEMENTO
      FROM DB_COMERCIAL.INFO_PUNTO,
      DB_COMERCIAL.INFO_SERVICIO,
      DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT,
      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA,
      DB_COMERCIAL.ADMI_CARACTERISTICA ,
      DB_COMERCIAL.ADMI_PRODUCTO,
      DB_COMERCIAL.INFO_SERVICIO_TECNICO
      WHERE INFO_PUNTO.ID_PUNTO                                 = INFO_SERVICIO.PUNTO_ID
      AND INFO_SERVICIO.ID_SERVICIO                             = INFO_SERVICIO_PROD_CARACT.SERVICIO_ID
      AND INFO_SERVICIO_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID = ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA
      AND ADMI_PRODUCTO_CARACTERISTICA.CARACTERISTICA_ID        = ADMI_CARACTERISTICA.ID_CARACTERISTICA
      AND ADMI_PRODUCTO_CARACTERISTICA.PRODUCTO_ID              = ADMI_PRODUCTO.ID_PRODUCTO
      AND ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA        = Pv_DescCaract
      AND INFO_SERVICIO_PROD_CARACT.ESTADO                      = Pv_EstadoActivo
      AND INFO_SERVICIO_PROD_CARACT.FE_CREACION                >= to_date(TO_CHAR(sysdate - 1, 'dd/mm/yyyy'), 'dd/mm/yyyy')
      AND ADMI_PRODUCTO.DESCRIPCION_PRODUCTO LIKE Pv_BusquedaProductos
      AND INFO_SERVICIO_PROD_CARACT.VALOR IS NOT NULL
      AND INFO_SERVICIO_TECNICO.SERVICIO_ID = INFO_SERVICIO.ID_SERVICIO
      GROUP BY INFO_SERVICIO_TECNICO.ELEMENTO_ID;
    Lv_BusquedaProductos        VARCHAR2(10)   := 'I. %';
    Lv_DescCaract               VARCHAR2(37)   := 'ERROR_REPORTE_MIGRACION_MASIVA_MCAFEE';
    Lv_EstadoActivo             VARCHAR2(10)   := 'Activo';
    Lcl_PlantillaReporte        CLOB;
    Lr_GetAliasPlantillaGeneral DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_Asunto                   VARCHAR2(300);
    Lv_UsrCreacion              VARCHAR2(15)  := 'reintActMasivo';
    Lr_RegPuntoInternetXOlt     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt;
    Lt_TPuntosInternetXOlt      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_PuntosInternetXOlt;
    Lrf_PuntosIProtegidoXOlt    SYS_REFCURSOR;
    Ln_IndxPuntosIProtegidoXOlt NUMBER;
    Lv_StatusMigraLicenciasAdic VARCHAR2(13);
    Lv_MsjMigraLicenciasAdic    VARCHAR2(4000);
    Lv_GestionaLicenciasAdic    VARCHAR2(2);
    Lr_ServicioHistorial        DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_Status                   VARCHAR2(5);
    Lv_Mensaje                  VARCHAR2(4000);
    Lv_ValoresCaracts           VARCHAR2(4000);
    Lv_ValoresCaractsReporte    VARCHAR2(4000);
    Lv_NumeroReintentos         VARCHAR2(17) := 'NUMERO REINTENTOS';
    Ln_TotalNumReintentos       NUMBER;
    Le_Exception                EXCEPTION;
    CURSOR Lc_GetNumerosReintentos(Cn_ServicioId DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.SERVICIO_ID%TYPE)
    IS
      SELECT TO_NUMBER(VALOR, '999') AS VALOR FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
        WHERE ID_SERVICIO_PROD_CARACT IN
      (SELECT ISC.ID_SERVICIO_PROD_CARACT
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
      JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
      JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
      WHERE ISC.SERVICIO_ID             = Cn_ServicioId
      AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_NumeroReintentos)
      AND ISC.ESTADO                    = 'Activo'
      AND APC.ESTADO                    = 'Activo'
      );
  BEGIN
    Lv_Asunto                     := 'Error de activaci¿n por migraci¿n masiva de tecnolog¿a';
    Lcl_PlantillaReporte := Lr_GetAliasPlantillaGeneral.PLANTILLA;

    FOR I_GetRegistros IN C_GetRegistros(Lv_DescCaract, Lv_EstadoActivo,Lv_BusquedaProductos)
    LOOP
      --Se obtiene el listado de puntos que tienen servicios de Internet Protegido con tecnolog¿a McAfee
      DB_COMERCIAL.TECNK_SERVICIOS.P_GET_PTOS_INTERNET_X_REINTEN(   I_GetRegistros.ID_ELEMENTO,
                                                                Lrf_PuntosIProtegidoXOlt,
                                                                Lv_Status,
                                                                Lv_Mensaje);
      LOOP
        FETCH Lrf_PuntosIProtegidoXOlt BULK COLLECT INTO Lt_TPuntosInternetXOlt LIMIT 100;

        Ln_IndxPuntosIProtegidoXOlt := Lt_TPuntosInternetXOlt.FIRST;
        WHILE (Ln_IndxPuntosIProtegidoXOlt IS NOT NULL)
        LOOP
          Lr_RegPuntoInternetXOlt   := Lt_TPuntosInternetXOlt(Ln_IndxPuntosIProtegidoXOlt);
          Lv_Status                 := '';
          Lv_Mensaje                := '';

          -- Preguntamos si no tiene servicios adicionales
          IF Lr_RegPuntoInternetXOlt.ID_ITEM_I_PROTEGIDO IS NOT NULL AND Lr_RegPuntoInternetXOlt.VALOR_SPC_SUSCRIBER_ID IS NULL THEN
            -- Incrementar el campo de numero de reintento actualizando el registro que ya existe
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ACTUALIZA_REINTENTO(Lr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                    Lr_RegPuntoInternetXOlt.LOGIN,
                                                                    Lv_UsrCreacion,
                                                                    Lv_Status,
                                                                    Lv_ValoresCaracts,
                                                                    Lv_ValoresCaractsReporte);

            IF Lv_Status = 'ERROR' THEN
              Lv_Mensaje := Lv_ValoresCaracts;
              RAISE Le_Exception;
            END IF;  

            OPEN Lc_GetNumerosReintentos(Lr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET);
            FETCH Lc_GetNumerosReintentos INTO Ln_TotalNumReintentos;
            CLOSE Lc_GetNumerosReintentos;

            COMMIT;                                                                      

            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_REINT(Lr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                    Lr_RegPuntoInternetXOlt.LOGIN,
                                                                    Lv_UsrCreacion,
                                                                    Lv_Status,
                                                                    Lv_ValoresCaracts,
                                                                    Lv_ValoresCaractsReporte);
            IF Lv_Status = 'ERROR' THEN
              Lv_Mensaje := Lv_ValoresCaracts;
              RAISE Le_Exception;
            END IF;
            --Se activan las licencias de Internet Protegido dentro del plan con tecnolog¿a Kaspersky
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_REINT(Lr_RegPuntoInternetXOlt, 
                                                                        Lv_UsrCreacion,
                                                                        Ln_TotalNumReintentos,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);
            IF Lv_Status = 'ERROR' THEN
              ROLLBACK;
            END IF;    
          END IF;

          -- Si tiene servicios adicionales se realiza activaci¿n
          IF Lr_RegPuntoInternetXOlt.CANTIDAD_SERVICIOS_ADICIONALES > 0 THEN
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_REINTENTO_I_PROTEGIDO_ADICS(Lr_RegPuntoInternetXOlt,
                                                                            Lv_UsrCreacion,
                                                                            Lv_StatusMigraLicenciasAdic, 
                                                                            Lv_MsjMigraLicenciasAdic,
                                                                            Lv_GestionaLicenciasAdic);

            IF Lv_StatusMigraLicenciasAdic = 'ERROR' THEN
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
              Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
              Lr_ServicioHistorial.ESTADO       := Lr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
              Lr_ServicioHistorial.OBSERVACION  := Lv_MsjMigraLicenciasAdic;
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            END IF;
          ELSE
            Lv_StatusMigraLicenciasAdic := 'OK';
          END IF;
          COMMIT;

          Ln_IndxPuntosIProtegidoXOlt := Lt_TPuntosInternetXOlt.NEXT(Ln_IndxPuntosIProtegidoXOlt);
        END LOOP;
        EXIT WHEN Lrf_PuntosIProtegidoXOlt%NOTFOUND;
      END LOOP;
      CLOSE Lrf_PuntosIProtegidoXOlt;    
    END LOOP;

  EXCEPTION
  WHEN Le_Exception THEN
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_REENVIO_ERROR_MIGRA_X_OLT', 
                                            Lv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_REENVIO_ERROR_MIGRA_X_OLT', 
                                            'Error en la migraci¿n por olt ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_REENVIO_ERROR_MIGRA_X_OLT;

  PROCEDURE P_ACTIVA_I_PROTEGIDO_REINT(  
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pn_TotalNumReintentos   IN NUMBER,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Ln_NumReintentosPermitidos      NUMBER;
    Lv_Valor2InfoDetParam           VARCHAR2(100);
    Lv_Valor4InfoDetParam           VARCHAR2(100);
    Lv_NombreParamAntivirus         VARCHAR2(27) := 'ANTIVIRUS_PLANES_Y_PRODS_MD';
    Lv_Nuevo                        VARCHAR2(5)  := 'NUEVO';
    Lv_CodEmpresa                   VARCHAR2(2)  := '18';
    Lv_ValorAntivirus               VARCHAR2(100);
    Lv_ValorCodProducto             VARCHAR2(100);
    Lv_NombreParamMaxReintentos     VARCHAR2(28) := 'NUMERO_MAX_REINTENTOS_MCAFEE';
    Lv_Plan                         VARCHAR2(4)  := 'PLAN';
    Lv_Antivirus                    VARCHAR2(9)  := 'ANTIVIRUS';
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_ValorSpcCorreoElectronico    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorCantidadDisp            VARCHAR2(2);
    Lt_CorreosLicencias             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_CorreoLicencias              DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lr_RegWsGms                     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms;
    Lv_StatusWsGms                  VARCHAR2(5);
    Lv_SuscriberIdWsGms             VARCHAR2(10);
    Lcl_MensajeErrorHtmlWsGms       CLOB;
    Lv_EjecutaProcesoError          VARCHAR2(2) := 'NO';
    Lv_Status                       VARCHAR2(13);
    Lv_Mensaje                      VARCHAR2(4000);
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_GetInfoPlantilla             DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lcl_PlantillaInicial            CLOB;
    Lcl_Plantilla                   CLOB;
    Lv_Remitente                    VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lv_CorreosCliente               VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Ln_IndxLoop                     NUMBER;
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lv_ValoresCaracts               VARCHAR2(4000);
    Lcl_PlantillaInicialOK          CLOB;
    Ln_TotalNumReintentos           NUMBER;
    CURSOR Lc_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
    IS
      SELECT
        AP.PLANTILLA
      FROM
        DB_COMUNICACION.ADMI_PLANTILLA AP 
      WHERE
        AP.CODIGO = Cv_CodigoPlantilla
      AND AP.ESTADO <> Lv_EstadoEliminado;
    CURSOR Lc_GetInfoDetParam(  Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE, 
                                Cv_Valor1 DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                Cv_CodEmpresa DB_GENERAL.ADMI_PARAMETRO_DET.EMPRESA_COD%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND DET.EMPRESA_COD        = Cv_CodEmpresa
      AND DET.VALOR1             = Cv_Valor1
      AND CAB.ESTADO             = Lv_EstadoActivo
      AND DET.ESTADO             = Lv_EstadoActivo;
    CURSOR Lc_GetCaractPlan(Cn_IdItem DB_COMERCIAL.INFO_PLAN_DET.ID_ITEM%TYPE,
                            Cv_DescripcionCaract DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT PLAN_PROD_CARACT.VALOR
      FROM DB_COMERCIAL.INFO_PLAN_PRODUCTO_CARACT PLAN_PROD_CARACT
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT  
      ON PROD_CARACT.ID_PRODUCTO_CARACTERISITICA = PLAN_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT  
      ON CARACT.ID_CARACTERISTICA = PROD_CARACT.CARACTERISTICA_ID
      WHERE PLAN_PROD_CARACT.PLAN_DET_ID = Cn_IdItem
      AND CARACT.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaract
      AND ROWNUM = 1;
  BEGIN
    OPEN Lc_GetInfoDetParam(Lv_NombreParamAntivirus, Lv_Nuevo, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_Valor2InfoDetParam, Lv_Valor4InfoDetParam;
    CLOSE Lc_GetInfoDetParam;
    Lv_ValorAntivirus   := Lv_Valor2InfoDetParam;
    Lv_ValorCodProducto := Lv_Valor4InfoDetParam;

    OPEN Lc_GetInfoDetParam(Lv_NombreParamMaxReintentos, Lv_Plan, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_Valor2InfoDetParam, Lv_Valor4InfoDetParam;
    CLOSE Lc_GetInfoDetParam;


    Ln_TotalNumReintentos           := Pn_TotalNumReintentos;
    Ln_NumReintentosPermitidos      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_Valor2InfoDetParam,'^\d+')), 1);

    Lv_ValorSpcCorreoElectronico    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                                                    Lv_CorreoElectronico);
    IF Lv_ValorSpcCorreoElectronico IS NOT NULL THEN
      Lv_CorreoLicencias  := Lv_ValorSpcCorreoElectronico;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_CorreoElectronico,
                                                                            Lv_CorreoLicencias,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_TieneInternet,
                                                                            Lv_Plan,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      OPEN Lc_GetCaractPlan(Pr_RegPuntoInternetXOlt.ID_ITEM_I_PROTEGIDO, Lv_CantDispositivos);
      FETCH Lc_GetCaractPlan INTO Lv_ValorCantidadDisp;
      CLOSE Lc_GetCaractPlan;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_CantDispositivos,
                                                                            COALESCE(Lv_ValorCantidadDisp,'3'),
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                            Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                            Lv_EstadoActivo,
                                                                            Lv_Antivirus,
                                                                            Lv_ValorAntivirus,
                                                                            Lv_EstadoActivo,
                                                                            Pv_UsrCreacion,
                                                                            Lv_Mensaje
                                                                          );
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    ELSE
      Lv_CorreoLicencias := NULL;
    END IF;

    IF (Lv_CorreoLicencias IS NOT NULL AND Lv_CorreoLicencias <> 'SIN CORREO') THEN
      Lr_RegWsGms.Identificacion  := Pr_RegPuntoInternetXOlt.IDENTIFICACION_CLIENTE;
      Lr_RegWsGms.Email           := Lv_CorreoLicencias;
      IF Pr_RegPuntoInternetXOlt.RAZON_SOCIAL IS NOT NULL THEN
        Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
        Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
      ELSE
        Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.NOMBRES;
        Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.APELLIDOS;
      END IF;
      Lr_RegWsGms.Cantidad      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_ValorCantidadDisp,'^\d+')), 3);
      Lr_RegWsGms.SuscriberId   := 0;

      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS(  Lr_RegWsGms,
                                                                        'Activacion',
                                                                        Lv_StatusWsGms,
                                                                        Lv_SuscriberIdWsGms,
                                                                        Lcl_MensajeErrorHtmlWsGms);
      IF Lv_StatusWsGms = 'OK' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'Se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                             || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);

        --Env¿o de Correo al Cliente al activarse el servicio Internet Protegido
        OPEN Lc_GetPlantilla('ACTIVAIPMP');
        FETCH Lc_GetPlantilla INTO Lcl_PlantillaInicialOK;
        CLOSE Lc_GetPlantilla;
        Lcl_Plantilla           := Lcl_PlantillaInicialOK;
        Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreCliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
        Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ correo }}', Lv_CorreoLicencias);

        Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'NO');
        Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
        WHILE (Ln_IndxLoop IS NOT NULL)
        LOOP
          Lv_CorreosCliente := Lt_CorreosLicencias(Ln_IndxLoop) || ',';
          Ln_IndxLoop       := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
        END LOOP;

        IF Lv_CorreosCliente IS NULL THEN
          Lv_CorreosCliente := Lv_Remitente || ',';
        END IF;

        DB_GENERAL.GNRLPCK_UTIL.P_SEND_MAIL_SMTP(   Lv_Remitente, 
                                                    Lv_CorreosCliente, 
                                                    ',', 
                                                    'Bienvenido a NetlifeDefense, el sistema de ' ||
                                                    'seguridad inform¿tica para proteger tu vida digital.', 
                                                    NULL, 
                                                    NULL, 
                                                    Lcl_Plantilla, 
                                                    'text/html; charset=iso-8859-1');

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY(Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                        Pr_RegPuntoInternetXOlt.ID_PROD_I_PROTEGIDO,
                                                                        Lv_SuscriberIdWsGms,
                                                                        Lv_ValorCodProducto,
                                                                        Lv_ValorAntivirus,
                                                                        Pv_UsrCreacion,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);

        IF Lv_Status = 'ERROR' THEN
          RAISE Le_Exception;
        END IF;
        Pv_Status := 'OK';

        IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
          Lr_RegWsGms.SuscriberId   := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_SuscriberIdWsGms,'^\d+')), 0);
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO(   Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET,
                                                                        Lr_RegWsGms,
                                                                        Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO,
                                                                        'producto ',
                                                                        ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan',
                                                                        Pv_UsrCreacion,
                                                                        Lv_Status,
                                                                        Lv_Mensaje);
          IF Lv_Status = 'ERROR' THEN
            Pv_Status                         := 'ERROR-PROCESO';
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
            Lr_ServicioHistorial.OBSERVACION  := 'No se ha podido cortar las licencias de Internet Protegido';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        END IF;                                         
      ELSE
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'Error en la ejecuci¿n del web service<br>' || Lcl_MensajeErrorHtmlWsGms;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
          Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
          Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
          Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
          Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                               || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan '
                                               || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        ELSE
          Lv_EjecutaProcesoError := 'SI';
        END IF;
      END IF;
    ELSE
      IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n y corte '
                                             || 'del producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO || ' con tecnolog¿a ' 
                                             || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                             || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan '
                                             || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      ELSE
        Lv_EjecutaProcesoError            := 'SI';
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
        Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
        Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
        Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n '
                                             || 'del producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO || ' con tecnolog¿a ' 
                                             || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      END IF;
    END IF;

    IF Lv_EjecutaProcesoError = 'SI' THEN
      IF Lv_Status = 'ERROR' THEN
        Lv_Mensaje := Lv_ValoresCaracts;
        RAISE Le_Exception;
      END IF;                                                                    

      --Env¿a de correo en caso de que se presente un error al activar el servicio Internet Protegido (Reintento)
      Lr_GetInfoPlantilla     := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('ERROR_MCAFEE');
      Lcl_PlantillaInicial    := Lr_GetInfoPlantilla.PLANTILLA;
      Lcl_Plantilla           := Lcl_PlantillaInicial;
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ cliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreProductoMcAfee }}', Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ login }}', Pr_RegPuntoInternetXOlt.LOGIN);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreJurisdiccion }}', Pr_RegPuntoInternetXOlt.NOMBRE_JURISDICCION);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ tipoServicio }}','Plan');
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombrePlan }}',Pr_RegPuntoInternetXOlt.NOMBRE_PLAN);
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ observacion | raw }}', 
                                 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan. Reintento #' || Ln_TotalNumReintentos );
      Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ estadoServicio }}', Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET);
      IF Lr_GetInfoPlantilla.ALIAS_CORREOS IS NOT NULL THEN
        Lr_GetInfoPlantilla.ALIAS_CORREOS := REPLACE(Lr_GetInfoPlantilla.ALIAS_CORREOS, ';', ',') || ',';
      ELSE 
        Lr_GetInfoPlantilla.ALIAS_CORREOS := Lv_Remitente;
      END IF;
      DB_COMUNICACION.CUKG_TRANSACTIONS.P_SEND_MAIL(    Lv_Remitente, 
                                                        Lr_GetInfoPlantilla.ALIAS_CORREOS, 
                                                        'Error en Activacion de ' ||
                                                        Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO ||
                                                        ' - ' || Pr_RegPuntoInternetXOlt.LOGIN,
                                                        SUBSTR(Lcl_Plantilla, 1, 32767), 
                                                        'text/html; charset=iso-8859-1', 
                                                        Lv_Mensaje);
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
      Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
      Lr_ServicioHistorial.ESTADO       := Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET;
      Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el producto ' || Pr_RegPuntoInternetXOlt.DESCRIPCION_PROD_I_PROTEGIDO
                                           || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' incluido en el plan';
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
      IF Lv_Mensaje IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    ELSE
      COMMIT;
    END IF;
    IF Pv_Status IS NULL THEN
      Pv_Status := 'ERROR';
    END IF;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_REINT', 
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  :=  'No se ha podido realizar la activaci¿n del servicio Internet Protegido incluido en el plan del servicio con ID ' 
                    || Pr_RegPuntoInternetXOlt.ID_SERVICIO_INTERNET;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTIVA_I_PROTEGIDO_REINT', 
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ACTIVA_I_PROTEGIDO_REINT;

  PROCEDURE P_ACTUALIZA_REINTENTO(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2)
  AS
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_Sku                          VARCHAR2(3) := 'SKU';
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lv_Password                     VARCHAR2(8) := 'PASSWORD';
    Lv_PartnerRef                   VARCHAR2(10) := 'PARTNERREF';
    Lv_CustomerContextId            VARCHAR2(17) := 'CUSTOMERCONTEXTID';
    Lv_Referencia                   VARCHAR2(10) := 'REFERENCIA';
    Lv_ValorSpcCorreoElectronico    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcTieneInternet        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCantDispositivos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcSku                  DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcNumeroReintentos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPassword             DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPartnerRef           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCustomerContextId    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcReferencia           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_ValoresCaracts               VARCHAR2(4000);
  BEGIN
    Lv_ValorSpcCorreoElectronico    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CorreoElectronico);
    IF Lv_ValorSpcCorreoElectronico IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CorreoElectronico || ': ' || Lv_ValorSpcCorreoElectronico || '<br>';
    END IF;

    Lv_ValorSpcTieneInternet        := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_TieneInternet);
    IF Lv_ValorSpcTieneInternet IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_TieneInternet || ': ' || Lv_ValorSpcTieneInternet || '<br>';
    END IF;

    Lv_ValorSpcCantDispositivos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CantDispositivos);
    IF Lv_ValorSpcCantDispositivos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CantDispositivos || ': ' || Lv_ValorSpcCantDispositivos || '<br>';
    END IF;

    Lv_ValorSpcSku                  := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Sku);
    IF Lv_ValorSpcSku IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Sku || ': ' || Lv_ValorSpcSku || '<br>';
    END IF;

    Lv_ValorSpcNumeroReintentos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_NumeroReintentos);
    IF Lv_ValorSpcNumeroReintentos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_NumeroReintentos || ': ' || Lv_ValorSpcNumeroReintentos || '<br>';
    END IF;

    Lv_ValorSpcPassword             := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Password);
    IF Lv_ValorSpcPassword IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Password || ': ' || Lv_ValorSpcPassword || '<br>';
    END IF;

    Lv_ValorSpcPartnerRef           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_PartnerRef);
    IF Lv_ValorSpcPartnerRef IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_PartnerRef || ': ' || Lv_ValorSpcPartnerRef || '<br>';
    END IF;


    Lv_ValorSpcCustomerContextId    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CustomerContextId);
    IF Lv_ValorSpcCustomerContextId IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_CustomerContextId || ': ' || Lv_ValorSpcCustomerContextId || '<br>';
    END IF;

    Lv_ValorSpcReferencia           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Referencia);
    IF Lv_ValorSpcReferencia IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Referencia || ': ' || Lv_ValorSpcReferencia || '<br>';
    END IF;

    Pv_ValoresCaractsReporte :=    Lv_ValorSpcPartnerRef || ';' || 
                                    Lv_ValorSpcCustomerContextId || ';' ||
                                    Lv_ValorSpcSku || ';' ||
                                    Pv_Login || ';' ||
                                    Lv_ValorSpcCorreoElectronico || ';';


    UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    SET VALOR                     = TO_NUMBER(VALOR, '999') + 1,
      FE_ULT_MOD                   = SYSDATE,
      USR_ULT_MOD                  = Pv_UsrCreacion 
    WHERE ID_SERVICIO_PROD_CARACT IN
      (SELECT ISC.ID_SERVICIO_PROD_CARACT
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
      JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
      JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
      WHERE ISC.SERVICIO_ID             = Pn_IdServicio
      AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_NumeroReintentos)
      AND ISC.ESTADO                    = Lv_EstadoActivo
      AND APC.ESTADO                    = Lv_EstadoActivo
      );
    IF Lv_ValoresCaracts IS NOT NULL THEN 
      Lv_ValoresCaracts := 'PROCESO: REINTENTO ACTIVACION<br>' || Lv_ValoresCaracts;
    END IF;
    Pv_Status           := 'OK';
    Pv_ValoresCaracts  := Lv_ValoresCaracts;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status                := 'ERROR';
    Pv_ValoresCaracts        := 'No se ha podido actualizar el n¿mero de reintentos ' || Pn_IdServicio;
    Pv_ValoresCaractsReporte := '';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTUALIZA_REINTENTO', 
                                            'Error al actualizar numeros de reintentos - ' || SQLCODE ||
                                            ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ACTUALIZA_REINTENTO;

  PROCEDURE P_REINTENTO_I_PROTEGIDO_ADICS(
    Pr_RegPuntoInternetXOlt IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntoInternetXOlt,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2, 
    Pv_Mensaje              OUT VARCHAR2,
    Pv_GestionaLicencias    OUT VARCHAR2)
  AS
    Lrf_ServsAdicIProtegidoXPto     SYS_REFCURSOR;
    Lv_Status                       VARCHAR2(13);
    Lv_Mensaje                      VARCHAR2(4000);
    Ln_IndxServsAdicIProtegidoXPto  NUMBER;
    Lr_RegServIProtegidoAdicsXPto   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_ServIProtegidoAdicsXPto;
    Lt_TServIProtegidoAdicsXPto     DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ServIProtegidoAdicsXPto;
    Lt_TServIProtegidoXActivar      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ServiciosIProtegidoXActivar;
    Lv_ValoresCaracts               VARCHAR2(4000);
    Lv_ValoresCaractsReporte        VARCHAR2(4000);
    Lv_NombreParamAntivirus         VARCHAR2(27) := 'ANTIVIRUS_PLANES_Y_PRODS_MD';
    Lv_Nuevo                        VARCHAR2(5) := 'NUEVO';
    Lv_ValorAntivirus               VARCHAR2(100);
    Lv_ValorCodProducto             VARCHAR2(100);
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_ProductoInternetProtegido    DB_COMERCIAL.ADMI_PRODUCTO%ROWTYPE;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_CodEmpresa                   VARCHAR2(2) := '18';
    Lv_DescripcionProdIProtegido    VARCHAR2(24) := 'I. PROTEGIDO MULTI PAID';
    Lv_UsrCreacionMigraMcAfee       VARCHAR2(11) := 'ReintActiva';
    Lt_CorreosLicencias             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lr_RegWsGms                     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoServicioWsGms;
    Lv_StatusWsGms                  VARCHAR2(5);
    Lv_SuscriberIdWsGms             VARCHAR2(10);
    Lcl_MensajeErrorHtmlWsGms       CLOB;
    Lv_CorreoLicencias              DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lr_GetInfoPlantilla             DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lcl_PlantillaInicial            CLOB;
    Lcl_Plantilla                   CLOB;
    Lv_Remitente                    VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lv_CorreosCliente               VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Ln_IdMotivoCancel               DB_GENERAL.ADMI_MOTIVO.ID_MOTIVO%TYPE;
    Lv_NombreMotivoCancel           VARCHAR2(30) := 'Cancelacion por Regularizacion';
    Lv_EjecutaProcesoError          VARCHAR2(2);
    Ln_IndxLoop                     NUMBER;
    Lr_InfoServicio                 DB_COMERCIAL.INFO_SERVICIO%ROWTYPE;
    Lv_ExistenServicios             VARCHAR2(2);
    Ln_ContadorOK                   NUMBER := 0;
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lcl_PlantillaInicialOK          CLOB;
    Ln_TotalNumReintentos           NUMBER;
    Lv_UsrCreacion                  VARCHAR2(15)  := 'reintActMasivo';
    CURSOR Lc_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
    IS
      SELECT
        AP.PLANTILLA
      FROM
        DB_COMUNICACION.ADMI_PLANTILLA AP 
      WHERE
        AP.CODIGO = Cv_CodigoPlantilla
      AND AP.ESTADO <> Lv_EstadoEliminado;
    CURSOR Lc_GetProductoIProtegido
    IS
      SELECT PROD.*
      FROM DB_COMERCIAL.ADMI_PRODUCTO PROD
      WHERE PROD.DESCRIPCION_PRODUCTO = Lv_DescripcionProdIProtegido
      AND PROD.ESTADO = Lv_EstadoActivo
      AND PROD.EMPRESA_COD = Lv_CodEmpresa;
    CURSOR Lc_GetInfoDetParam(  Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE, 
                                Cv_Valor1 DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                Cv_CodEmpresa DB_GENERAL.ADMI_PARAMETRO_DET.EMPRESA_COD%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET  
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND DET.EMPRESA_COD        = Cv_CodEmpresa
      AND DET.VALOR1             = Cv_Valor1
      AND CAB.ESTADO             = Lv_EstadoActivo
      AND DET.ESTADO             = Lv_EstadoActivo;
    CURSOR Lc_GetEstadoInternet(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT ESTADO
      FROM DB_COMERCIAL.INFO_SERVICIO 
      WHERE ID_SERVICIO = Cn_IdServicio;
    CURSOR Lc_GetMotivoCancel(Cv_NombreMotivo DB_GENERAL.ADMI_MOTIVO.NOMBRE_MOTIVO%TYPE)
    IS
      SELECT ID_MOTIVO
      FROM DB_GENERAL.ADMI_MOTIVO 
      WHERE NOMBRE_MOTIVO = Cv_NombreMotivo
      AND ROWNUM = 1;
    CURSOR Lc_GetNumerosReintentos(Cn_ServicioId DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.SERVICIO_ID%TYPE)
    IS
      SELECT TO_NUMBER(VALOR, '999') AS VALOR FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
        WHERE ID_SERVICIO_PROD_CARACT IN
      (SELECT ISC.ID_SERVICIO_PROD_CARACT
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
      JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
      JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
      WHERE ISC.SERVICIO_ID             = Cn_ServicioId
      AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_NumeroReintentos)                                      
      AND ISC.ESTADO                    = 'Activo'
      AND APC.ESTADO                    = 'Activo'
      );  
  BEGIN
    OPEN Lc_GetMotivoCancel(Lv_NombreMotivoCancel);
    FETCH Lc_GetMotivoCancel INTO Ln_IdMotivoCancel;
    CLOSE Lc_GetMotivoCancel;

    OPEN Lc_GetInfoDetParam(Lv_NombreParamAntivirus, Lv_Nuevo, Lv_CodEmpresa);
    FETCH Lc_GetInfoDetParam INTO Lv_ValorAntivirus, Lv_ValorCodProducto;
    CLOSE Lc_GetInfoDetParam;

    OPEN Lc_GetProductoIProtegido;
    FETCH Lc_GetProductoIProtegido INTO Lr_ProductoInternetProtegido;
    CLOSE Lc_GetProductoIProtegido;

    OPEN Lc_GetPlantilla('ACTIVAIPMP');
    FETCH Lc_GetPlantilla INTO Lcl_PlantillaInicialOK;
    CLOSE Lc_GetPlantilla;

    Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'SI');
    Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
    WHILE (Ln_IndxLoop IS NOT NULL)
    LOOP
      Lv_CorreoLicencias    := Lt_CorreosLicencias(Ln_IndxLoop);
      Ln_IndxLoop           := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
    END LOOP;

    IF Lv_CorreoLicencias IS NULL THEN
      Lv_CorreoLicencias := 'SIN CORREO';
    END IF;

    Lv_ExistenServicios := 'NO';
    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_REINT_ADICS_I_PROTEGIDO(  Pr_RegPuntoInternetXOlt.ID_PUNTO,
                                                                Lrf_ServsAdicIProtegidoXPto,
                                                                Lv_Status,
                                                                Lv_Mensaje);

    LOOP
      FETCH Lrf_ServsAdicIProtegidoXPto BULK COLLECT INTO Lt_TServIProtegidoAdicsXPto LIMIT 100;
      Ln_IndxServsAdicIProtegidoXPto := Lt_TServIProtegidoAdicsXPto.FIRST;
      WHILE (Ln_IndxServsAdicIProtegidoXPto IS NOT NULL)
      LOOP
        Lv_ExistenServicios           := 'SI';
        Pv_GestionaLicencias          := 'SI';

        Lr_RegServIProtegidoAdicsXPto   := Lt_TServIProtegidoAdicsXPto(Ln_IndxServsAdicIProtegidoXPto);
        Lv_SuscriberIdWsGms             := '';
        Lcl_MensajeErrorHtmlWsGms       := '';
        Lv_EjecutaProcesoError          := 'NO';
        Lv_StatusWsGms                  := '';
        Lv_Status                       := '';
        Lv_Mensaje                      := '';

        -- Incrementar el campo de numero de reintento actualizando el registro que ya existe
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ACTUALIZA_REINTENTO(Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                    Lr_RegServIProtegidoAdicsXPto.LOGIN,
                                                                    Lv_UsrCreacion,
                                                                    Lv_Status,
                                                                    Lv_ValoresCaracts,
                                                                    Lv_ValoresCaractsReporte);

        IF Lv_Status = 'ERROR' THEN
          Lv_Mensaje := Lv_ValoresCaracts;
          RAISE Le_Exception;
        END IF;

        OPEN Lc_GetNumerosReintentos(Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO);
        FETCH Lc_GetNumerosReintentos INTO Ln_TotalNumReintentos;
        CLOSE Lc_GetNumerosReintentos;
        COMMIT;

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_REINT(Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                    Lr_RegServIProtegidoAdicsXPto.LOGIN,
                                                                    Lv_UsrCreacion,
                                                                    Lv_Status,
                                                                    Lv_ValoresCaracts,
                                                                    Lv_ValoresCaractsReporte);

        IF Lv_CorreoLicencias IS NOT NULL AND Lv_CorreoLicencias <> 'SIN CORREO' THEN
          Lr_RegWsGms.Identificacion  := Pr_RegPuntoInternetXOlt.IDENTIFICACION_CLIENTE;
          Lr_RegWsGms.Email           := Lv_CorreoLicencias;
          IF Pr_RegPuntoInternetXOlt.RAZON_SOCIAL IS NOT NULL THEN
            Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
            Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.RAZON_SOCIAL;
          ELSE
            Lr_RegWsGms.Nombres     := Pr_RegPuntoInternetXOlt.NOMBRES;
            Lr_RegWsGms.Apellidos   := Pr_RegPuntoInternetXOlt.APELLIDOS;
          END IF;
          Lr_RegWsGms.Cantidad      := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lr_RegServIProtegidoAdicsXPto.CANT_DISPOSITIVOS,'^\d+')), 3);
          Lr_RegWsGms.SuscriberId   := 0;

          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INVOCA_WEB_SERVICE_GMS(  Lr_RegWsGms,
                                                                            'Activacion',
                                                                            Lv_StatusWsGms,
                                                                            Lv_SuscriberIdWsGms,
                                                                            Lcl_MensajeErrorHtmlWsGms);

          IF Lv_StatusWsGms = 'OK' THEN
            Lr_InfoServicio               := NULL;
            Lr_InfoServicio.ESTADO        := 'Activo';
            Lr_InfoServicio.ID_SERVICIO   := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_SERVICIO(Lr_InfoServicio, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;

            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacionMigraMcAfee;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := Lv_EstadoActivo;
            Lr_ServicioHistorial.OBSERVACION  := 'Se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);

            --Env¿o de Correo al Cliente al activarse el servicio Internet Protegido
            Lcl_Plantilla           := Lcl_PlantillaInicialOK;
            Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreCliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
            Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ correo }}', Lv_CorreoLicencias);

            Lt_CorreosLicencias := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_CORREOS_LICENCIAS(Pr_RegPuntoInternetXOlt.ID_PUNTO, 'NO');
            Ln_IndxLoop := Lt_CorreosLicencias.FIRST;
            WHILE (Ln_IndxLoop IS NOT NULL)
            LOOP
              Lv_CorreosCliente := Lt_CorreosLicencias(Ln_IndxLoop) || ',';
              Ln_IndxLoop       := Lt_CorreosLicencias.NEXT(Ln_IndxLoop);
            END LOOP;

            IF Lv_CorreosCliente IS NULL THEN
              Lv_CorreosCliente := Lv_Remitente || ',';
            END IF;

            DB_GENERAL.GNRLPCK_UTIL.P_SEND_MAIL_SMTP(   Lv_Remitente, 
                                                        Lv_CorreosCliente, 
                                                        ',', 
                                                        'Bienvenido a NetlifeDefense, el sistema de ' ||
                                                        'seguridad inform¿tica para proteger tu vida digital.', 
                                                        NULL, 
                                                        NULL, 
                                                        Lcl_Plantilla , 
                                                        'text/html; charset=iso-8859-1');

            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_CARACTS_KASPERSKY(Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                            Lr_ProductoInternetProtegido.ID_PRODUCTO,
                                                                            Lv_SuscriberIdWsGms,
                                                                            Lv_ValorCodProducto,
                                                                            Lv_ValorAntivirus,
                                                                            Lv_UsrCreacionMigraMcAfee,
                                                                            Lv_Status,
                                                                            Lv_Mensaje);

            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
            Ln_ContadorOK := Ln_ContadorOK + 1;
            IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
              Lr_RegWsGms.SuscriberId   := COALESCE(TO_NUMBER(REGEXP_SUBSTR(Lv_SuscriberIdWsGms,'^\d+')), 0);
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CORTE_I_PROTEGIDO(   Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO,
                                                                            Lr_RegWsGms,
                                                                            Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO,
                                                                            'servicio ',
                                                                            ' con tecnolog¿a ' || Lv_ValorAntivirus,
                                                                            Lv_UsrCreacionMigraMcAfee,
                                                                            Lv_Status,
                                                                            Lv_Mensaje);
              IF Lv_Status = 'ERROR' THEN
                Ln_ContadorOK := Ln_ContadorOK - 1;
                Lr_ServicioHistorial              := NULL;
                Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
                Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
                Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
                Lr_ServicioHistorial.ESTADO       := 'In-Corte';
                Lr_ServicioHistorial.OBSERVACION  := 'No se ha podido cortar las licencias de Internet Protegido';
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
              END IF;
              Lr_InfoServicio               := NULL;
              Lr_InfoServicio.ESTADO        := 'In-Corte';
              Lr_InfoServicio.ID_SERVICIO   := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_UPDATE_INFO_SERVICIO(Lr_InfoServicio, Lv_Mensaje);
              IF Lv_Mensaje IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            END IF;                                         
          ELSE
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'Error en la ejecuci¿n del web service<br>' || Lcl_MensajeErrorHtmlWsGms;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
            IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
              Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
              Lr_ServicioHistorial.ESTADO       := 'Pendiente';
              Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                   || ' con tecnolog¿a ' || Lv_ValorAntivirus 
                                                   || ' al ejecutarse la migraci¿n de tecnolog¿a';
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
              IF Lv_Mensaje IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            ELSE
              Lv_EjecutaProcesoError := 'SI';
            END IF;
          END IF;
        ELSE
          IF Pr_RegPuntoInternetXOlt.ESTADO_SERVICIO_INTERNET = 'In-Corte' THEN
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n y corte '
                                                 || 'del producto ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO || ' con tecnolog¿a ' 
                                                 || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;

            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                                 || ' con tecnolog¿a ' || Lv_ValorAntivirus 
                                                 || ' al ejecutarse la migraci¿n de tecnolog¿a de Internet Protegido';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          ELSE
            Lv_EjecutaProcesoError  := 'SI';
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
            Lr_ServicioHistorial.ESTADO       := 'Pendiente';
            Lr_ServicioHistorial.OBSERVACION  := 'El correo debe ser actualizado para poder realizar la activaci¿n '
                                                 || 'del producto ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO || ' con tecnolog¿a ' 
                                                 || Lv_ValorAntivirus || '<br /> Valor Actual: <b>' || Lv_CorreoLicencias || '</b>';
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
            IF Lv_Mensaje IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        END IF;

        IF Lv_EjecutaProcesoError = 'SI' THEN
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          --Env¿a de correo en caso de que se presente un error al activar el servicio Internet Protegido (Reintento)
          Lr_GetInfoPlantilla     := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('ERRORACTIVAIPMP');
          Lcl_PlantillaInicial    := Lr_GetInfoPlantilla.PLANTILLA;
          Lcl_Plantilla           := Lcl_PlantillaInicial;
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ cliente }}', Pr_RegPuntoInternetXOlt.CLIENTE);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreProducto }}', Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ login }}', Pr_RegPuntoInternetXOlt.LOGIN);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreJurisdiccion }}', Pr_RegPuntoInternetXOlt.NOMBRE_JURISDICCION);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ tipoServicio }}', 'Producto');
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ nombreServicio }}', Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ observacion | raw }}', 
                                     'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                     || ' con tecnolog¿a ' || Lv_ValorAntivirus || ' . Reintento #' || Ln_TotalNumReintentos);
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ estadoServicio }}', 'Pendiente');
          Lcl_Plantilla           := REPLACE(Lcl_Plantilla,'{{ descripcionServicio }}', 'con tecnolog¿a ' || Lv_ValorAntivirus);

          IF Lr_GetInfoPlantilla.ALIAS_CORREOS IS NOT NULL THEN
            Lr_GetInfoPlantilla.ALIAS_CORREOS := REPLACE(Lr_GetInfoPlantilla.ALIAS_CORREOS, ';', ',') || ',';
          ELSE 
            Lr_GetInfoPlantilla.ALIAS_CORREOS := Lv_Remitente;
          END IF;

          DB_COMUNICACION.CUKG_TRANSACTIONS.P_SEND_MAIL(    Lv_Remitente, 
                                                            Lr_GetInfoPlantilla.ALIAS_CORREOS, 
                                                            'Error en Activacion de ' ||
                                                            Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO ||
                                                            ' - ' || Pr_RegPuntoInternetXOlt.LOGIN ,
                                                            SUBSTR(Lcl_Plantilla, 1, 32767), 
                                                            'text/html; charset=iso-8859-1', 
                                                            Lv_Mensaje);
          Lr_ServicioHistorial              := NULL;
          Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegServIProtegidoAdicsXPto.ID_SERVICIO;
          Lr_ServicioHistorial.USR_CREACION := Pv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := '127.0.0.1';
          Lr_ServicioHistorial.ESTADO       := 'Pendiente';
          Lr_ServicioHistorial.OBSERVACION  := 'No se activ¿ el servicio ' || Lr_ProductoInternetProtegido.DESCRIPCION_PRODUCTO
                                               || ' con tecnolog¿a ' || Lv_ValorAntivirus;
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        END IF;
        Ln_IndxServsAdicIProtegidoXPto := Lt_TServIProtegidoAdicsXPto.NEXT(Ln_IndxServsAdicIProtegidoXPto);
      END LOOP;
      EXIT WHEN Lrf_ServsAdicIProtegidoXPto%NOTFOUND;
    END LOOP;
    CLOSE Lrf_ServsAdicIProtegidoXPto;

    COMMIT;
    IF Lv_ExistenServicios = 'SI' THEN
      IF Ln_ContadorOK = Lt_TServIProtegidoXActivar.COUNT THEN
        Pv_Status := 'OK';
      ELSE
        Pv_Status := 'ERROR-PROCESO';
      END IF;
    ELSE
      Pv_Status := 'OK';
    END IF;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_REINTENTO_I_PROTEGIDO_ADICS',
                                            Pv_Mensaje,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'Los servicios Internet Protegido no pudieron ser migrados ya que el proceso present¿ ' ||
                   'problemas, por favor comun¿quese con Sistemas';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_REINTENTO_I_PROTEGIDO_ADICS',
                                            Pv_Mensaje || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_REINTENTO_I_PROTEGIDO_ADICS;

  PROCEDURE P_ELIMINA_CARACTS_REINT(   
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_Login                    IN DB_COMERCIAL.INFO_PUNTO.LOGIN%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_ValoresCaracts           OUT VARCHAR2,
    Pv_ValoresCaractsReporte    OUT VARCHAR2)
  AS
    Lv_CorreoElectronico            VARCHAR2(18) := 'CORREO ELECTRONICO';
    Lv_TieneInternet                VARCHAR2(14) := 'TIENE INTERNET';
    Lv_CantDispositivos             VARCHAR2(21) := 'CANTIDAD DISPOSITIVOS';
    Lv_Sku                          VARCHAR2(3) := 'SKU';
    Lv_NumeroReintentos             VARCHAR2(17) := 'NUMERO REINTENTOS';
    Lv_Password                     VARCHAR2(8) := 'PASSWORD';
    Lv_PartnerRef                   VARCHAR2(10) := 'PARTNERREF';
    Lv_CustomerContextId            VARCHAR2(17) := 'CUSTOMERCONTEXTID';
    Lv_Referencia                   VARCHAR2(10) := 'REFERENCIA';
    Lv_ValorSpcCorreoElectronico    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcTieneInternet        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCantDispositivos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcSku                  DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcNumeroReintentos     DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPassword             DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcPartnerRef           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcCustomerContextId    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_ValorSpcReferencia           DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.VALOR%TYPE;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lv_ValoresCaracts               VARCHAR2(4000);
  BEGIN
    Lv_ValorSpcCorreoElectronico    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CorreoElectronico);
    IF Lv_ValorSpcCorreoElectronico IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CorreoElectronico || ': ' || Lv_ValorSpcCorreoElectronico || '<br>';
    END IF;

    Lv_ValorSpcTieneInternet        := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_TieneInternet);
    IF Lv_ValorSpcTieneInternet IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_TieneInternet || ': ' || Lv_ValorSpcTieneInternet || '<br>';
    END IF;

    Lv_ValorSpcCantDispositivos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CantDispositivos);
    IF Lv_ValorSpcCantDispositivos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_CantDispositivos || ': ' || Lv_ValorSpcCantDispositivos || '<br>';
    END IF;

    Lv_ValorSpcSku                  := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Sku);
    IF Lv_ValorSpcSku IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Sku || ': ' || Lv_ValorSpcSku || '<br>';
    END IF;

    Lv_ValorSpcNumeroReintentos     := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_NumeroReintentos);
    IF Lv_ValorSpcNumeroReintentos IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_NumeroReintentos || ': ' || Lv_ValorSpcNumeroReintentos || '<br>';
    END IF;

    Lv_ValorSpcPassword             := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Password);
    IF Lv_ValorSpcPassword IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Password || ': ' || Lv_ValorSpcPassword || '<br>';
    END IF;

    Lv_ValorSpcPartnerRef           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_PartnerRef);
    IF Lv_ValorSpcPartnerRef IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_PartnerRef || ': ' || Lv_ValorSpcPartnerRef || '<br>';
    END IF;


    Lv_ValorSpcCustomerContextId    := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_CustomerContextId);
    IF Lv_ValorSpcCustomerContextId IS NOT NULL THEN
      Lv_ValoresCaracts        := Lv_ValoresCaracts || Lv_CustomerContextId || ': ' || Lv_ValorSpcCustomerContextId || '<br>';
    END IF;

    Lv_ValorSpcReferencia           := DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT( Pn_IdServicio,
                                                                                                    Lv_Referencia);
    IF Lv_ValorSpcReferencia IS NOT NULL THEN
      Lv_ValoresCaracts := Lv_ValoresCaracts || Lv_Referencia || ': ' || Lv_ValorSpcReferencia || '<br>';
    END IF;

    Pv_ValoresCaractsReporte :=    Lv_ValorSpcPartnerRef || ';' || 
                                    Lv_ValorSpcCustomerContextId || ';' ||
                                    Lv_ValorSpcSku || ';' ||
                                    Pv_Login || ';' ||
                                    Lv_ValorSpcCorreoElectronico || ';';


    UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
    SET ESTADO                     = Lv_EstadoEliminado,
      FE_ULT_MOD                   = SYSDATE,
      USR_ULT_MOD                  = Pv_UsrCreacion
    WHERE ID_SERVICIO_PROD_CARACT IN
      (SELECT ISC.ID_SERVICIO_PROD_CARACT
      FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
      JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
      ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
      JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
      ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
      WHERE ISC.SERVICIO_ID             = Pn_IdServicio
      AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_NumeroReintentos)
      AND ISC.ESTADO                    = Lv_EstadoActivo
      AND APC.ESTADO                    = Lv_EstadoActivo
      );
    IF Lv_ValoresCaracts IS NOT NULL THEN 
      Lv_ValoresCaracts := 'PROCESO: MIGRACION MASIVA<br>' || Lv_ValoresCaracts;
    END IF;
    Pv_Status           := 'OK';
    Pv_ValoresCaracts  := Lv_ValoresCaracts;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status                := 'ERROR';
    Pv_ValoresCaracts        := 'No se ha podido eliminar las caracter¿sticas asociadas al servicio con tecnolog¿a McAfee con ID ' || Pn_IdServicio;
    Pv_ValoresCaractsReporte := '';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ELIMINA_CARACTS_REINT', 
                                            'Error al eliminar las caracter¿sticas McAfee - ' || SQLCODE ||
                                            ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_CARACTS_REINT;

  PROCEDURE P_UPLOAD_CSV_CPM(
    Pn_IdArchivoCsvCpm  IN NUMBER,
    Pv_UsrCreacion      IN VARCHAR2,
    Pv_Status           OUT VARCHAR2,
    Pv_Mensaje          OUT VARCHAR2
  )
  AS
    Lv_NombreParamDirBdArchivosTmp  VARCHAR2(33) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
    Lv_NombreParamsServiciosMd      VARCHAR2(35) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_NombreParamRemitenteYAsunto  VARCHAR2(41) := 'REMITENTES_Y_ASUNTOS_CORREOS_POR_PROCESO';
    Lv_ProcesoRemitenteYAsunto      VARCHAR2(36) := 'EXPORTAR_ARCHIVO_CAMBIO_PLAN_MASIVO';
    Lv_NombreParamMapeoUrlHttps     VARCHAR2(24) := 'MAPEO_URLS_HTTPS_A_HTTP';
    Lv_Valor1UrlMsGuardarArchivos   VARCHAR2(24) := 'URL_MS_GUARDAR_ARCHIVOS';
    Lv_ContenidoCabArchivoCorreo    VARCHAR2(4000);
    Lv_Delimitador                  VARCHAR2(1) := ',';
    Lv_AplicaEndResponseUtlHttp     VARCHAR2(2);
    Lv_ContenidoLinea               VARCHAR2(4000);
    Lcl_ContenidoLinea              CLOB;
    Lv_StatusLineaCsv               VARCHAR2(5);
    Lr_RegDataPorProcesarLineaCsv   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarCpm;
    Ln_IndxRegsDataPorProcesarCpm   NUMBER;
    Lt_TRegsDataPorProcesarCpm      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_DataPorProcesarCpm;
    Lt_TCamposPrimeraLineaCsv       DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Ln_CantidadColumnas             NUMBER;
    Lv_NombreArchivoCorreo          VARCHAR2(500);
    Lv_NombreArchivoCorreoZip       VARCHAR2(500);
    Lf_ArchivoProcesoCpm            UTL_FILE.FILE_TYPE;
    Lv_CreaSolMigraNuevosPlanes     VARCHAR2(2) := 'SI';
    Lr_RegDataPorProcesarCpm        DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarCpm;
    Lv_Mensaje                      VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Ln_Rownum                       NUMBER := 1;
    Ln_IdTipoSolMigraNuevosPlanes   DB_COMERCIAL.ADMI_TIPO_SOLICITUD.ID_TIPO_SOLICITUD%TYPE;
    Ln_IdTipoSolCpm                 DB_COMERCIAL.ADMI_TIPO_SOLICITUD.ID_TIPO_SOLICITUD%TYPE;
    Lr_DetalleSolMigraNuevosPlanes  DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
    Lr_DetalleSolCpm                DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
    Lr_DetalleSolCaract             DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
    Ln_IdDetSolMigraNuevosPlanes    DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE;
    Ln_IdCaractReferenciaSol        DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractPlanNuevo            DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractPlanViejo            DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractPrecioAnterior       DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractFrecuencia           DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractValorEquipoCpm       DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Lt_LoginesOk                    DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lt_LoginesRepetidos             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lv_TipoErrorLineaCsv            VARCHAR2(100);
    Lv_Gzip                         VARCHAR2(500);
    Lv_DirectorioBaseDatos          VARCHAR2(100);
    Lv_RutaDirectorioBaseDatos      VARCHAR2(500);

    CURSOR Lc_GetDataArchivoCsvCpm(Cn_IdDocumentoCpm NUMBER)
    IS
      SELECT UBICACION_LOGICA_DOCUMENTO, UBICACION_FISICA_DOCUMENTO
      FROM DB_COMUNICACION.INFO_DOCUMENTO
      WHERE ID_DOCUMENTO = Cn_IdDocumentoCpm;

    CURSOR Lc_GetValoresParamsXValor1(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE,
                                      Cv_Valor1          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR3
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.VALOR1 = Cv_Valor1
      AND DET.ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetValoresParamsGeneral(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1, DET.VALOR2
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetValorParamServiciosMd( Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE,
                                        Cv_Valor1          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE,
                                        Cv_Valor2          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR2%TYPE)
    IS
      SELECT DET.VALOR3, DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.VALOR1 = Cv_Valor1
      AND DET.VALOR2 = Cv_Valor2
      AND DET.ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdTipoSolicitud(Cv_DescripcionSolicitud DB_COMERCIAL.ADMI_TIPO_SOLICITUD.DESCRIPCION_SOLICITUD%TYPE)
    IS
      SELECT TIPO_SOLICITUD.ID_TIPO_SOLICITUD
      FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      WHERE TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Cv_DescripcionSolicitud
      AND TIPO_SOLICITUD.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetIdCaracteristica(Cv_DescripcionCaracteristica DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT CARACTERISTICA.ID_CARACTERISTICA
      FROM DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA
      WHERE CARACTERISTICA.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaracteristica
      AND CARACTERISTICA.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    Lr_RegGetValoresParamsGeneral   Lc_GetValoresParamsGeneral%ROWTYPE;
    Lr_RegGetValorParamServiciosMd  Lc_GetValorParamServiciosMd%ROWTYPE;
    Lr_RegGetValoresParamsXValor1   Lc_GetValoresParamsXValor1%ROWTYPE;

    Lr_RegGetDataArchivoCsvCpm      Lc_GetDataArchivoCsvCpm%ROWTYPE;
    Lv_UrlNfsArchivoCsvCpm          VARCHAR2(1500);
    Lv_FormatoUrlArchivoHttps       VARCHAR2(300);
    Lv_FormatoUrlArchivoHttp        VARCHAR2(300);
    Lv_UrlNfsHttpArchivoCsvCpm      VARCHAR2(1500);
    Lv_NombreArchivoCsvCpm          VARCHAR2(1500);

    Lt_ArraySplitNombreArchivo      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_NombreArchivoCpm             VARCHAR2(500);

    Ln_NumRegistrosTotal            NUMBER := 0;
    Ln_NumRegistrosOk               NUMBER := 0;
    Ln_NumValidaMarcaOlt            NUMBER := 0;
    Ln_NumValidaIdOlt               NUMBER := 0;
    Ln_NumValidaIdPunto             NUMBER := 0;
    Ln_NumValidaIdPlanNuevo         NUMBER := 0;
    Ln_NumValidaDataCsv             NUMBER := 0;
    Ln_NumValidCountSolicitudesCpm  NUMBER := 0;
    Ln_NumValidaAplicaCpm           NUMBER := 0;
    Ln_NumValidaTipoPlanes          NUMBER := 0;
    Ln_NumValidaIdServicio          NUMBER := 0;
    Ln_NumValidaValorEquipo         NUMBER := 0;
    Ln_NumValidaIdServicioTecnico   NUMBER := 0;
    Ln_NumDesconocido               NUMBER := 0;
    Ln_NumMas1Registro              NUMBER := 0;
    Lv_Asunto                       VARCHAR2(300);
    Lv_Remitente                    VARCHAR2(100);
    Lv_PlantillaInicial             VARCHAR2(4000);
    Lv_PlantillaCorreo              VARCHAR2(32767);
    Lr_GetAliasPlantillaCorreo      DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_ContenidoCorreo              VARCHAR2(4000);
    Lhttp_RequestArchivoNfs         UTL_HTTP.req;
    Lhttp_ResponseArchivoNfs        UTL_HTTP.resp;
  BEGIN
    OPEN Lc_GetDataArchivoCsvCpm(Pn_IdArchivoCsvCpm);
    FETCH Lc_GetDataArchivoCsvCpm INTO Lr_RegGetDataArchivoCsvCpm;
    CLOSE Lc_GetDataArchivoCsvCpm;
    Lv_UrlNfsArchivoCsvCpm  := Lr_RegGetDataArchivoCsvCpm.UBICACION_FISICA_DOCUMENTO;
    Lv_NombreArchivoCsvCpm  := Lr_RegGetDataArchivoCsvCpm.UBICACION_LOGICA_DOCUMENTO;
    IF Lv_NombreArchivoCsvCpm IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el nombre del archivo CSV de cambio de plan';
      RAISE Le_Exception;
    END IF;
    IF Lv_UrlNfsArchivoCsvCpm IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener la ruta en la que se guard¿ el archivo CSV de cambio de plan masivo';
      RAISE Le_Exception;
    END IF;

    OPEN Lc_GetValoresParamsXValor1(Lv_NombreParamMapeoUrlHttps, Lv_Valor1UrlMsGuardarArchivos);
    FETCH Lc_GetValoresParamsXValor1 INTO Lr_RegGetValoresParamsXValor1;
    CLOSE Lc_GetValoresParamsXValor1;
    Lv_FormatoUrlArchivoHttps   := Lr_RegGetValoresParamsXValor1.VALOR2;
    Lv_FormatoUrlArchivoHttp    := Lr_RegGetValoresParamsXValor1.VALOR3;
    IF Lv_FormatoUrlArchivoHttps IS NULL OR Lv_FormatoUrlArchivoHttp IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el mapeo para la url del archivo';
      RAISE Le_Exception;
    END IF;

    Lv_UrlNfsHttpArchivoCsvCpm := REPLACE(Lv_UrlNfsArchivoCsvCpm, Lv_FormatoUrlArchivoHttps, Lv_FormatoUrlArchivoHttp);

    Lt_ArraySplitNombreArchivo  := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_NombreArchivoCsvCpm, '.');
    IF Lt_ArraySplitNombreArchivo.COUNT <> 2 THEN
      Lv_Mensaje := 'El nombre del archivo CSV de cambio de plan no tiene el formato correcto';
      RAISE Le_Exception;
    END IF;
    Lv_NombreArchivoCpm := Lt_ArraySplitNombreArchivo(0);

    OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamDirBdArchivosTmp);
    FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
    CLOSE Lc_GetValoresParamsGeneral;
    Lv_DirectorioBaseDatos      := Lr_RegGetValoresParamsGeneral.VALOR1;
    IF Lv_DirectorioBaseDatos IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;
    Lv_RutaDirectorioBaseDatos  := Lr_RegGetValoresParamsGeneral.VALOR2;
    IF Lv_RutaDirectorioBaseDatos IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener la rura del directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;

    OPEN Lc_GetValorParamServiciosMd(Lv_NombreParamsServiciosMd, Lv_NombreParamRemitenteYAsunto, Lv_ProcesoRemitenteYAsunto);
    FETCH Lc_GetValorParamServiciosMd INTO Lr_RegGetValorParamServiciosMd;
    CLOSE Lc_GetValorParamServiciosMd;
    Lv_Remitente    := Lr_RegGetValorParamServiciosMd.VALOR3;
    Lv_Asunto       := Lr_RegGetValorParamServiciosMd.VALOR4;
    IF Lv_Remitente IS NULL OR Lv_Asunto IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el remitente y/o el asunto del correo con el archivo adjunto de cambio de plan masivo';
      RAISE Le_Exception;
    END IF;

    OPEN Lc_GetIdTipoSolicitud('SOLICITUD CAMBIO PLAN MASIVO');
    FETCH Lc_GetIdTipoSolicitud INTO Ln_IdTipoSolCpm;
    CLOSE Lc_GetIdTipoSolicitud;

    OPEN Lc_GetIdTipoSolicitud('SOLICITUD MIGRACION NUEVOS PLANES');
    FETCH Lc_GetIdTipoSolicitud INTO Ln_IdTipoSolMigraNuevosPlanes;
    CLOSE Lc_GetIdTipoSolicitud;

    IF Ln_IdTipoSolCpm IS NULL OR Ln_IdTipoSolMigraNuevosPlanes IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener el tipo de solicitud para este proceso';
      RAISE Le_Exception;
    END IF;

    OPEN Lc_GetIdCaracteristica('REFERENCIA SOLICITUD');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractReferenciaSol;
    CLOSE Lc_GetIdCaracteristica;

    OPEN Lc_GetIdCaracteristica('PLAN NUEVO');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractPlanNuevo;
    CLOSE Lc_GetIdCaracteristica;

    OPEN Lc_GetIdCaracteristica('PLAN VIEJO');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractPlanViejo;
    CLOSE Lc_GetIdCaracteristica;

    OPEN Lc_GetIdCaracteristica('PRECIO ANTERIOR');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractPrecioAnterior;
    CLOSE Lc_GetIdCaracteristica;

    OPEN Lc_GetIdCaracteristica('FRECUENCIA');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractFrecuencia;
    CLOSE Lc_GetIdCaracteristica;

    OPEN Lc_GetIdCaracteristica('VALOR_EQUIPO_CPM');
    FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractValorEquipoCpm;
    CLOSE Lc_GetIdCaracteristica;

    IF Ln_IdCaractReferenciaSol IS NULL OR Ln_IdCaractPlanNuevo IS NULL OR Ln_IdCaractPlanViejo IS NULL
      OR Ln_IdCaractPrecioAnterior IS NULL OR Ln_IdCaractFrecuencia IS NULL OR Ln_IdCaractValorEquipoCpm IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener alguna de las caracter¿sticas para este proceso';
      RAISE Le_Exception;
    END IF;

    Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('CPMSUBIDA');
    Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
    IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
    ELSE 
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
    END IF;

    IF Lv_PlantillaInicial IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener la plantilla del correo enviado al procesar un archivo csv';
      RAISE Le_Exception;
    END IF;

    Lv_NombreArchivoCorreo  := Lv_NombreArchivoCpm || '_RegistrosProcesoCreacionCpm.csv';
    Lf_ArchivoProcesoCpm    := UTL_FILE.FOPEN(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreo, 'w', 4000);

    Lhttp_RequestArchivoNfs     := UTL_HTTP.begin_request(Lv_UrlNfsHttpArchivoCsvCpm);
    Lhttp_ResponseArchivoNfs    := UTL_HTTP.get_response(Lhttp_RequestArchivoNfs);
    DBMS_LOB.createtemporary(Lcl_ContenidoLinea, FALSE);
    Lv_AplicaEndResponseUtlHttp := 'SI';
    BEGIN
      LOOP
        Lv_ContenidoLinea             := '';
        Lv_StatusLineaCsv             := '';
        Lv_TipoErrorLineaCsv          := '';
        Lr_RegDataPorProcesarLineaCsv := NULL;
        UTL_HTTP.read_line(Lhttp_ResponseArchivoNfs, Lcl_ContenidoLinea);
        Lv_ContenidoLinea       := REPLACE(REPLACE(Lcl_ContenidoLinea, CHR(10), ''), CHR(13), '');
        Ln_NumRegistrosTotal    := Ln_NumRegistrosTotal + 1;
        IF Ln_NumRegistrosTotal = 1 THEN
          IF Lv_ContenidoLinea IS NOT NULL THEN
            Lt_TCamposPrimeraLineaCsv := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_ContenidoLinea, Lv_Delimitador);
            Ln_CantidadColumnas := Lt_TCamposPrimeraLineaCsv.COUNT;
            IF Ln_CantidadColumnas = 4 THEN
              Lv_ContenidoCabArchivoCorreo := 'Elemento' || Lv_Delimitador ||
                                              'Login' || Lv_Delimitador ||
                                              'Plan Nuevo' || Lv_Delimitador ||
                                              'Valor Equipo' || Lv_Delimitador ||
                                              'Estado' || Lv_Delimitador ||
                                              'Observaci¿n';
            ELSIF Ln_CantidadColumnas = 3 THEN
              Lv_ContenidoCabArchivoCorreo := 'Elemento' || Lv_Delimitador || 
                                              'Login' || Lv_Delimitador || 
                                              'Plan Nuevo' || Lv_Delimitador ||
                                              'Estado' || Lv_Delimitador ||
                                              'Observaci¿n';
            ELSE
              Lv_Mensaje := 'El archivo tiene un n¿mero de columnas no permitidas. S¿lo se permiten 3 y 4 columnas';
              RAISE Le_Exception;
            END IF;
          ELSE
            Lv_Mensaje := 'El archivo no tiene data para procesar';
            RAISE Le_Exception;
          END IF;
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoCabArchivoCorreo);
        END IF;
        DB_COMERCIAL.TECNK_SERVICIOS.P_VALIDA_LINEA_CSV_CPM(  Lv_ContenidoLinea, Lv_Delimitador, Lv_StatusLineaCsv, Lv_TipoErrorLineaCsv, 
                                                              Lr_RegDataPorProcesarLineaCsv);
        IF Lv_StatusLineaCsv = 'OK' THEN
          IF Lt_LoginesOk.EXISTS(Lr_RegDataPorProcesarLineaCsv.LOGIN) AND NOT Lt_LoginesRepetidos.EXISTS(Lr_RegDataPorProcesarLineaCsv.LOGIN) THEN
            Lt_LoginesRepetidos(Lr_RegDataPorProcesarLineaCsv.LOGIN) := Lr_RegDataPorProcesarLineaCsv.LOGIN;
          END IF;
          Lt_LoginesOk(Lr_RegDataPorProcesarLineaCsv.LOGIN) := Lr_RegDataPorProcesarLineaCsv.LOGIN;

          Lt_TRegsDataPorProcesarCpm(Lt_TRegsDataPorProcesarCpm.COUNT) := Lr_RegDataPorProcesarLineaCsv;
        ELSE
          IF Lv_TipoErrorLineaCsv = 'ErrorValidaCountSolicitudesCpm' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente ya tiene una solicitud de cambio de plan masivo creada');
            Ln_NumValidCountSolicitudesCpm := Ln_NumValidCountSolicitudesCpm + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaValorEquipo' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente con valor de equipo incorrecto');
            Ln_NumValidaValorEquipo := Ln_NumValidaValorEquipo + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdServicioTecnico' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente no corresponde al olt');
            Ln_NumValidaIdServicioTecnico := Ln_NumValidaIdServicioTecnico + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaAplicaCpm' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente tiene un plan nuevo sin caracter¿stica APLICA_CPM con valor SI');
            Ln_NumValidaAplicaCpm := Ln_NumValidaAplicaCpm + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaTipoPlanes' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente no tiene el mismo tipo de plan');
            Ln_NumValidaTipoPlanes := Ln_NumValidaTipoPlanes + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdServicio' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente no tiene un servicio de internet activo');
            Ln_NumValidaIdServicio := Ln_NumValidaIdServicio + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaMarcaOlt' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente con marca de OLT no considerada');
            Ln_NumValidaMarcaOlt := Ln_NumValidaMarcaOlt + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdOlt' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente tiene un olt que no existe');
            Ln_NumValidaIdOlt := Ln_NumValidaIdOlt + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdPunto' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente no existe o est¿ mal escrito');
            Ln_NumValidaIdPunto := Ln_NumValidaIdPunto + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdPlanNuevo' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente tiene un plan nuevo que no existe');
            Ln_NumValidaIdPlanNuevo := Ln_NumValidaIdPlanNuevo + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaDataCsv' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente no tiene la data completa en el archivo');
            Ln_NumValidaDataCsv := Ln_NumValidaDataCsv + 1;

          ELSE
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Cliente con error desconocido');
            Ln_NumDesconocido := Ln_NumDesconocido + 1;
          END IF;
          --Fin de validaci¿n de tipos de errores
        END IF;
        --Fin de validaci¿n del StatusLineaCsv
      END LOOP;
    EXCEPTION
    WHEN UTL_HTTP.end_of_body THEN
      UTL_HTTP.end_response(Lhttp_ResponseArchivoNfs);
      Lv_AplicaEndResponseUtlHttp := 'NO';
    END;
    DBMS_LOB.freetemporary(Lcl_ContenidoLinea);

    Ln_IndxRegsDataPorProcesarCpm := Lt_TRegsDataPorProcesarCpm.FIRST;
    WHILE (Ln_IndxRegsDataPorProcesarCpm IS NOT NULL)
    LOOP
      Lr_RegDataPorProcesarCpm  := Lt_TRegsDataPorProcesarCpm(Ln_IndxRegsDataPorProcesarCpm);
      IF NOT Lt_LoginesRepetidos.EXISTS(Lr_RegDataPorProcesarCpm.LOGIN) THEN
        IF Ln_CantidadColumnas = 4 THEN
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lr_RegDataPorProcesarCpm.NOMBRE_OLT || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.LOGIN || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.ID_PLAN_NUEVO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.VALOR_EQUIPO || Lv_Delimitador ||
                                                  'OK' || Lv_Delimitador ||
                                                  'Cliente procesado correctamente');
        ELSE
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lr_RegDataPorProcesarCpm.NOMBRE_OLT || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.LOGIN || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.ID_PLAN_NUEVO || Lv_Delimitador ||
                                                  'OK' || Lv_Delimitador ||
                                                  'Cliente procesado correctamente');
        END IF;
        IF Lv_CreaSolMigraNuevosPlanes = 'SI' THEN
          --Se crea la solicitud padre de tipo SOLICITUD MIGRACION NUEVOS PLANES
          Ln_IdDetSolMigraNuevosPlanes                          := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
          Lr_DetalleSolMigraNuevosPlanes.ID_DETALLE_SOLICITUD   := Ln_IdDetSolMigraNuevosPlanes;
          Lr_DetalleSolMigraNuevosPlanes.TIPO_SOLICITUD_ID      := Ln_IdTipoSolMigraNuevosPlanes;
          Lr_DetalleSolMigraNuevosPlanes.USR_CREACION           := Pv_UsrCreacion;
          Lr_DetalleSolMigraNuevosPlanes.ESTADO                 := 'Pendiente';
          DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_DetalleSolMigraNuevosPlanes, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          Lv_CreaSolMigraNuevosPlanes := 'NO';
        END IF;
        Lr_DetalleSolCpm                      := NULL;
        Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
        Lr_DetalleSolCpm.SERVICIO_ID          := Lr_RegDataPorProcesarCpm.ID_SERVICIO;
        Lr_DetalleSolCpm.TIPO_SOLICITUD_ID    := Ln_IdTipoSolCpm;
        Lr_DetalleSolCpm.USR_CREACION         := Pv_UsrCreacion;
        Lr_DetalleSolCpm.ESTADO               := 'Pendiente';
        Lr_DetalleSolCpm.ELEMENTO_ID          := Lr_RegDataPorProcesarCpm.ID_OLT;
        DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_DetalleSolCpm, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se inserta la solicitud de migraci¿n de planes como atributo relacionado a la solicitud de cambio de plan masiva
        Lr_DetalleSolCaract                       := NULL;
        Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractReferenciaSol;
        Lr_DetalleSolCaract.VALOR                 := Ln_IdDetSolMigraNuevosPlanes;
        Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
        Lr_DetalleSolCaract.ESTADO                := 'Activo';
        Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se inserta el plan al que se desea cambiar como atributo relacionado a la solicitud de cambio de plan masiva
        Lr_DetalleSolCaract                       := NULL;
        Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractPlanNuevo;
        Lr_DetalleSolCaract.VALOR                 := Lr_RegDataPorProcesarCpm.ID_PLAN_NUEVO;
        Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
        Lr_DetalleSolCaract.ESTADO                := 'Activo';
        Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se inserta el plan a cambiar como atributo relacionado a la solicitud de cambio de plan masiva
        Lr_DetalleSolCaract                       := NULL;
        Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractPlanViejo;
        Lr_DetalleSolCaract.VALOR                 := Lr_RegDataPorProcesarCpm.ID_PLAN_VIEJO;
        Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
        Lr_DetalleSolCaract.ESTADO                := 'Activo';
        Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se inserta el precio anterior del servicio como atributo relacionado a la solicitud de cambio de plan masiva
        Lr_DetalleSolCaract                       := NULL;
        Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractPrecioAnterior;
        Lr_DetalleSolCaract.VALOR                 := Lr_RegDataPorProcesarCpm.PRECIO_VENTA;
        Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
        Lr_DetalleSolCaract.ESTADO                := 'Activo';
        Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se inserta la frecuencia anterior del servicio como atributo relacionado a la solicitud de cambio de plan masiva
        Lr_DetalleSolCaract                       := NULL;
        Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractFrecuencia;
        Lr_DetalleSolCaract.VALOR                 := Lr_RegDataPorProcesarCpm.FRECUENCIA_PRODUCTO;
        Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
        Lr_DetalleSolCaract.ESTADO                := 'Activo';
        Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        IF Lr_RegDataPorProcesarCpm.VALOR_EQUIPO IS NOT NULL THEN
          --Se inserta el valor del equipo del servicio como atributo relacionado a la solicitud de cambio de plan masiva
          Lr_DetalleSolCaract                       := NULL;
          Lr_DetalleSolCaract.CARACTERISTICA_ID     := Ln_IdCaractValorEquipoCpm;
          Lr_DetalleSolCaract.VALOR                 := Lr_RegDataPorProcesarCpm.VALOR_EQUIPO;
          Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID  := Lr_DetalleSolCpm.ID_DETALLE_SOLICITUD;
          Lr_DetalleSolCaract.ESTADO                := 'Activo';
          Lr_DetalleSolCaract.USR_CREACION          := Pv_UsrCreacion;
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        END IF;
        Ln_NumRegistrosOk := Ln_NumRegistrosOk + 1;
      ELSE
        Ln_NumMas1Registro := Ln_NumMas1Registro + 1;
        IF Ln_CantidadColumnas = 4 THEN
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lr_RegDataPorProcesarCpm.NOMBRE_OLT || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.LOGIN || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.ID_PLAN_NUEVO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.VALOR_EQUIPO || Lv_Delimitador ||
                                                  'ERROR' || Lv_Delimitador ||
                                                  'Cliente con m¿s de 1 registro');
        ELSE
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoCpm, Lr_RegDataPorProcesarCpm.NOMBRE_OLT || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.LOGIN || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarCpm.ID_PLAN_NUEVO || Lv_Delimitador ||
                                                  'ERROR' || Lv_Delimitador ||
                                                  'Cliente con m¿s de 1 registro');
        END IF;
      END IF;
      Ln_IndxRegsDataPorProcesarCpm := Lt_TRegsDataPorProcesarCpm.NEXT(Ln_IndxRegsDataPorProcesarCpm);
    END LOOP;

    UTL_FILE.FCLOSE(Lf_ArchivoProcesoCpm);

    Lv_PlantillaCorreo  := Lv_PlantillaInicial;
    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{NUM_REGISTROS_TOTAL}}', Ln_NumRegistrosTotal);

    IF Ln_NumRegistrosOk > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumRegistrosOk || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Cliente procesado correctamente</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidCountSolicitudesCpm > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidCountSolicitudesCpm || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente ya tiene una solicitud de cambio de plan masivo creada</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaValorEquipo > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaValorEquipo || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente con valor de equipo incorrecto</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIdServicioTecnico > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIdServicioTecnico || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no corresponde al olt</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaAplicaCpm > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaAplicaCpm || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente tiene un plan nuevo sin caracter¿stica APLICA_CPM con valor SI</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaTipoPlanes > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaTipoPlanes || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no tiene el mismo tipo de plan</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIdServicio > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIdServicio || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no tiene un servicio de internet activo</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaMarcaOlt > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaMarcaOlt || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente con marca de OLT no considerada</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIdOlt > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIdOlt || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente tiene un olt que no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIdPunto > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIdPunto || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no existe o est¿ mal escrito</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIdPlanNuevo > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIdPlanNuevo || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente tiene un plan nuevo que no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaDataCsv > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaDataCsv || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no tiene la data completa en el archivo</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumMas1Registro > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumMas1Registro || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente con m¿s de 1 registro</td>' ||
                            '</tr>';
    END IF;
    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{CUERPO_CORREO}}', Lv_ContenidoCorreo);

    Lv_Gzip := 'gzip ' || Lv_RutaDirectorioBaseDatos || Lv_NombreArchivoCorreo;
    Lv_NombreArchivoCorreoZip  := Lv_NombreArchivoCorreo || '.gz';
    DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND(Lv_Gzip));

    BEGIN
      DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, Lv_Asunto, Lv_PlantillaCorreo, 
                                                Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);
      UTL_FILE.FREMOVE(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);

      UPDATE DB_COMUNICACION.INFO_DOCUMENTO
      SET ESTADO = 'Eliminado'
      WHERE ID_DOCUMENTO = Pn_IdArchivoCsvCpm;

    EXCEPTION
    WHEN OTHERS THEN
      UTL_MAIL.SEND (   SENDER      => Lv_Remitente, 
                        RECIPIENTS  => Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                        SUBJECT     => Lv_Asunto,
                        MESSAGE     => SUBSTR(Lv_PlantillaCorreo, 1, 32767),
                        MIME_TYPE   => 'text/html; charset=iso-8859-1');

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_CPM->ENVIO_CORREO', 
                                            'No se ha podido enviar el archivo en la ruta ' || Lv_RutaDirectorioBaseDatos 
                                            || Lv_NombreArchivoCorreo || ' ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                                            || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    END;
    Pv_Status     := 'OK';
    Pv_Mensaje    := 'Proceso realizado correctamente';
    COMMIT;
  EXCEPTION
  WHEN Le_Exception THEN
    IF Lv_AplicaEndResponseUtlHttp = 'SI' THEN
      UTL_HTTP.end_response(Lhttp_ResponseArchivoNfs);
    END IF;
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_CPM', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    IF Lv_AplicaEndResponseUtlHttp = 'SI' THEN
      UTL_HTTP.end_response(Lhttp_ResponseArchivoNfs);
    END IF;
    Pv_Status               := 'ERROR';
    Pv_Mensaje              := 'Ha ocurrido un problema al realizar la subida del archivo CSV para el cambio de plan masivo. '
                                || 'Por favor comun¿quese con Sistemas!';
    Lv_Mensaje              := 'Error en la subida del archivo CSV para el cambio de plan masivo ' || SQLCODE || ' - ERROR_STACK: ' 
                                || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_CPM', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_UPLOAD_CSV_CPM;


  PROCEDURE P_ACTUALIZA_INFORMACION_CORTE(
    Pn_IdServicio           IN NUMBER,
    Pn_IdUltHistoInCorte    IN NUMBER,
    Pv_TipoProceso          IN VARCHAR2,
    Pv_Observacion          IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_IpCreacion           IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lv_StatusCorreo                 VARCHAR2(5);
    Lv_MensajeCorreo                VARCHAR2(4000);
    Ln_IdCaractIdUltHistoInCorte    NUMBER;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Lv_Mensaje                      VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    CURSOR Lc_GetCaracteristica(Cv_DescripcionCaracteristica VARCHAR2)
    IS
      SELECT ID_CARACTERISTICA
      FROM DB_COMERCIAL.ADMI_CARACTERISTICA
      WHERE DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaracteristica
      AND ESTADO = Lv_EstadoActivo;
  BEGIN
    IF Pv_UsrCreacion IS NOT NULL THEN 
      Lv_UsrCreacion := Pv_UsrCreacion;
    ELSE
      Lv_UsrCreacion := 'agregaHistCorte';
    END IF;
    IF Pv_IpCreacion IS NOT NULL THEN 
      Lv_IpCreacion := Pv_IpCreacion;
    ELSE
      Lv_IpCreacion := '127.0.0.1';
    END IF;
    IF Pv_TipoProceso <> 'CORTE' AND Pv_TipoProceso <> 'CANCELACION' THEN
      Lv_Mensaje := 'Tipo de proceso de permitido';
      RAISE Le_Exception;
    END IF;
    IF Pn_IdServicio IS NULL OR ((Pn_IdUltHistoInCorte IS NULL OR Pn_IdUltHistoInCorte = 0) AND Pv_TipoProceso = 'CORTE') THEN
      Lv_Mensaje := 'No se ha enviado la informaci¿n del servicio de Internet o del ¿ltimo historial de corte v¿lido';
      RAISE Le_Exception;
    END IF;
    IF Lc_GetCaracteristica%ISOPEN THEN
      CLOSE Lc_GetCaracteristica;
    END IF;
    OPEN Lc_GetCaracteristica('ID_ULTIMO_HISTO_IN_CORTE');
    FETCH Lc_GetCaracteristica INTO Ln_IdCaractIdUltHistoInCorte;
    CLOSE Lc_GetCaracteristica;
    UPDATE DB_COMERCIAL.INFO_SERVICIO_CARACTERISTICA
    SET ESTADO            = 'Inactivo',
      USR_ULT_MOD         = Lv_UsrCreacion,
      IP_ULT_MOD          = Lv_IpCreacion,
      FE_ULT_MOD          = SYSDATE
    WHERE SERVICIO_ID     = Pn_IdServicio
    AND CARACTERISTICA_ID = Ln_IdCaractIdUltHistoInCorte;
    IF Pv_TipoProceso = 'CORTE' THEN
      INSERT
      INTO DB_COMERCIAL.INFO_SERVICIO_CARACTERISTICA
        (
          ID_SERVICIO_CARACTERISTICA,
          SERVICIO_ID,
          CARACTERISTICA_ID,
          VALOR,
          ESTADO,
          OBSERVACION,
          USR_CREACION,
          IP_CREACION,
          FE_CREACION
        )
        VALUES
        (
          DB_COMERCIAL.SEQ_INFO_SERVICIO_CARAC.NEXTVAL,
          Pn_IdServicio,
          Ln_IdCaractIdUltHistoInCorte,
          TO_CHAR(Pn_IdUltHistoInCorte),
          Lv_EstadoActivo,
          Pv_Observacion,
          Lv_UsrCreacion,
          Lv_IpCreacion,
          SYSDATE
        );
    END IF;
    COMMIT;
    Pv_Status   := 'OK';
    Pv_Mensaje  := '';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ENVIO_CORREO_ERROR_INFOCORTE(Pn_IdServicio, Lv_StatusCorreo, Lv_MensajeCorreo);
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTUALIZA_INFORMACION_CORTE', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido actualizar la informaci¿n de corte para la cancelaci¿n, por favor informar a Sistemas!';
    ROLLBACK;
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ENVIO_CORREO_ERROR_INFOCORTE(Pn_IdServicio, Lv_StatusCorreo, Lv_MensajeCorreo);
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ACTUALIZA_INFORMACION_CORTE', 
                                            'Error en la ejecuci¿n de la actualizaci¿n de corte del servicio con id ' || Pn_IdServicio
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    --
  END P_ACTUALIZA_INFORMACION_CORTE;

  PROCEDURE P_ENVIO_CORREO_ERROR_INFOCORTE(
    Pn_IdServicio   IN NUMBER,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2)
  AS
    Lv_LoginPunto               VARCHAR2(60);
    Lv_PlantillaInicial         VARCHAR2(4000);
    Lv_PlantillaCorreo          VARCHAR2(4000);
    Lv_ContenidoCorreo          VARCHAR2(4000);
    Lv_Asunto                   VARCHAR2(200) := 'Notificaci¿n por error de actualizaci¿n de informaci¿n para corte';
    Lv_Remitente                VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lr_GetAliasPlantillaCorreo  DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    CURSOR Lc_GetPunto(Cn_IdServicio NUMBER)
    IS
      SELECT PUNTO.LOGIN
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON SERVICIO.PUNTO_ID = PUNTO.ID_PUNTO
      WHERE SERVICIO.ID_SERVICIO = Cn_IdServicio;

  BEGIN
    OPEN Lc_GetPunto(Pn_IdServicio);
    FETCH Lc_GetPunto INTO Lv_LoginPunto;
    CLOSE Lc_GetPunto;
    Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('ERRORCORTCANCEL');
    Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
    IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
    ELSE 
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
    END IF;

    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaInicial, '{{ID_SERVICIO}}', Pn_IdServicio);
    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{LOGIN}}', Lv_LoginPunto);

    UTL_MAIL.SEND (   SENDER      => Lv_Remitente, 
                      RECIPIENTS  => Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                      SUBJECT     => Lv_Asunto,
                      MESSAGE     => SUBSTR(Lv_PlantillaCorreo, 1, 32767),
                      MIME_TYPE   => 'text/html; charset=iso-8859-1');
    Pv_Status   := 'OK';
    Pv_Mensaje  := '';
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido realizar el env¿o del correo';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_ENVIO_CORREO_ERROR_INFOCORTE', 
                                            'No se ha podido realizar el env¿o del correo del ID_SERVICIO ' || Pn_IdServicio
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ENVIO_CORREO_ERROR_INFOCORTE;

  PROCEDURE P_INACTIVA_INFOCORTE_X_CANCEL(
    Pv_UsrCreacion  IN VARCHAR2,
    Pv_IpCreacion   IN VARCHAR2,
    Pv_Status       OUT VARCHAR2,
    Pv_Mensaje      OUT VARCHAR2)
  AS
    Lv_UsrCreacion  VARCHAR2(15);
    Lv_IpCreacion   VARCHAR2(15);
    CURSOR Lc_GetCaracteristica(Cv_DescripcionCaracteristica VARCHAR2)
    IS
      SELECT ID_CARACTERISTICA
      FROM DB_COMERCIAL.ADMI_CARACTERISTICA
      WHERE DESCRIPCION_CARACTERISTICA=Cv_DescripcionCaracteristica;

    CURSOR Lc_ServiciosActualizaInfoCorte
    IS
      SELECT DISTINCT SERVICIO_CARACT.ID_SERVICIO_CARACTERISTICA
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
      INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN_CAB
      ON PLAN_CAB.ID_PLAN = SERVICIO.PLAN_ID
      INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
      ON PLAN_DET.PLAN_ID = PLAN_CAB.ID_PLAN
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
      ON PRODUCTO.ID_PRODUCTO = PLAN_DET.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
      INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
      ON PER.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
      INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO OFICINA_GRUPO
      ON OFICINA_GRUPO.ID_OFICINA = PER.OFICINA_ID
      INNER JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO EMPRESA_GRUPO
      ON EMPRESA_GRUPO.COD_EMPRESA = OFICINA_GRUPO.EMPRESA_ID
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO_CARACTERISTICA SERVICIO_CARACT
      ON SERVICIO_CARACT.SERVICIO_ID = SERVICIO.ID_SERVICIO
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
      ON CARACT.ID_CARACTERISTICA = SERVICIO_CARACT.CARACTERISTICA_ID
      WHERE SERVICIO.ESTADO = 'Cancel'
      AND PRODUCTO.NOMBRE_TECNICO = 'INTERNET'
      AND EMPRESA_GRUPO.PREFIJO = 'MD'
      AND SERVICIO_CARACT.SERVICIO_ID = SERVICIO.ID_SERVICIO
      AND CARACT.DESCRIPCION_CARACTERISTICA = 'ID_ULTIMO_HISTO_IN_CORTE'
      AND SERVICIO_CARACT.ESTADO = 'Activo';
    TYPE Lt_FetchArray
    IS
      TABLE OF Lc_ServiciosActualizaInfoCorte%ROWTYPE;
      Lt_ServiciosActualizaInfoCorte Lt_FetchArray;
      Le_BulkErrors EXCEPTION;
      PRAGMA EXCEPTION_INIT(Le_BulkErrors, -24381);
  BEGIN
    IF Pv_UsrCreacion IS NOT NULL THEN 
      Lv_UsrCreacion := Pv_UsrCreacion;
    ELSE
      Lv_UsrCreacion := 'inactivHistCort';
    END IF;
    IF Pv_IpCreacion IS NOT NULL THEN 
      Lv_IpCreacion := Pv_IpCreacion;
    ELSE
      Lv_IpCreacion := '127.0.0.1';
    END IF;
  OPEN Lc_ServiciosActualizaInfoCorte;
  LOOP
    FETCH Lc_ServiciosActualizaInfoCorte BULK COLLECT
    INTO Lt_ServiciosActualizaInfoCorte LIMIT 1000;
    FORALL Ln_Index IN 1..Lt_ServiciosActualizaInfoCorte.COUNT SAVE EXCEPTIONS
    UPDATE DB_COMERCIAL.INFO_SERVICIO_CARACTERISTICA
    SET ESTADO            = 'Inactivo',
      USR_ULT_MOD         = Lv_UsrCreacion,
      IP_ULT_MOD          = Lv_IpCreacion,
      FE_ULT_MOD          = SYSDATE
    WHERE ID_SERVICIO_CARACTERISTICA = Lt_ServiciosActualizaInfoCorte(Ln_Index).ID_SERVICIO_CARACTERISTICA;
    EXIT
  WHEN Lc_ServiciosActualizaInfoCorte%NOTFOUND;
  END LOOP;
  CLOSE Lc_ServiciosActualizaInfoCorte;
  COMMIT;
    Pv_Status   := 'OK';
    Pv_Mensaje  := 'Actualizaci¿n de informaci¿n de corte para servicios cancelados';
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := 'No se ha podido realizar la inactivaci¿n de la informaci¿n In-Corte';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_INACTIVA_INFOCORTE_X_CANCEL', 
                                            'No se ha podido realizar la inactivaci¿n de la informaci¿n In-Corte'
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_INACTIVA_INFOCORTE_X_CANCEL;


  PROCEDURE P_GEN_SOLICITUD_EQUIPO(
                                  Pcl_JsonSolicitud   IN  CLOB,
                                  Pn_NumeroRegistro   IN  INTEGER,
                                  Pv_UsuarioCreacion  IN  VARCHAR2,
                                  Pv_MensajeError     OUT VARCHAR2,
                                  Pv_Respuesta        OUT VARCHAR2) IS 

    Lr_DetalleSolHistorial DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Ln_Servicio                   NUMBER;
    Lv_Servicio                   VARCHAR2(500);
    Ln_Solicitud                  NUMBER;
    Lv_Solicitud                  VARCHAR2(500);
    Lv_Valor                      VARCHAR2(500);
    Lv_IntIdModAsig               VARCHAR2(500);
    Lv_EstadoActivo               VARCHAR2(6)   := 'Activo';
    Lv_NombreParametro            VARCHAR2(32)  := 'MODELOS_EQUIPOS_NUEVOS_PLANES_MD';
    Lv_login                      VARCHAR2(60);
    Ln_TotalError                 NUMBER        := 0;
    Ln_SinCambio                  NUMBER        := 0;
    Ln_WifiDual                   NUMBER        := 0;
    Ln_Extender                   NUMBER        := 0;
    Ln_NumRegistrosOk             NUMBER        := 0;
    Ln_NumRegistrosTotal          NUMBER        := 0;
    Ln_NecesitaEquipo             NUMBER        := 0;
    Lv_CambioWifiDualBand         VARCHAR2(2)   := 'NO';
    Lv_AgregarExtenderDualBand    VARCHAR2(2)   := 'NO';  
    Lv_NombreWifi                 VARCHAR2(14)  := 'WIFI DUAL BAND';
    Lv_ValorWifi                  VARCHAR2(14)  := 'WIFI_DUAL_BAND';
    Lv_NombreCliente              VARCHAR2(16)  := 'ELEMENTO CLIENTE';
    Lv_NombreExtender             VARCHAR2(18)  := 'EXTENDER DUAL BAND';
    Lv_NecesitaEquipo             VARCHAR2(2)   := 'NO';
    Lv_EquipoClienteWifi          VARCHAR2(2)   := 'NO';
    Lv_EquipoClienteExtender      VARCHAR2(2)   := 'NO';
    Lv_ExisteModeloExtender       VARCHAR2(2)   := 'NO';
    Lv_EquipoExtender             VARCHAR2(8)   := 'CPE WIFI';
    Lv_EquipoCpeOnt               VARCHAR2(7)   := 'CPE ONT';
    Lv_TipoModulo                 VARCHAR2(7)   := 'TECNICA';
    Lv_MarcaOlt                   VARCHAR2(100);
    Lv_ModeloElemento             VARCHAR2(100);
    Ln_Contador                   NUMBER        := 1;
    Lv_DescripSolicitud           VARCHAR2(50)  := 'SOLICITUD AGREGAR EQUIPO MASIVO';
    Lv_DescripSolSoporte          VARCHAR2(50)  := 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO';
    Ln_IdTipoSolicitud            NUMBER;
    Ln_IdTipoSolSoporte           NUMBER;
    Ln_IdTipoSolicitudFinal       NUMBER;
    Lv_EstadoDetSolicitud         VARCHAR2(14)  := 'PrePlanificada';
    Lv_UsrCreacion                VARCHAR2(200);
    Lv_ProductoWifi               VARCHAR2(14)  := 'WiFi Dual Band';
    Lv_ProductoExtender           VARCHAR2(18)  := 'Extender Dual Band';
    Ln_CaracWifi                  NUMBER;
    Ln_CaracCliente               NUMBER;
    Ln_CaracExtender              NUMBER;
    Lv_ValorSi                    VARCHAR2(2)  := 'SI';
    Ln_IdDetalleSolicitud         NUMBER;
    Ln_ElementoClienteId          NUMBER;
    Lv_ObservacionSolicitud       VARCHAR2(500) := 'Se ha creado la SOLICITUD AGREGAR EQUIPO MASIVO asociada al servicio';
    Lv_Mensaje                    VARCHAR2(4000);
    Le_Exception                  EXCEPTION;
    Lv_Asunto                     VARCHAR2(200) := 'Notificación de solicitudes para agregar equipos a los clientes';
    Lv_Remitente                  VARCHAR2(50)  := 'notificaciones_telcos@telconet.ec';
    Lv_PlantillaInicial           VARCHAR2(4000);
    Lv_PlantillaCorreo            VARCHAR2(32767);
    Lr_GetAliasPlantillaCorreo    DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_ContenidoCorreo            VARCHAR2(4000);
    Lv_ContenidoCabArchivoCorreo  VARCHAR2(4000);
    Lv_Delimitador                VARCHAR2(1)  := ',';
    Lv_Directorio                 VARCHAR2(50) := 'DIR_SOLICITUD_EQUIPO';
    Lv_RutaDirectorio             VARCHAR2(300);
    Lf_ArchivoProcesoSae          UTL_FILE.FILE_TYPE;
    Lv_NombreArchivoCorreo        VARCHAR2(500);
    Lv_NombreArchivoCorreoZip     VARCHAR2(500);
    Lv_Gzip                       VARCHAR2(500);
    Lv_NombreElemento             VARCHAR2(500);
    Lv_EstadoServicio             VARCHAR2(100);
    Lv_Observacion                VARCHAR2(4000);
    Ln_ContadorArreglo            NUMBER;
    Lv_ExisteSolicitud            VARCHAR2(2);
    Lv_Plan                       VARCHAR2(500);
    Lv_NombreProducto             VARCHAR2(500);
    Lv_ModeloWifi                 VARCHAR2(500);
    Ln_CaracWifiDet               NUMBER;
    Ln_CaracExtenderDet           NUMBER;
    Lv_ModeloRouter               VARCHAR2(50) := 'MODELO ROUTER';
    Lv_Conectado                  VARCHAR2(9)  := 'connected';
    Ln_CaracPlanSin               NUMBER;
    Ln_CaracRouter                NUMBER;
    Ln_InterEleFinId              NUMBER;
    Ln_TipoModelo                 NUMBER;
    Ln_TipoModeloAdmi             NUMBER;
    Ln_IdDocumento                DB_COMUNICACION.INFO_DOCUMENTO.ID_DOCUMENTO%TYPE;

    Lcl_JsonSolicitud             CLOB;

    Ln_count                       PLS_INTEGER;
    Lv_SubModuloProcesMasivo       VARCHAR2(15) := 'SolicitudEquipo';
    Lv_NombreParamDirBdArchivosTmp VARCHAR2(33) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
    Lv_NombreParamUrlMicroNfs      VARCHAR2(33) := 'URL_MICROSERVICIO_NFS';

    --Definici¿n del Tipo Tabla:
    TYPE typ_assoc_array IS TABLE OF
        VARCHAR2(25)
          INDEX BY PLS_INTEGER;

    --Declaramos una Variable del Tipo Tabla anterior:
    Lt_ArrayModelos   typ_assoc_array;

    CURSOR Lc_GetValoresParamsGeneral(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1, DET.VALOR2
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;  

    CURSOR Lc_GetConfigNfsSolicitudEquipo 
    IS
      SELECT TO_CHAR(CODIGO_APP) AS CODIGO_APP, TO_CHAR(CODIGO_PATH) AS CODIGO_PATH 
      FROM DB_GENERAL.ADMI_GESTION_DIRECTORIOS
      WHERE APLICACION ='TelcosWeb' 
      AND SUBMODULO = Lv_SubModuloProcesMasivo
      AND EMPRESA ='MD';

    CURSOR C_DETALLE_SOLICITUD(Cn_ServicioIdDet NUMBER,Cn_TipoSolicitud NUMBER) IS
    SELECT ID_DETALLE_SOLICITUD
    FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD
    WHERE SERVICIO_ID = Cn_ServicioIdDet
    AND TIPO_SOLICITUD_ID = Cn_TipoSolicitud;

    CURSOR C_MARCA(Cn_ServicioId NUMBER) IS
    SELECT MOD.NOMBRE_MODELO_ELEMENTO, MAR.NOMBRE_MARCA_ELEMENTO, SER.ELEMENTO_CLIENTE_ID
    FROM DB_INFRAESTRUCTURA.INFO_SERVICIO_TECNICO SER
    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE 
    ON ELE.ID_ELEMENTO = SER.ELEMENTO_CLIENTE_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD
    ON MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MAR
    ON MAR.ID_MARCA_ELEMENTO = MOD.MARCA_ELEMENTO_ID
    WHERE SERVICIO_ID = Cn_ServicioId;

    CURSOR C_EQUIPO(Cn_Marca VARCHAR2) IS
    SELECT PD.VALOR1, PD.VALOR2, PD.VALOR3, PD.VALOR4, PD.VALOR5, PD.VALOR6, PD.VALOR7
    FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
     DB_GENERAL.ADMI_PARAMETRO_CAB PC
    WHERE PC.ID_PARAMETRO = PD.PARAMETRO_ID
    AND PC.NOMBRE_PARAMETRO = Lv_NombreParametro
    AND PC.ESTADO = Lv_EstadoActivo
    AND PD.ESTADO = Lv_EstadoActivo
    AND PD.VALOR2 = Cn_Marca;

    CURSOR C_SOLICITUD IS
    SELECT ID_TIPO_SOLICITUD
    FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD
    WHERE DESCRIPCION_SOLICITUD = Lv_DescripSolicitud;

    CURSOR C_SOLICITUD_SOPORTE IS
    SELECT ID_TIPO_SOLICITUD
    FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD
    WHERE DESCRIPCION_SOLICITUD = Lv_DescripSolSoporte;

    CURSOR C_WIFI IS
    SELECT ID_CARACTERISTICA
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_NombreWifi
    AND ESTADO = Lv_EstadoActivo
    AND TIPO = Lv_TipoModulo;

    CURSOR C_CLIENTE IS
    SELECT ID_CARACTERISTICA
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_NombreCliente
    AND ESTADO = Lv_EstadoActivo
    AND TIPO = Lv_TipoModulo;

    CURSOR C_EXTENDER IS
    SELECT ID_CARACTERISTICA
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_NombreExtender
    AND ESTADO = Lv_EstadoActivo
    AND TIPO = Lv_TipoModulo;

    CURSOR C_PRODUCTO(Cn_Plan VARCHAR2) IS
    SELECT CAB.NOMBRE_PLAN, DET.PRODUCTO_ID, PRO.DESCRIPCION_PRODUCTO
    FROM DB_COMERCIAL.INFO_PLAN_CAB CAB
    INNER JOIN DB_COMERCIAL.INFO_PLAN_DET DET
    ON DET.PLAN_ID = CAB.ID_PLAN
    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRO
    ON PRO.ID_PRODUCTO = DET.PRODUCTO_ID
    AND (PRO.DESCRIPCION_PRODUCTO = Lv_ProductoWifi OR 
    PRO.DESCRIPCION_PRODUCTO = Lv_ProductoExtender)
    WHERE CAB.NOMBRE_PLAN = Cn_Plan;

    CURSOR C_DETALLE_SOL_CARACT_WIFI(Cn_DetalleSolicitud NUMBER) IS
    SELECT ID_SOLICITUD_CARACTERISTICA
    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
    WHERE DETALLE_SOLICITUD_ID = Cn_DetalleSolicitud
    AND CARACTERISTICA_ID = (SELECT ID_CARACTERISTICA 
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_NombreWifi
    AND TIPO = Lv_TipoModulo);

    CURSOR C_DETALLE_SOL_CARACT_EXTENDER(Cn_DetalleSolicitud NUMBER) IS
    SELECT ID_SOLICITUD_CARACTERISTICA
    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
    WHERE DETALLE_SOLICITUD_ID = Cn_DetalleSolicitud
    AND CARACTERISTICA_ID = (SELECT ID_CARACTERISTICA 
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_NombreExtender
    AND TIPO = Lv_TipoModulo);

    CURSOR C_PLAN_SIN_CARAC IS
    SELECT ID_CARACTERISTICA
    FROM DB_COMERCIAL.ADMI_CARACTERISTICA
    WHERE DESCRIPCION_CARACTERISTICA = Lv_ModeloRouter
    AND ESTADO = Lv_EstadoActivo;

    CURSOR C_DETALLE_SOL_CARACT_ROUTER(Cn_DetalleSolicitud NUMBER, Cn_IdCaracteristica NUMBER) IS
    SELECT ID_SOLICITUD_CARACTERISTICA
    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
    WHERE DETALLE_SOLICITUD_ID = Cn_DetalleSolicitud
    AND CARACTERISTICA_ID = Cn_IdCaracteristica;

    CURSOR C_INTERFACE_ELEMENTO (Cn_ClienteId NUMBER) IS
    SELECT ENL.INTERFACE_ELEMENTO_FIN_ID FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INF
    ,DB_INFRAESTRUCTURA.INFO_ENLACE ENL 
    WHERE INF.ELEMENTO_ID IN (Cn_ClienteId) 
    AND INF.ESTADO = Lv_Conectado
    AND ENL.INTERFACE_ELEMENTO_INI_ID IN (INF.ID_INTERFACE_ELEMENTO);

    CURSOR C_TIPO_MODELO (Cn_InterfaceId NUMBER) IS
    SELECT ADM.TIPO_ELEMENTO_ID
    FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INT
    ,DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE
    ,DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ADM
    WHERE INT.ID_INTERFACE_ELEMENTO = Cn_InterfaceId
    AND ELE.ID_ELEMENTO IN (INT.ELEMENTO_ID)
    AND ADM.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID;

    CURSOR C_ADMI_TIPO_MODELO IS
    SELECT TIP.ID_TIPO_ELEMENTO
    FROM DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
    WHERE TIP.NOMBRE_TIPO_ELEMENTO IN (Lv_EquipoExtender,Lv_EquipoCpeOnt)
    AND TIP.ESTADO = Lv_EstadoActivo; 

    Lv_DirectorioBaseDatos              VARCHAR2(100);
    Lv_RutaDirectorioBaseDatos          VARCHAR2(500);
    Lr_RegGetConfigNfsSolEquipo         Lc_GetConfigNfsSolicitudEquipo%ROWTYPE;
    Lv_CodigoAppSolicitudEquipo         VARCHAR2(10);
    Lv_CodigoPathSolicitudEquipo        VARCHAR2(10);
    Lv_UrlMicroServicioNfs              VARCHAR2(500);
    Lv_PathGuardarArchivo               VARCHAR2(4000);
    Lv_ParamsGuardarArchivo             VARCHAR2(4000);
    Lv_RespuestaGuardarArchivo          VARCHAR2(4000);
    Ln_CodeGuardarArchivo               NUMBER;
    Ln_CountArchivosGuardados           NUMBER;
    Lr_RegGetValoresParamsGeneral       Lc_GetValoresParamsGeneral%ROWTYPE;

    BEGIN
      Lcl_JsonSolicitud := Pcl_JsonSolicitud;
      Ln_count          := Pn_NumeroRegistro;
      Lv_UsrCreacion    := Pv_UsuarioCreacion;

      Lv_ContenidoCabArchivoCorreo := 'Elemento' || Lv_Delimitador ||
                                  'Login' || Lv_Delimitador ||
                                  'Plan' || Lv_Delimitador ||
                                  'Estado' || Lv_Delimitador ||
                                  'Observaci¿n';

      OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamDirBdArchivosTmp);
      FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
      CLOSE Lc_GetValoresParamsGeneral;
      Lv_DirectorioBaseDatos      := Lr_RegGetValoresParamsGeneral.VALOR1;
      IF Lv_DirectorioBaseDatos IS NULL THEN
        Lv_Mensaje := 'No se ha podido obtener el directorio para guardar los archivos csv';
        RAISE Le_Exception;
      END IF;
      Lv_RutaDirectorioBaseDatos  := Lr_RegGetValoresParamsGeneral.VALOR2;
      IF Lv_RutaDirectorioBaseDatos IS NULL THEN
        Lv_Mensaje := 'No se ha podido obtener la rura del directorio para guardar los archivos csv';
        RAISE Le_Exception;
      END IF;

      OPEN Lc_GetConfigNfsSolicitudEquipo;
      FETCH Lc_GetConfigNfsSolicitudEquipo INTO Lr_RegGetConfigNfsSolEquipo;
      CLOSE Lc_GetConfigNfsSolicitudEquipo;
      Lv_CodigoAppSolicitudEquipo     := Lr_RegGetConfigNfsSolEquipo.CODIGO_APP;
      Lv_CodigoPathSolicitudEquipo    := Lr_RegGetConfigNfsSolEquipo.CODIGO_PATH;
      IF Lv_CodigoAppSolicitudEquipo IS NULL OR Lv_CodigoPathSolicitudEquipo IS NULL THEN
        Lv_Mensaje := 'No se ha podido obtener la configuraci¿n de la ruta NFS';
        RAISE Le_Exception;
      END IF;

      Lr_RegGetValoresParamsGeneral := NULL;
      OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamUrlMicroNfs);
      FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
      CLOSE Lc_GetValoresParamsGeneral;
      Lv_UrlMicroServicioNfs  := Lr_RegGetValoresParamsGeneral.VALOR1;
      IF Lv_UrlMicroServicioNfs IS NULL THEN
        Lv_Mensaje := 'No se ha podido obtener la URL del NFS';
        RAISE Le_Exception;
      END IF;

      Lv_NombreArchivoCorreo  := Lv_SubModuloProcesMasivo || '_Solequi.csv';
      Lf_ArchivoProcesoSae    := UTL_FILE.FOPEN(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreo, 'w', 32767);
      UTL_FILE.PUT_LINE(Lf_ArchivoProcesoSae, Lv_ContenidoCabArchivoCorreo);

      FOR j IN 1 .. Ln_count LOOP
        APEX_JSON.PARSE(Lcl_JsonSolicitud);
        Lv_Servicio       := APEX_JSON.get_varchar2(p_path => '[%d].intIdServicio', p0 => j);
        Lv_login          := APEX_JSON.get_varchar2(p_path => '[%d].strLogin',      p0 => j);
        Lv_EstadoServicio := APEX_JSON.get_varchar2(p_path => '[%d].strEstado',     p0 => j);
        Lv_Solicitud      := APEX_JSON.get_varchar2(p_path => '[%d].intIdSolicitud',p0 => j);
        Lv_Plan           := APEX_JSON.get_varchar2(p_path => '[%d].strNombrePlan', p0 => j);
        Lv_IntIdModAsig   := APEX_JSON.get_varchar2(p_path => '[%d].intIdModAsig',  p0 => j);
        Lv_ModeloWifi     := APEX_JSON.get_varchar2(p_path => '[%d].strModeloNombre',  p0 => j);
        Lv_NombreElemento := APEX_JSON.get_varchar2(p_path => '[%d].strNombreElemento',  p0 => j);

        Ln_Servicio       := TO_NUMBER(Lv_Servicio,'9999999999999');
        Ln_Solicitud      := TO_NUMBER(Lv_Solicitud,'9999999999999');
        Lv_Observacion    := '';

        -- PREGUNTAMOS SI EXISTE LA SOLICITUD PARA NO DUPLICARLA
        Lv_ExisteSolicitud          := 'NO';
        Lv_CambioWifiDualBand       := 'NO';
        Lv_AgregarExtenderDualBand  := 'NO';
        Lv_EquipoClienteWifi        := 'NO';
        Lv_EquipoClienteExtender    := 'NO';
        Lv_NecesitaEquipo           := 'NO';
        Lv_ExisteModeloExtender     := 'NO';

        -- CONSULTAMOS LOS EQUIPOS QUE ESTAN ASOCIADOS AL PLAN
        FOR k IN C_PRODUCTO(Lv_Plan) LOOP
          Lv_NombreProducto  :=  k.DESCRIPCION_PRODUCTO; 
          IF Lv_NombreProducto = Lv_ProductoWifi THEN
            Lv_CambioWifiDualBand       := 'SI';
            Ln_WifiDual                 := Ln_WifiDual + 1;
          END IF;
          IF Lv_NombreProducto = Lv_ProductoExtender THEN
            Lv_AgregarExtenderDualBand  := 'SI';  
            Ln_Extender                 := Ln_Extender + 1;
          END IF;
        END LOOP;

        -- CONSULTAMOS EL TIPO DE SOLICITUD
        OPEN C_SOLICITUD;
        FETCH C_SOLICITUD INTO Ln_IdTipoSolicitud;
        CLOSE C_SOLICITUD; 

        IF Ln_IdTipoSolicitud IS NULL THEN 
           CONTINUE;
        END IF;

        -- CONSULTAMOS EL TIPO DE SOLICITUD
        OPEN C_SOLICITUD_SOPORTE;
        FETCH C_SOLICITUD_SOPORTE INTO Ln_IdTipoSolSoporte;
        CLOSE C_SOLICITUD_SOPORTE; 

        IF Ln_IdTipoSolSoporte IS NULL THEN 
           CONTINUE;
        END IF;

        -- CONSULTAMOS QUE TIPO DE SOLICITUD SE DEBE GUARDAR
        IF Lv_CambioWifiDualBand = 'NO' AND Lv_AgregarExtenderDualBand  = 'NO' 
           AND Lv_IntIdModAsig IS NOT NULL THEN
          Ln_IdTipoSolicitudFinal := Ln_IdTipoSolSoporte;
        ELSE 
          Ln_IdTipoSolicitudFinal := Ln_IdTipoSolicitud;
        END IF; 

        -- CONSULTAMOS SI EXISTE UNA SOLICITUD DE AGREGAR EQUIPO
        OPEN C_DETALLE_SOLICITUD(Ln_Servicio, Ln_IdTipoSolicitudFinal);
        FETCH C_DETALLE_SOLICITUD INTO Ln_IdDetalleSolicitud;
        CLOSE C_DETALLE_SOLICITUD;

        IF Ln_IdDetalleSolicitud IS NOT NULL THEN
          Lv_ExisteSolicitud := 'SI'; 
        ELSE
          Ln_IdDetalleSolicitud := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
        END IF;

        -- INCREMENTAMOS TOTAL DE REGISTROS
        Ln_NumRegistrosTotal  := Ln_NumRegistrosTotal + 1 ;  

        -- VERIFICA MODELOS DUAL BAND
        OPEN C_MARCA(Ln_Servicio);
        FETCH C_MARCA INTO Lv_ModeloElemento,Lv_MarcaOlt,Ln_ElementoClienteId;
        CLOSE C_MARCA;

        IF Lv_ModeloElemento IS NULL OR Lv_MarcaOlt IS NULL THEN
          CONTINUE;
        END IF;

        -- CONSULTA SI NECESITA EQUIPO PARA LA SOLICITUD
        FOR i IN C_EQUIPO(Lv_MarcaOlt) LOOP
            Lt_ArrayModelos(Ln_Contador)  :=  i.VALOR4;
            Ln_Contador                   :=  Ln_Contador + 1;
            IF Lv_ModeloWifi = i.VALOR4 AND i.VALOR1 = Lv_ValorWifi THEN
              Lv_EquipoClienteWifi    := 'SI';
            END IF;
            Lv_NecesitaEquipo             := 'SI';
        END LOOP;

        -- CONTENIDO DEL ARREGLO
        IF Lt_ArrayModelos.COUNT  > 0 THEN
            Ln_ContadorArreglo := Lt_ArrayModelos.FIRST;
            WHILE (Ln_ContadorArreglo IS NOT NULL)
            LOOP
                Ln_ContadorArreglo := Lt_ArrayModelos.NEXT(Ln_ContadorArreglo);
            END LOOP; 
        END IF;

        IF Lv_NecesitaEquipo = 'SI' THEN
          Ln_NecesitaEquipo := Ln_NecesitaEquipo + 1;

          -- CONSULTAMOS EL TIPO DE SOLICITUD
          OPEN C_SOLICITUD;
          FETCH C_SOLICITUD INTO Ln_IdTipoSolicitud;
          CLOSE C_SOLICITUD; 

          IF Ln_IdTipoSolicitud IS NULL THEN 
            CONTINUE;
          END IF;

          IF Lv_ExisteSolicitud = 'SI' THEN
            Lv_Observacion := Lv_Observacion || 'Solicitud ya existe. ';
          END IF;

          -- PREGUNTAMOS SI CAMBIAMOS A WIFI DUAL BAND
          IF Lv_CambioWifiDualBand = 'SI' THEN
            OPEN C_WIFI;
            FETCH C_WIFI INTO Ln_CaracWifi;
            CLOSE C_WIFI;

            IF Ln_CaracWifi IS NULL THEN 
              CONTINUE;
            END IF;

            OPEN C_CLIENTE;
            FETCH C_CLIENTE INTO Ln_CaracCliente;
            CLOSE C_CLIENTE;

            IF Ln_CaracCliente IS NULL THEN 
              CONTINUE;
            END IF;

            -- PREGUNTAMOS SI EL CLIENTE TIENE EL EQUIPO
            IF Lv_EquipoClienteWifi =  'SI' THEN
              Lv_Observacion := Lv_Observacion || 'Cliente ya tiene equipo WIFI DUAL BAND. ';
            ELSE
              -- PREGUNTAMOS SI EXISTE LA CARACTERISTICA
              OPEN C_DETALLE_SOL_CARACT_WIFI(Ln_IdDetalleSolicitud);
              FETCH C_DETALLE_SOL_CARACT_WIFI INTO Ln_CaracWifiDet;
              CLOSE C_DETALLE_SOL_CARACT_WIFI;

              IF Ln_CaracWifiDet IS NULL THEN 
                -- INSERTAMOS EN LA TABLA INFO_DETALLE_SOL_CARACT (WIFI)
                INSERT
                INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                (
                  ID_SOLICITUD_CARACTERISTICA,
                  CARACTERISTICA_ID,
                  DETALLE_SOLICITUD_ID,
                  VALOR,
                  FE_CREACION,
                  USR_CREACION,
                  ESTADO
                ) 
                VALUES
                (
                  DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                  Ln_CaracWifi,
                  Ln_IdDetalleSolicitud,
                  Lv_ValorSi,
                  SYSDATE,
                  Lv_UsrCreacion,
                  Lv_EstadoDetSolicitud
                );

                -- INSERTAMOS EN LA TABLA INFO_DETALLE_SOL_CARACT (CLIENTE)
                INSERT
                INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                (
                  ID_SOLICITUD_CARACTERISTICA,
                  CARACTERISTICA_ID,
                  DETALLE_SOLICITUD_ID,
                  VALOR,
                  FE_CREACION,
                  USR_CREACION,
                  ESTADO
                )
                VALUES
                (
                  DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                  Ln_CaracCliente,
                  Ln_IdDetalleSolicitud,
                  Ln_ElementoClienteId,
                  SYSDATE,
                  Lv_UsrCreacion,
                  Lv_EstadoDetSolicitud
                );
              ELSE
                Lv_Observacion := Lv_Observacion || 'Ya existe caracter¿stica Wifi. ';
              END IF;
            END IF;
          END IF;

          -- PREGUNTAMOS SI CAMBIAMOS A EXTENDER
          IF Lv_AgregarExtenderDualBand = 'SI' THEN
            OPEN C_EXTENDER;
            FETCH C_EXTENDER INTO Ln_CaracExtender;
            CLOSE C_EXTENDER;

            IF Ln_CaracExtender IS NULL THEN 
              CONTINUE;
            END IF;

            -- PREGUNTAMOS SI EL CLIENTE TIENE EL EQUIPO EXTENDER DUAL BAND
            OPEN C_INTERFACE_ELEMENTO(Ln_ElementoClienteId);
            FETCH C_INTERFACE_ELEMENTO INTO Ln_InterEleFinId;
            CLOSE C_INTERFACE_ELEMENTO;

            IF Ln_InterEleFinId IS NULL THEN 
              Lv_EquipoClienteExtender := 'SI';  
            ELSE
              -- PREGUNTAMOS SI ES UN EQUIPO EXTENDER DUAL BAND
              OPEN C_TIPO_MODELO(Ln_InterEleFinId);
              FETCH C_TIPO_MODELO INTO Ln_TipoModelo;
              CLOSE C_TIPO_MODELO;

              IF Ln_TipoModelo IS NOT NULL THEN 

                FOR h IN C_ADMI_TIPO_MODELO LOOP
                  IF Ln_TipoModelo = h.ID_TIPO_ELEMENTO THEN
                    Lv_ExisteModeloExtender    := 'SI';
                  END IF;
                END LOOP;

                IF Lv_ExisteModeloExtender = 'SI' THEN
                  Lv_Observacion := Lv_Observacion || 'Cliente ya tiene equipo EXTENDER DUAL BAND. '; 
                ELSE
                  Lv_EquipoClienteExtender := 'SI';  
                END IF;
              ELSE
                Lv_EquipoClienteExtender := 'SI';   
              END IF;
            END IF;

            IF Lv_EquipoClienteExtender = 'SI' THEN
              -- PREGUNTAMOS SI EXISTE LA CARACTERISTICA
              OPEN C_DETALLE_SOL_CARACT_EXTENDER(Ln_IdDetalleSolicitud);
              FETCH C_DETALLE_SOL_CARACT_EXTENDER INTO Ln_CaracExtenderDet;
              CLOSE C_DETALLE_SOL_CARACT_EXTENDER;

              IF Ln_CaracExtenderDet IS NULL THEN 
                -- INSERTAMOS EN LA TABLA INFO_DETALLE_SOL_CARACT (EXTENDER)
                INSERT
                INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                (
                  ID_SOLICITUD_CARACTERISTICA,
                  CARACTERISTICA_ID,
                  DETALLE_SOLICITUD_ID,
                  VALOR,
                  FE_CREACION,
                  USR_CREACION,
                  ESTADO
                )
                VALUES
                (
                  DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                  Ln_CaracExtender,
                  Ln_IdDetalleSolicitud,
                  Lv_ValorSi,
                  SYSDATE,
                  Lv_UsrCreacion,
                  Lv_EstadoDetSolicitud
                );
              ELSE
                Lv_Observacion := Lv_Observacion || 'Ya existe caracter¿stica Extender.';                 
              END IF;
            END IF;
          END IF;

          -- INGRESAMOS EL MODELO SI EL PLAN NO TIENE CARACTER¿STICAS
          IF Lv_CambioWifiDualBand = 'NO' AND Lv_AgregarExtenderDualBand  = 'NO' 
             AND Lv_IntIdModAsig IS NOT NULL THEN
            Ln_SinCambio  := Ln_SinCambio + 1;
            -- CONSULTAMOS EN LA ADMI_CARACTERISTICA
            OPEN C_PLAN_SIN_CARAC;
            FETCH C_PLAN_SIN_CARAC INTO Ln_CaracPlanSin;
            CLOSE C_PLAN_SIN_CARAC;

            -- CONSULTAMOS SI EXISTE EL REGISTRO CON LA CARACTER¿STICA
            OPEN C_DETALLE_SOL_CARACT_ROUTER(Ln_IdDetalleSolicitud,Ln_CaracPlanSin);
            FETCH C_DETALLE_SOL_CARACT_ROUTER INTO Ln_CaracRouter;
            CLOSE C_DETALLE_SOL_CARACT_ROUTER;

            IF Ln_CaracRouter IS NULL THEN 
              -- INSERTAMOS EN LA TABLA INFO_DETALLE_SOL_CARACT (PLAN SIN CARACTER¿STICAS)
              INSERT
              INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
              (
                ID_SOLICITUD_CARACTERISTICA,
                CARACTERISTICA_ID,
                DETALLE_SOLICITUD_ID,
                VALOR,
                FE_CREACION,
                USR_CREACION,
                ESTADO
              )
              VALUES
              (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_CaracPlanSin,
                Ln_IdDetalleSolicitud,
                Lv_IntIdModAsig,
                SYSDATE,
                Lv_UsrCreacion,
                Lv_EstadoDetSolicitud
              );
              Lv_Observacion  := Lv_Observacion || 'Se genera solicitud con modelo seleccionado. ';
            ELSE
              Lv_Observacion  := Lv_Observacion || 'Ya existe caracter¿stica.';
            END IF;
          END IF;

          -- CONSULTAMOS SI EL CLIENTE TIENE WIFI DUAL BAND Y EXTENDER DUAL BAND PARA NO GENERAR LA SOLICITUD
          IF Lv_ExisteModeloExtender = 'SI' AND Lv_EquipoClienteWifi =  'SI' AND Lv_ExisteSolicitud = 'NO'  THEN
            Lv_Observacion := Lv_Observacion || 'No se gener¿ solicitud ya que cliente tiene equipos WIFI Y EXTENDER Dual Band. ';  
          ELSE
            IF Lv_ExisteSolicitud = 'NO' THEN
              -- INSERTAMOS EN LA TABLA INFO_DETALLE_SOLICITUD
              INSERT
              INTO DB_COMERCIAL.INFO_DETALLE_SOLICITUD
              (
                ID_DETALLE_SOLICITUD,
                SERVICIO_ID,
                TIPO_SOLICITUD_ID,
                FE_CREACION,
                USR_CREACION,
                ESTADO
              )
              VALUES
              (
                Ln_IdDetalleSolicitud,
                Ln_Servicio,
                Ln_IdTipoSolicitudFinal,
                SYSDATE,
                Lv_UsrCreacion,
                Lv_EstadoDetSolicitud
              );
            END IF;
          END IF;
          
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoSae, Lv_NombreElemento || Lv_Delimitador ||
                                                  Lv_login || Lv_Delimitador ||
                                                  Lv_Plan  || Lv_Delimitador ||
                                                  Lv_EstadoServicio || Lv_Delimitador ||
                                                  Lv_Observacion);
          --  Se agrega el historial de la solicitud
          Lr_DetalleSolHistorial                        := NULL;
          Lr_DetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
          Lr_DetalleSolHistorial.DETALLE_SOLICITUD_ID   := Ln_Solicitud;
          Lr_DetalleSolHistorial.ESTADO                 := Lv_EstadoDetSolicitud;
          Lr_DetalleSolHistorial.OBSERVACION            := Lv_ObservacionSolicitud;
          Lr_DetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
          Lr_DetalleSolHistorial.IP_CREACION            := '127.0.0.1';
          DB_COMERCIAL.COMEK_TRANSACTION.P_INSERT_DETALLE_SOL_HIST(Lr_DetalleSolHistorial, Lv_Mensaje);

          UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
          SET    DETALLE_PROCESO_ID  = 1
          WHERE  ID_DETALLE_SOLICITUD = Ln_Solicitud;

          IF Lv_Mensaje IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
        END IF;
        Ln_NumRegistrosOk := Ln_NumRegistrosOk  + 1;
        COMMIT;

      END LOOP;

      UTL_FILE.FCLOSE(Lf_ArchivoProcesoSae);

      Lv_ParamsGuardarArchivo := 'URL NFS: ' || Lv_UrlMicroServicioNfs || ', RUTA_DIRECTORIO: ' || Lv_RutaDirectorioBaseDatos 
                                || ', NOMBRE_ARCHIVO: ' || Lv_NombreArchivoCorreo || ', CODIGO_APP: ' || Lv_CodigoAppSolicitudEquipo 
                                || ', CODIGO_PATH: ' || Lv_CodigoPathSolicitudEquipo;

      Lv_RespuestaGuardarArchivo  := DB_GENERAL.GNRLPCK_UTIL.F_GUARDAR_ARCHIVO_NFS(   Lv_UrlMicroServicioNfs,
                                                                                    Lv_RutaDirectorioBaseDatos || Lv_NombreArchivoCorreo,
                                                                                    Lv_NombreArchivoCorreo,
                                                                                    NULL,
                                                                                    Lv_CodigoAppSolicitudEquipo,
                                                                                    Lv_CodigoPathSolicitudEquipo);

      IF Lv_RespuestaGuardarArchivo IS NULL THEN
        Lv_Mensaje   := 'No se ha podido generar el archivo de manera correcta. Por favor consulte al Dep. de Sistemas!';
        RAISE Le_Exception;
      END IF;
      APEX_JSON.PARSE(Lv_RespuestaGuardarArchivo);
      Ln_CodeGuardarArchivo   := APEX_JSON.GET_NUMBER('code');
      IF Ln_CodeGuardarArchivo IS NULL OR Ln_CodeGuardarArchivo <> 200 THEN
        Lv_Mensaje := 'Ha ocurrido alg¿n error al generar el archivo. Por favor consulte al Dep. de Sistemas!';
        RAISE Le_Exception;
      END IF;
      Ln_CountArchivosGuardados := APEX_JSON.GET_COUNT(p_path => 'data');
      IF Ln_CountArchivosGuardados IS NULL THEN
        Lv_Mensaje := 'No se ha generado correctamente la ruta del archivo. Por favor consulte al Dep. de Sistemas!';
        RAISE Le_Exception;
      END IF;

      IF Ln_CountArchivosGuardados <> 1 THEN
        Lv_Mensaje := 'Ha ocurrido un error inesperado al generar el archivo. Por favor consulte al Dep. de Sistemas!';
        RAISE Le_Exception;
      END IF;

      FOR i IN 1 .. Ln_CountArchivosGuardados LOOP
        Lv_PathGuardarArchivo := APEX_JSON.GET_VARCHAR2(p_path => 'data[%d].pathFile', p0 => i);
      END LOOP;

      IF Lv_PathGuardarArchivo IS NULL THEN
        Lv_Mensaje := 'No se ha podido obtener la ruta en la que se encuentra el archivo generado. Por favor consulte al Dep. de Sistemas!';
        RAISE Le_Exception;
      END IF;
      Ln_IdDocumento := DB_COMUNICACION.SEQ_INFO_DOCUMENTO.NEXTVAL;
      INSERT
      INTO DB_COMUNICACION.INFO_DOCUMENTO
      (
        ID_DOCUMENTO,
        NOMBRE_DOCUMENTO,
        UBICACION_LOGICA_DOCUMENTO,
        UBICACION_FISICA_DOCUMENTO,
        USR_CREACION,
        FE_CREACION,
        IP_CREACION,
        ESTADO,
        MENSAJE,
        EMPRESA_COD
      )
      VALUES
      (
        Ln_IdDocumento,
        'Archivo generado por consulta en corte masivo MD',
        Lv_NombreArchivoCorreo,
        Lv_PathGuardarArchivo,
        Lv_UsrCreacion,
        SYSDATE,
        '127.0.0.1',
        'Eliminado',
        'Documento que se genera al generar solicitud de agregar equipo masivo',
        '10'
      );
      
      COMMIT;

      Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('SAESUBIDA');
      Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
      IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
        Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
      ELSE 
        Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
      END IF;

      IF Lv_PlantillaInicial IS NULL THEN 
        Lv_Mensaje := 'No se ha podido obtener la plantilla del correo enviado al procesar un archivo csv';
        RAISE Le_Exception;
      END IF;

      Lv_PlantillaCorreo  := Lv_PlantillaInicial;
      Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{NUM_REGISTROS_TOTAL}}', Ln_NumRegistrosTotal);

      IF Ln_NumRegistrosOk > 0 THEN
          Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumRegistrosOk || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Solicitudes procesadas correctamente</td>' ||
                            '</tr>';
      END IF;

      IF Ln_SinCambio > 0 THEN
          Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_SinCambio || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Solicitudes sin procesar por valores nulos</td>' ||
                            '</tr>';
      END IF;

      IF Ln_WifiDual > 0 THEN
          Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_WifiDual || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Solicitudes para agregar equipo WifiDual</td>' ||
                            '</tr>';
      END IF;

      IF Ln_Extender > 0 THEN
          Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_Extender || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Solicitudes para agregar equipo Extender</td>' ||
                            '</tr>';
      END IF;

      IF Ln_TotalError > 0 THEN
          Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_TotalError || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Solicitudes que no tienen la marcaci¿n correcta</td>' ||
                            '</tr>';
      END IF;
      Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{CUERPO_CORREO}}', Lv_ContenidoCorreo);

      Lv_Gzip := 'gzip ' || Lv_RutaDirectorioBaseDatos || Lv_NombreArchivoCorreo;
      Lv_NombreArchivoCorreoZip  := Lv_NombreArchivoCorreo || '.gz';
      DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND (Lv_Gzip));

     BEGIN
             
        DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, Lv_Asunto, Lv_PlantillaCorreo, 
                                                Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);
                                      
        UTL_FILE.FREMOVE(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);
        
        EXCEPTION
        WHEN OTHERS THEN
          UTL_MAIL.SEND (   SENDER      => Lv_Remitente, 
                        RECIPIENTS  => Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                        SUBJECT     => Lv_Asunto,
                        MESSAGE     => SUBSTR(Lv_PlantillaCorreo, 1, 32767),
                        MIME_TYPE   => 'text/html; charset=iso-8859-1');

          Pv_MensajeError     := 'ERROR al procesar COD_ERROR: '||SQLCODE || ' -ERROR_STACK : ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
          DBMS_OUTPUT.PUT_LINE(Pv_MensajeError);
          DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'DB_INFRAESTRUCTURA.P_GEN_SOLICITUD_EQUIPO->ENVIO_CORREO', 
                                            'No se ha podido enviar el archivo en la ruta ' || Lv_RutaDirectorio || Lv_NombreArchivoCorreo || '-' || Pv_MensajeError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

      END;

      EXCEPTION
      WHEN Le_Exception THEN
        ROLLBACK;
        Pv_MensajeError     := 'ERROR al procesar COD_ERROR: '||SQLCODE || ' -ERROR_STACK : ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        DBMS_OUTPUT.PUT_LINE(Pv_MensajeError);
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'DB_INFRAESTRUCTURA.P_GEN_SOLICITUD_EQUIPO', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
      WHEN OTHERS THEN
        ROLLBACK;
        Pv_MensajeError     := 'ERROR al procesar COD_ERROR: '||SQLCODE || ' -ERROR_STACK : ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        DBMS_OUTPUT.PUT_LINE(Pv_MensajeError);
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'DB_INFRAESTRUCTURA.P_GEN_SOLICITUD_EQUIPO', Pv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    END P_GEN_SOLICITUD_EQUIPO;

  PROCEDURE P_ELIMINA_SOLS_DUAL_BAND_SERV(
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2,
    Pcl_DetalleSolsEliminadas   OUT CLOB
  )
  AS
    Lv_CaractTecnicaWdb             VARCHAR2(14) := 'WIFI DUAL BAND';
    Lv_CaractTecnicaEdb             VARCHAR2(18) := 'EXTENDER DUAL BAND';
    Lv_TipoCaract                   VARCHAR2(7) := 'TECNICA';
    Lv_SolAgregarEquipo             VARCHAR2(24) := 'SOLICITUD AGREGAR EQUIPO';
    Lv_SolAgregarEquipoMasivo       VARCHAR2(31) := 'SOLICITUD AGREGAR EQUIPO MASIVO';
    Lv_SolMigracion                 VARCHAR2(19) := 'SOLICITUD MIGRACION';
    Lv_EstadoPrePlanificada         VARCHAR2(14) := 'PrePlanificada';
    Lv_EstadoPlanificada            VARCHAR2(11) := 'Planificada';
    Lv_EstadoDetenido               VARCHAR2(8) := 'Detenido';
    Lv_EstadoReplanificada          VARCHAR2(13) := 'Replanificada';
    Lv_EstadoAsignadoTarea          VARCHAR2(13) := 'AsignadoTarea';
    Lv_EstadoAsignada               VARCHAR2(8) := 'Asignada';
    Lv_EstadoPendienteExtender      VARCHAR2(17) := 'PendienteExtender';
    Lv_EstadoEliminada              VARCHAR2(9) := 'Eliminada';
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_InfoDetalleSolHistorial      DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Lv_UsrCreacion                  VARCHAR2(13) := 'regulaWdbYEdb';
    Lv_IpCreacion                   VARCHAR2(9) := '127.0.0.1';
    Lv_ObservacionSolAEliminar      VARCHAR2(200) := 'Solicitud eliminada por regularizaci¿n de solicitudes para gestionar equipos Dual Band';
    Lv_ProcesoTareas                VARCHAR2(11) := 'Regularizar';
    Lv_ContinuaEliminacion          VARCHAR2(2);
    Lcl_DetalleSolsEliminadas       CLOB;
    Lv_MsjError                     VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    CURSOR Lc_GetSolicitudesAbiertas
    IS
      SELECT SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD, TIPO_SOLICITUD.DESCRIPCION_SOLICITUD, SOLICITUDES_ABIERTAS.ESTADO AS ESTADO_SOLICITUD,
      CASE
        WHEN TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Lv_SolMigracion THEN ' - '
      ELSE
        (
          SELECT
          CASE
            WHEN COUNT(SOL_CARACT_WDB.ID_SOLICITUD_CARACTERISTICA) > 0
            THEN 'SI'
            ELSE 'NO'
          END
          FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOL_CARACT_WDB
          INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT_WDB
          ON CARACT_WDB.ID_CARACTERISTICA = SOL_CARACT_WDB.CARACTERISTICA_ID
          WHERE SOL_CARACT_WDB.DETALLE_SOLICITUD_ID = SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD
          AND CARACT_WDB.DESCRIPCION_CARACTERISTICA = Lv_CaractTecnicaWdb
          AND CARACT_WDB.TIPO = Lv_TipoCaract
          AND CARACT_WDB.ESTADO = Lv_EstadoActivo
          AND SOL_CARACT_WDB.ESTADO IN (  Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                                          Lv_EstadoAsignadoTarea, Lv_EstadoAsignada)
        ) 
      END AS TIENE_SOL_CARACT_WDB,
      CASE
      WHEN TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Lv_SolMigracion THEN ' - '
      ELSE
        (
          SELECT
          CASE
            WHEN COUNT(SOL_CARACT_EDB.ID_SOLICITUD_CARACTERISTICA) > 0
            THEN 'SI'
            ELSE 'NO'
          END
          FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOL_CARACT_EDB
          INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT_EDB
          ON CARACT_EDB.ID_CARACTERISTICA = SOL_CARACT_EDB.CARACTERISTICA_ID
          WHERE SOL_CARACT_EDB.DETALLE_SOLICITUD_ID = SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD
          AND CARACT_EDB.DESCRIPCION_CARACTERISTICA = Lv_CaractTecnicaEdb
          AND CARACT_EDB.TIPO = Lv_TipoCaract
          AND CARACT_EDB.ESTADO = Lv_EstadoActivo
          AND SOL_CARACT_EDB.ESTADO IN (  Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                                          Lv_EstadoAsignadoTarea, Lv_EstadoAsignada)
        ) 
      END AS TIENE_SOL_CARACT_EDB
      FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOLICITUDES_ABIERTAS
      INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      ON TIPO_SOLICITUD.ID_TIPO_SOLICITUD = SOLICITUDES_ABIERTAS.TIPO_SOLICITUD_ID
      WHERE SOLICITUDES_ABIERTAS.SERVICIO_ID = Pn_IdServicio
      AND ( 
            (TIPO_SOLICITUD.DESCRIPCION_SOLICITUD IN (Lv_SolAgregarEquipo, Lv_SolAgregarEquipoMasivo)
             AND SOLICITUDES_ABIERTAS.ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                                                 Lv_EstadoAsignadoTarea, Lv_EstadoAsignada))
            OR
            (TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Lv_SolMigracion AND SOLICITUDES_ABIERTAS.ESTADO = Lv_EstadoPendienteExtender)
          );
  BEGIN
    IF Lc_GetSolicitudesAbiertas%ISOPEN THEN
      CLOSE Lc_GetSolicitudesAbiertas;
    END IF;
    FOR I_GetSolicitudesAbiertas IN Lc_GetSolicitudesAbiertas
    LOOP
      Lv_ContinuaEliminacion    := 'SI';
      IF Pn_IdSolicitudValida IS NOT NULL AND Pn_IdSolicitudValida = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD THEN 
        Lv_ContinuaEliminacion  := 'NO';
      END IF;
      IF Lv_ContinuaEliminacion = 'SI' THEN
        Lcl_DetalleSolsEliminadas :=  Lcl_DetalleSolsEliminadas || 
                                      '<tr>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                          I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.DESCRIPCION_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.ESTADO_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.TIENE_SOL_CARACT_WDB || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.TIENE_SOL_CARACT_EDB || 
                                        '</td>' ||
                                      '</tr>';

        UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
        SET    ESTADO = Lv_EstadoEliminada
        WHERE  ID_DETALLE_SOLICITUD = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD;

        Lr_InfoDetalleSolHistorial                        := NULL;
        Lr_InfoDetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
        Lr_InfoDetalleSolHistorial.DETALLE_SOLICITUD_ID   := I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD;
        Lr_InfoDetalleSolHistorial.ESTADO                 := Lv_EstadoEliminada;
        Lr_InfoDetalleSolHistorial.OBSERVACION            := Lv_ObservacionSolAEliminar;
        Lr_InfoDetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
        Lr_InfoDetalleSolHistorial.FE_CREACION            := SYSDATE;
        Lr_InfoDetalleSolHistorial.IP_CREACION            := Lv_IpCreacion;
        DB_COMERCIAL.COMEK_MODELO.P_INSERT_INFO_DETALLE_SOL_HIST(Lr_InfoDetalleSolHistorial, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
        SET ESTADO = Lv_EstadoEliminada,
        USR_ULT_MOD = Lv_UsrCreacion,
        FE_ULT_MOD = SYSDATE
        WHERE DETALLE_SOLICITUD_ID = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD
        AND ESTADO IN (   Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                          Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRP_CIERRA_TAREAS_SOLICITUD( I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD, 
                                                                              Lv_ProcesoTareas, 
                                                                              Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      END IF;
    END LOOP;
    Pv_Status                   := 'OK';
    Pcl_DetalleSolsEliminadas   := Lcl_DetalleSolsEliminadas;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status                   := 'ERROR';
    Pv_MsjError                 := 'No se ha podido eliminar correctamente las solicitudes abiertas del servicio';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV', 
                                            'No se ha podido eliminar correctamente las solicitudes abiertas del servicio' || Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status                   := 'ERROR';
    Pv_MsjError                 := 'No se ha podido eliminar correctamente las solicitudes abiertas del servicio';
    Pcl_DetalleSolsEliminadas   := '';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV', 
                                            'No se ha podido eliminar correctamente las solicitudes abiertas del servicio - ' 
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_COMERCIAL'),
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_SOLS_DUAL_BAND_SERV;

  PROCEDURE P_REGU_SOL_EQUIPOS_X_SERVICIO(  
    Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2
  )
  AS
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Lv_PlanConDetalleWdb            VARCHAR2(2);
    Lv_PlanConDetalleEdb            VARCHAR2(2);
    Lv_NecesitaCambiarWdb           VARCHAR2(2);
    Lv_NecesitaAgregarEdb           VARCHAR2(2);
    Lr_SolValidaEquiposDualBand     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_SolValidaGestionEquipos;
    Lrf_SolValidaGestionEquipos     SYS_REFCURSOR;
    Lr_DetalleSolicitud             DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
    Lr_DetalleSolCaract             DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
    Lv_EstadoIniSolEquiposDualBand  VARCHAR2(14) := 'PrePlanificada';
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_UsrCreacion                  VARCHAR2(13) := 'regulaWdbYEdb';
    Lv_IpCreacion                   VARCHAR2(9) := '127.0.0.1';
    Le_Exception                    EXCEPTION;
    Lcl_DetalleSolsEliminadas       CLOB;
    Lcl_ObservacionAgregar          CLOB;
    Lcl_ObservacionServicio         CLOB;
    Lv_DescripcionSolAgregarEquipo  VARCHAR2(24) := 'SOLICITUD AGREGAR EQUIPO';
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Ln_Rownum                       NUMBER := 1;
    Ln_IdTipoSolAgregarEquipo       DB_COMERCIAL.ADMI_TIPO_SOLICITUD.ID_TIPO_SOLICITUD%TYPE;
    Ln_IdCaractWifiDualBand         DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractElementoCliente      DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractExtenderDualBand     DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Lv_CaractTecnicaWdb             VARCHAR2(14) := 'WIFI DUAL BAND';
    Lv_CaractTecnicaElementCliente  VARCHAR2(16) := 'ELEMENTO CLIENTE';
    Lv_CaractTecnicaEdb             VARCHAR2(18) := 'EXTENDER DUAL BAND';
    Lv_NombreTecnicoExtender        VARCHAR2(18) := 'EXTENDER_DUAL_BAND';
    Ln_NumProdsServicio             NUMBER;
    Lv_TipoCaract                   VARCHAR2(7) := 'TECNICA';
    Lv_EstadoPrePlanificada         VARCHAR2(14) := 'PrePlanificada';
    Lv_EstadoPlanificada            VARCHAR2(11) := 'Planificada';
    Lv_EstadoDetenido               VARCHAR2(8) := 'Detenido';
    Lv_EstadoReplanificada          VARCHAR2(13) := 'Replanificada';
    Lv_EstadoAsignadoTarea          VARCHAR2(13) := 'AsignadoTarea';
    Lv_EstadoAsignada               VARCHAR2(8) := 'Asignada';
    Lv_EstadoPendienteExtender      VARCHAR2(17) := 'PendienteExtender';
    Lv_EstadoEliminada              VARCHAR2(9) := 'Eliminada';
    Lv_EstadoIniSolCaract           VARCHAR2(30) := 'PrePlanificada';
    Ln_IdDetSolCaractWdbValida      NUMBER;
    Ln_IdDetSolSolCaractElClValida  NUMBER;
    Ln_IdDetSolSolCaractEdbValida   NUMBER;
    Lv_AgregaDetCaractSolValida     VARCHAR2(2) := 'NO';
    Lr_InfoDetalleSolHistorial      DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Ln_IdElementoSiguiente          DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdInterfaceEleSiguiente      DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
    CURSOR Lc_GetIdTipoSolicitud(Cv_DescripcionSolicitud DB_COMERCIAL.ADMI_TIPO_SOLICITUD.DESCRIPCION_SOLICITUD%TYPE)
    IS
      SELECT TIPO_SOLICITUD.ID_TIPO_SOLICITUD
      FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      WHERE TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Cv_DescripcionSolicitud
      AND TIPO_SOLICITUD.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;
    CURSOR Lc_GetIdCaracteristica(Cv_DescripcionCaracteristica DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT CARACTERISTICA.ID_CARACTERISTICA
      FROM DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA
      WHERE CARACTERISTICA.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaracteristica
      AND CARACTERISTICA.ESTADO = Lv_EstadoActivo
      AND CARACTERISTICA.TIPO = Lv_TipoCaract
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetIdDetSolCaractTecnica(Cv_IdSolicitud               DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
                                       Cv_DescripcionCaractTecnica  DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE,
                                       Cv_ValorSolCaract            DB_COMERCIAL.INFO_DETALLE_SOL_CARACT.VALOR%TYPE)
    IS
      SELECT ID_SOLICITUD_CARACTERISTICA
      FROM
      (
        SELECT SOL_CARACT.ID_SOLICITUD_CARACTERISTICA
        FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOL_CARACT
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
        ON CARACT.ID_CARACTERISTICA = SOL_CARACT.CARACTERISTICA_ID
        WHERE SOL_CARACT.DETALLE_SOLICITUD_ID = Cv_IdSolicitud
        AND SOL_CARACT.VALOR = Cv_ValorSolCaract
        AND CARACT.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaractTecnica
        AND CARACT.TIPO = Lv_TipoCaract
        AND CARACT.ESTADO = Lv_EstadoActivo
        AND SOL_CARACT.ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                                  Lv_EstadoAsignadoTarea, Lv_EstadoAsignada)
        ORDER BY SOL_CARACT.ID_SOLICITUD_CARACTERISTICA DESC
      )
      WHERE ROWNUM = 1;

    CURSOR Lc_GetProdsServicio( Cv_IdPunto DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE,
                                Cv_NombreTecnicoProd DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE,
                                Cv_EstadoServicio DB_COMERCIAL.INFO_SERVICIO.ESTADO%TYPE)
    IS
      SELECT COUNT(SERVICIO.ID_SERVICIO) AS NUM_SERVICIOS_PRODS
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
      ON PRODUCTO.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
      WHERE SERVICIO.PUNTO_ID = Cv_IdPunto
      AND PRODUCTO.NOMBRE_TECNICO = Cv_NombreTecnicoProd
      AND SERVICIO.ESTADO = Cv_EstadoServicio;

    LclInicioDetalleSolsEliminadas  CLOB := '<b>Detalle de solicitudes eliminadas por regularizaci¿n de equipos Dual Band</b><br />' ||
                                            '<table cellpadding="5">' ||
                                              '<tr>' ||
                                                '<td valign="center">' ||
                                                  '<div>' ||
                                                    '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                      '<thead>' ||
                                                        '<tr>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Detalle Wifi Dual Band</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Detalle Extender Dual Band</b></th>' ||
                                                        '</tr>' ||
                                                      '</thead>' ||
                                                      '<tbody>';
    LclFinDetalleSolsEliminadas     CLOB :=           '</tbody>' ||
                                                    '</table>' ||
                                                  '</div>' ||
                                                '</td>' ||
                                              '</tr>' ||
                                            '</table>';
  BEGIN
    DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_DET_PLAN_W_Y_EXTENDER( Pr_RegClienteAVerificar.ID_PLAN,
                                                                Lv_Status,
                                                                Lv_MsjError,
                                                                Lv_PlanConDetalleWdb,
                                                                Lv_PlanConDetalleEdb);
    IF Lv_Status = 'OK' THEN
      --Se verifica si el plan tiene el detalle del producto Wifi Dual Band y Extender Dual Band
      IF Lv_PlanConDetalleWdb = 'SI' OR Lv_PlanConDetalleEdb = 'SI' THEN
        --Se verifica si el servicio necesita un cambio a Wifi Dual Band y/o necesite agregar Extender Dual Band
        DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_EQUIPOS_W_Y_EXTENDER(  Lv_PlanConDetalleWdb,
                                                                    Lv_PlanConDetalleEdb,
                                                                    Pr_RegClienteAVerificar.NOMBRE_MARCA_OLT,
                                                                    Pr_RegClienteAVerificar.NOMBRE_MODELO_OLT,
                                                                    Pr_RegClienteAVerificar.NOMBRE_MODELO_ONT,
                                                                    Pr_RegClienteAVerificar.ID_INTERFACE_ONT,
                                                                    Lv_Status,
                                                                    Lv_MsjError,
                                                                    Lv_NecesitaCambiarWdb,
                                                                    Lv_NecesitaAgregarEdb,
                                                                    Ln_IdElementoSiguiente,
                                                                    Ln_IdInterfaceEleSiguiente);
        IF Lv_Status = 'OK' THEN
          --Inicio de revisi¿n de proceso nuevo
          IF Lv_NecesitaCambiarWdb = 'SI' OR Lv_NecesitaAgregarEdb = 'SI' THEN
            Lr_SolValidaEquiposDualBand :=  NULL;
            Lrf_SolValidaGestionEquipos :=  DB_COMERCIAL.TECNK_SERVICIOS.F_GET_SOL_VALIDA_DUAL_BAND(Pr_RegClienteAVerificar.ID_SERVICIO);

            FETCH Lrf_SolValidaGestionEquipos INTO Lr_SolValidaEquiposDualBand;
            CLOSE Lrf_SolValidaGestionEquipos;

            --Servicios de clientes que tienen una solicitud v¿lida y necesitan cambiar el Wifi Dual Band 
            --y/o necesitan agregar el extender Dual Band
            IF Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD IS NOT NULL THEN
              Lr_InfoDetalleSolHistorial                        := NULL;
              Lr_InfoDetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
              Lr_InfoDetalleSolHistorial.DETALLE_SOLICITUD_ID   := Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD;
              Lr_InfoDetalleSolHistorial.ESTADO                 := Lr_SolValidaEquiposDualBand.ESTADO_SOLICITUD;
              Lr_InfoDetalleSolHistorial.OBSERVACION            := 'Solicitud verificada y v¿lida por proceso de regularizaci¿n de equipos Dual Band';
              Lr_InfoDetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
              Lr_InfoDetalleSolHistorial.FE_CREACION            := SYSDATE;
              Lr_InfoDetalleSolHistorial.IP_CREACION            := Lv_IpCreacion;
              DB_COMERCIAL.COMEK_MODELO.P_INSERT_INFO_DETALLE_SOL_HIST(Lr_InfoDetalleSolHistorial, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;

              IF Lr_SolValidaEquiposDualBand.ESTADO_SOLICITUD = Lv_EstadoAsignada THEN
                Lv_EstadoIniSolCaract := Lr_SolValidaEquiposDualBand.ESTADO_SOLICITUD;
              END IF;

              --Se obtienen los ids de las caracter¿sticas de WIFI DUAL BAND, ELEMENTO CLIENTE y EXTENDER DUAL BAND
              OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaWdb);
              FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractWifiDualBand;
              CLOSE Lc_GetIdCaracteristica;

              OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaElementCliente);
              FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractElementoCliente;
              CLOSE Lc_GetIdCaracteristica;

              OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaEdb);
              FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractExtenderDualBand;
              CLOSE Lc_GetIdCaracteristica;

              --Se eval¿a la solicitud de agregar equipo o agregar equipo masivo v¿lida
              IF Lv_NecesitaCambiarWdb = 'SI' THEN
                OPEN Lc_GetIdDetSolCaractTecnica( Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD,
                                                  Lv_CaractTecnicaWdb,
                                                  'SI');
                FETCH Lc_GetIdDetSolCaractTecnica INTO Ln_IdDetSolCaractWdbValida;
                CLOSE Lc_GetIdDetSolCaractTecnica;
                IF Ln_IdDetSolCaractWdbValida IS NULL THEN
                  -----------CASO 1-----------
                  --Servicios con solicitud v¿lida para gestionar equipos dual band que necesitan cambiar al
                  --Wifi Dual Band pero que no tienen asociada la caracter¿stica WIFI DUAL BAND = 'SI' con la solicitud*/
                  Lv_AgregaDetCaractSolValida                 := 'SI';
                  Lcl_ObservacionAgregar                      := Lcl_ObservacionAgregar || '<br />' 
                                                                 || 'Se crea detalle para cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
                  --Se inserta la caracter¿stica WIFI DUAL BAND a la solicitud
                  Lr_DetalleSolCaract                         := NULL;
                  Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractWifiDualBand;
                  Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD;
                  Lr_DetalleSolCaract.VALOR                   := Lv_NecesitaCambiarWdb;
                  Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                  Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                  DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                  IF Lv_MsjError IS NOT NULL THEN
                    RAISE Le_Exception;
                  END IF;
                  Ln_IdDetSolCaractWdbValida := DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.CURRVAL;
                  -----------FIN CASO 1-----------
                ELSE
                  Lcl_ObservacionServicio := Lcl_ObservacionAgregar || '<br />Incluye cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
                END IF;
                --Se eliminan todas los detalles WIFI DUAL BAND asociados a la solicitud v¿lida del servicio excepto el detalle v¿lido
                UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                SET ESTADO = Lv_EstadoEliminada,
                USR_ULT_MOD = Lv_UsrCreacion,
                FE_ULT_MOD = SYSDATE
                WHERE ID_SOLICITUD_CARACTERISTICA <> Ln_IdDetSolCaractWdbValida
                AND DETALLE_SOLICITUD_ID = Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD
                AND CARACTERISTICA_ID = Ln_IdCaractWifiDualBand
                AND ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                               Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);

                OPEN Lc_GetIdDetSolCaractTecnica( Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD,
                                                  Lv_CaractTecnicaElementCliente,
                                                  TO_CHAR(Pr_RegClienteAVerificar.ID_ONT));
                FETCH Lc_GetIdDetSolCaractTecnica INTO Ln_IdDetSolSolCaractElClValida;
                CLOSE Lc_GetIdDetSolCaractTecnica;
                IF Ln_IdDetSolSolCaractElClValida IS NULL THEN
                  -----------CASO 2-----------
                  --Servicios con solicitud v¿lida para gestionar equipos dual band que necesitan cambiar al Wifi Dual Band
                  --pero que no tienen asociada la caracter¿stica ELEMENTO CLIENTE con el ont correspondiente con la solicitud
                  Lv_AgregaDetCaractSolValida                 := 'SI';
                  Lcl_ObservacionAgregar                      := Lcl_ObservacionAgregar || '<br />' 
                                                                 || 'Se crea detalle con el CPE ONT del servicio.';
                  --Se inserta la caracter¿stica ELEMENTO CLIENTE a la solicitud
                  Lr_DetalleSolCaract                         := NULL;
                  Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractElementoCliente;
                  Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD;
                  Lr_DetalleSolCaract.VALOR                   := TO_CHAR(Pr_RegClienteAVerificar.ID_ONT);
                  Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                  Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                  DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                  IF Lv_MsjError IS NOT NULL THEN
                    RAISE Le_Exception;
                  END IF;
                  Ln_IdDetSolSolCaractElClValida := DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.CURRVAL;
                  -----------FIN CASO 2-----------
                ELSE
                  Lcl_ObservacionServicio := Lcl_ObservacionServicio || '<br />Incluye detalle con el CPE ONT del servicio.';
                END IF;
                --Se eliminan todas los detalles ELEMENTO CLIENTE asociados a la solicitud v¿lida del servicio excepto el detalle v¿lido
                UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                SET ESTADO = Lv_EstadoEliminada,
                USR_ULT_MOD = Lv_UsrCreacion,
                FE_ULT_MOD = SYSDATE
                WHERE ID_SOLICITUD_CARACTERISTICA <> Ln_IdDetSolSolCaractElClValida
                AND DETALLE_SOLICITUD_ID = Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD
                AND CARACTERISTICA_ID = Ln_IdCaractElementoCliente
                AND ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                               Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);
              ELSE
                -----------CASO 3-----------
                --Servicios con solicitud v¿lida para gestionar equipos dual band que ya tienen el equipo Wifi Dual Band y tienen 
                --asociada las caracter¿sticas WIFI DUAL BAND = 'SI' y/o ELEMENTO CLIENTE con el ont correspondiente con la solicitud
                UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                SET ESTADO = Lv_EstadoEliminada,
                USR_ULT_MOD = Lv_UsrCreacion,
                FE_ULT_MOD = SYSDATE
                WHERE DETALLE_SOLICITUD_ID = Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD
                AND CARACTERISTICA_ID IN (Ln_IdCaractWifiDualBand, Ln_IdCaractElementoCliente)
                AND ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                               Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);
                -----------FIN CASO 3-----------
              END IF;


              IF Lv_NecesitaAgregarEdb = 'SI' THEN
                OPEN Lc_GetIdDetSolCaractTecnica( Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD,
                                                  Lv_CaractTecnicaEdb,
                                                  'SI');
                FETCH Lc_GetIdDetSolCaractTecnica INTO Ln_IdDetSolSolCaractEdbValida;
                CLOSE Lc_GetIdDetSolCaractTecnica;
                IF Ln_IdDetSolSolCaractEdbValida IS NULL THEN
                  -----------CASO 4-----------
                  --Servicios con solicitud v¿lida para gestionar equipos dual band que necesitan agregar el
                  --Extender Dual Band pero que no tienen asociada la caracter¿stica EXTENDER DUAL BAND = 'SI' con la solicitud
                  Lv_AgregaDetCaractSolValida                 := 'SI';
                  --Se inserta la caracter¿stica EXTENDER DUAL BAND a la solicitud
                  Lcl_ObservacionAgregar                      := Lcl_ObservacionAgregar || '<br />' 
                                                                 || 'Se crea detalle para agregar Extender Dual Band.';
                  Lr_DetalleSolCaract                         := NULL;
                  Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractExtenderDualBand;
                  Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD;
                  Lr_DetalleSolCaract.VALOR                   := Lv_NecesitaAgregarEdb;
                  Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                  Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                  DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                  IF Lv_MsjError IS NOT NULL THEN
                    RAISE Le_Exception;
                  END IF;
                  Ln_IdDetSolSolCaractEdbValida := DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.CURRVAL;
                  -----------FIN CASO 4-----------
                ELSE
                  Lcl_ObservacionServicio := Lcl_ObservacionServicio || '<br />Incluye agregar equipo Extender Dual Band.';
                END IF;
                --Se eliminan todas los detalles EXTENDER DUAL BAND asociados a la solicitud v¿lida del servicio excepto el detalle v¿lido
                UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                SET ESTADO = Lv_EstadoEliminada,
                USR_ULT_MOD = Lv_UsrCreacion,
                FE_ULT_MOD = SYSDATE
                WHERE ID_SOLICITUD_CARACTERISTICA <> Ln_IdDetSolSolCaractEdbValida
                AND DETALLE_SOLICITUD_ID = Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD
                AND CARACTERISTICA_ID = Ln_IdCaractExtenderDualBand
                AND ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                               Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);
              ELSE
                -----------CASO 5-----------
                --Servicios con solicitud v¿lida para gestionar equipos dual band que ya tienen el equipo Extender Dual Band y tienen 
                --asociada las caracter¿sticas EXTENDER DUAL BAND = 'SI' con la solicitud
                OPEN Lc_GetProdsServicio(Pr_RegClienteAVerificar.ID_PUNTO, Lv_NombreTecnicoExtender, Lv_EstadoActivo);
                FETCH Lc_GetProdsServicio INTO Ln_NumProdsServicio;
                CLOSE Lc_GetProdsServicio;
                IF Ln_NumProdsServicio = 0 THEN
                  UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                  SET ESTADO = Lv_EstadoEliminada,
                  USR_ULT_MOD = Lv_UsrCreacion,
                  FE_ULT_MOD = SYSDATE
                  WHERE DETALLE_SOLICITUD_ID = Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD
                  AND CARACTERISTICA_ID = Ln_IdCaractExtenderDualBand
                  AND ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                                 Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendienteExtender);
                END IF;
                -----------FIN CASO 5-----------
              END IF;

              IF Lv_AgregaDetCaractSolValida = 'SI' THEN
                Lcl_ObservacionServicio := 'Se regulariza la ' || Lr_SolValidaEquiposDualBand.DESCRIPCION_SOLICITUD 
                                            || ' #' || Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD 
                                            || ' en estado ' || Lr_SolValidaEquiposDualBand.ESTADO_SOLICITUD
                                            || ' para gestionar los equipos Dual Band del servicio.'
                                            || Lcl_ObservacionAgregar;
              ELSE
                -----------CASO 6-----------
                --Servicios con solicitud v¿lida para gestionar equipos dual band y que tienen los detalles correctamente
                Lcl_ObservacionServicio := 'El servicio tiene actualmente una ' || Lr_SolValidaEquiposDualBand.DESCRIPCION_SOLICITUD
                                            || ' #' || Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD 
                                            || ' en estado ' || Lr_SolValidaEquiposDualBand.ESTADO_SOLICITUD
                                            || ' para gestionar los equipos Dual Band.'
                                            || Lcl_ObservacionAgregar;
                -----------FIN CASO 6-----------
              END IF;

              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(
                                                                                    Pr_RegClienteAVerificar.ID_SERVICIO,
                                                                                    Lr_SolValidaEquiposDualBand.ID_DETALLE_SOLICITUD,
                                                                                    Lv_Status,
                                                                                    Lv_MsjError,
                                                                                    Lcl_DetalleSolsEliminadas
                                                                                  );
              IF Lv_Status = 'OK' THEN 
                IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
                  Lcl_ObservacionServicio :=  Lcl_ObservacionServicio || '<br />' 
                                                || LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                END IF;
              ELSE
                RAISE Le_Exception;
              END IF;
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
              Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
              Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            ELSE
              --Servicios de clientes que no tienen una solicitud v¿lida y necesitan cambiar al Wifi Dual Band 
              --y/o necesitan agregar el extender Dual Band
              OPEN Lc_GetIdTipoSolicitud(Lv_DescripcionSolAgregarEquipo);
              FETCH Lc_GetIdTipoSolicitud INTO Ln_IdTipoSolAgregarEquipo;
              CLOSE Lc_GetIdTipoSolicitud;
              --Se crea una SOLICITUD AGREGAR EQUIPO con los respectivos detalles que necesite el servicio
              Lr_DetalleSolicitud                       := NULL;
              Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD  := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
              Lr_DetalleSolicitud.SERVICIO_ID           := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_DetalleSolicitud.TIPO_SOLICITUD_ID     := Ln_IdTipoSolAgregarEquipo;
              Lr_DetalleSolicitud.OBSERVACION           := 'Solicitud creada autom¿ticamente por regularizaci¿n de equipos Dual Band';
              Lr_DetalleSolicitud.USR_CREACION          := Lv_UsrCreacion;
              Lr_DetalleSolicitud.ESTADO                := Lv_EstadoIniSolEquiposDualBand;
              DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_DetalleSolicitud, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
              Lcl_ObservacionServicio   := 'Se crea la ' || Lv_DescripcionSolAgregarEquipo || ' #' || Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD ||
                                           ' en estado ' || Lv_EstadoIniSolEquiposDualBand || ' para gestionar equipos Dual Band.'; 

              IF Lv_NecesitaCambiarWdb = 'SI' THEN
                -----------CASO 7-----------
                --Servicios de clientes que no tienen una solicitud v¿lida y necesitan cambiar al Wifi Dual Band
                OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaWdb);
                FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractWifiDualBand;
                CLOSE Lc_GetIdCaracteristica;
                --Se inserta la caracter¿stica WIFI DUAL BAND a la SOLICITUD AGREGAR EQUIPO
                Lr_DetalleSolCaract                         := NULL;
                Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractWifiDualBand;
                Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
                Lr_DetalleSolCaract.VALOR                   := Lv_NecesitaCambiarWdb;
                Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                IF Lv_MsjError IS NOT NULL THEN
                  RAISE Le_Exception;
                END IF;

                OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaElementCliente);
                FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractElementoCliente;
                CLOSE Lc_GetIdCaracteristica;
                --Se inserta la caracter¿stica ELEMENTO CLIENTE a la SOLICITUD AGREGAR EQUIPO
                Lr_DetalleSolCaract                         := NULL;
                Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractElementoCliente;
                Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
                Lr_DetalleSolCaract.VALOR                   := Pr_RegClienteAVerificar.ID_ONT;
                Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                IF Lv_MsjError IS NOT NULL THEN
                  RAISE Le_Exception;
                END IF;
                Lcl_ObservacionServicio := Lcl_ObservacionServicio || '<br />Incluye cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
                -----------FIN CASO 7-----------
              END IF;

              IF Lv_NecesitaAgregarEdb = 'SI' THEN
                -----------CASO 8-----------
                --Servicios de clientes que no tienen una solicitud v¿lida y necesitan agregar el Extender Dual Band
                --Se inserta la caracter¿stica EXTENDER DUAL BAND a la SOLICITUD AGREGAR EQUIPO
                OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaEdb);
                FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractExtenderDualBand;
                CLOSE Lc_GetIdCaracteristica;
                Lr_DetalleSolCaract                         := NULL;
                Lr_DetalleSolCaract.CARACTERISTICA_ID       := Ln_IdCaractExtenderDualBand;
                Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID    := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
                Lr_DetalleSolCaract.VALOR                   := Lv_NecesitaAgregarEdb;
                Lr_DetalleSolCaract.ESTADO                  := Lv_EstadoIniSolCaract;
                Lr_DetalleSolCaract.USR_CREACION            := Lv_UsrCreacion;
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
                IF Lv_MsjError IS NOT NULL THEN
                  RAISE Le_Exception;
                END IF;
                Lcl_ObservacionServicio := Lcl_ObservacionServicio || '<br />Incluye agregar equipo Extender Dual Band.';
                -----------FIN CASO 8-----------
              END IF;

              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(
                                                                                    Pr_RegClienteAVerificar.ID_SERVICIO,
                                                                                    Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD,
                                                                                    Lv_Status,
                                                                                    Lv_MsjError,
                                                                                    Lcl_DetalleSolsEliminadas
                                                                                  );
              IF Lv_Status = 'OK' THEN 
                IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
                  Lcl_ObservacionServicio   := Lcl_ObservacionServicio || '<br />' 
                                                || LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                END IF;
              ELSE
                RAISE Le_Exception;
              END IF;
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
              Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
              Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            END IF;
          ELSE
            -----------CASO 9-----------
            --Servicios que no requieren gestionar equipos Dual Band porque ya los tienen,
            --por lo tanto se eliminan todas las solicitudes para gestionar equipos Dual Band
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(
                                                                                  Pr_RegClienteAVerificar.ID_SERVICIO,
                                                                                  NULL,
                                                                                  Lv_Status,
                                                                                  Lv_MsjError,
                                                                                  Lcl_DetalleSolsEliminadas
                                                                                );
            IF Lv_Status = 'OK' THEN
              Lcl_ObservacionServicio := 'El servicio fue verificado, pero no requiere regularizaci¿n porque ya cuenta con los equipos Dual Band.';
              IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
                Lcl_ObservacionServicio := Lcl_ObservacionServicio
                                            || '<br />' || LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
              END IF;
            ELSE
              RAISE Le_Exception;
            END IF;
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
            Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
            Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
            IF Lv_MsjError IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
            -----------FIN CASO 9-----------
          END IF;
        ELSE
          -----------CASO ERROR 1-----------
          --Servicios a los que no se les puede verificar los equipos
          Lcl_ObservacionServicio           := 'No se ha podido verificar los equipos del servicio';
          Lr_ServicioHistorial              := NULL;
          Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
          Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
          Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
          Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
          Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
          DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
          IF Lv_MsjError IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;
          -----------FIN CASO ERROR 1-----------
        END IF;
      ELSE
        -----------CASO 10-----------
        --Servicios cuyos planes no incluyen productos Dual Band, por lo que se procede a eliminar las solicitudes abiertas
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(
                                                                              Pr_RegClienteAVerificar.ID_SERVICIO,
                                                                              NULL,
                                                                              Lv_Status,
                                                                              Lv_MsjError,
                                                                              Lcl_DetalleSolsEliminadas
                                                                            );
        IF Lv_Status = 'OK' THEN
          Lcl_ObservacionServicio   := 'El servicio fue verificado pero no requiere regularizaci¿n asociado a equipos Dual Band.';
          IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
            Lcl_ObservacionServicio := Lcl_ObservacionServicio
                                        || '<br />' || LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
          END IF;
        ELSE
          RAISE Le_Exception;
        END IF;
        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
        Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
        Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
        Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
        -----------FIN CASO 10-----------
      END IF;
    ELSE
      -----------CASO ERROR 2-----------
      --Servicios a los que no se les pudo verificar los detalles del plan
      Lcl_ObservacionServicio           := 'No se ha podido verificar los detalles del plan asociado al servicio para la ejecuci¿n del proceso '
                                           || 'de regularizaci¿n de detalles de equipos Dual Band';
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      -----------FIN CASO ERROR 2-----------
    END IF;
    Pv_Status   := 'OK';
    COMMIT;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := Lv_MsjError;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_REGU_SOL_EQUIPOS_X_SERVICIO', 
                                            Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Ha ocurrido un error inesperado al verificar el intentar ejecutar el proceso de regularizaci¿n ' || SQLCODE 
                    || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error inesperado al intentar ejecutar el proceso de regularizaci¿n';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_REGU_SOL_EQUIPOS_X_SERVICIO', 
                                            Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_REGU_SOL_EQUIPOS_X_SERVICIO;

  PROCEDURE P_REGULA_EQUIPOS_W_Y_EXTENDER
  AS
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_UsrCreacionCpm           VARCHAR2(11) := 'cambioplanm';
    Lv_UsrCreacionCpMasivo      VARCHAR2(8) := 'CPMASIVO';
    Lv_ObservacionCpIndividual  VARCHAR2(34) := 'Se cambio de plan, plan anterior:%';
    Lv_FechaInicioCpm           VARCHAR2(10) := '01-12-2019';
    Lv_FechaInicioCpIndividual  VARCHAR2(10) := '01-12-2019';
    Lv_FormatoFecha             VARCHAR2(10) := 'DD-MM-YYYY';
    Lv_NombreTecnicoInternet    VARCHAR2(8) := 'INTERNET';
    Lv_MarcaHuawei              VARCHAR2(6) := 'HUAWEI';
    Lv_TipoOlt                  VARCHAR2(3) := 'OLT';
    Lv_CodEmpresa               VARCHAR2(2) := '18';
    CURSOR Lc_GetBaseClientesAVerificar
    IS
    SELECT DISTINCT SERVICIO_INTERNET.ID_SERVICIO,
      SERVICIO_INTERNET.TIPO_ORDEN,
      SERVICIO_INTERNET.ESTADO                                AS ESTADO_SERVICIO,
      PUNTO.ID_PUNTO,
      PUNTO.LOGIN,
      NVL(PERSONA.NOMBRES || ' ' || PERSONA.APELLIDOS, PERSONA.RAZON_SOCIAL) AS CLIENTE,
      NVL(JURISDICCION.NOMBRE_JURISDICCION, '') AS NOMBRE_JURISDICCION,
      PLAN.ID_PLAN,
      PLAN.NOMBRE_PLAN,
      OLT.ID_ELEMENTO                                         AS ID_OLT,
      OLT.NOMBRE_ELEMENTO                                     AS NOMBRE_OLT,
      MARCA_OLT.NOMBRE_MARCA_ELEMENTO                         AS NOMBRE_MARCA_OLT,
      MODELO_OLT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_OLT,
      ONT.ID_ELEMENTO                                         AS ID_ONT,
      ONT.NOMBRE_ELEMENTO                                     AS NOMBRE_ONT,
      MODELO_ONT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_ONT,
      SERVICIO_TECNICO_INTERNET.INTERFACE_ELEMENTO_CLIENTE_ID AS ID_INTERFACE_ONT
    FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO_INTERNET
    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_HISTORIAL SERVICIO_HISTO_CPM
    ON SERVICIO_HISTO_CPM.SERVICIO_ID = SERVICIO_INTERNET.ID_SERVICIO
    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_HISTORIAL SERVICIO_HISTO_CPI
    ON SERVICIO_HISTO_CPI.SERVICIO_ID = SERVICIO_INTERNET.ID_SERVICIO
    INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
    ON PUNTO.ID_PUNTO = SERVICIO_INTERNET.PUNTO_ID
    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
    ON PER.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
    INNER JOIN DB_COMERCIAL.INFO_PERSONA PERSONA
    ON PERSONA.ID_PERSONA = PER.PERSONA_ID
    LEFT JOIN DB_INFRAESTRUCTURA.ADMI_JURISDICCION JURISDICCION
    ON JURISDICCION.ID_JURISDICCION = PUNTO.PUNTO_COBERTURA_ID
    INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN
    ON PLAN.ID_PLAN = SERVICIO_INTERNET.PLAN_ID
    INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
    ON PLAN_DET.PLAN_ID = PLAN.ID_PLAN
    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_INTERNET_EN_PLAN
    ON PROD_INTERNET_EN_PLAN.ID_PRODUCTO = PLAN_DET.PRODUCTO_ID
    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO_INTERNET
    ON SERVICIO_TECNICO_INTERNET.SERVICIO_ID = SERVICIO_INTERNET.ID_SERVICIO
    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO OLT
    ON OLT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_OLT
    ON MODELO_OLT.ID_MODELO_ELEMENTO = OLT.MODELO_ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_OLT
    ON TIPO_OLT.ID_TIPO_ELEMENTO = MODELO_OLT.TIPO_ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_OLT
    ON MARCA_OLT.ID_MARCA_ELEMENTO = MODELO_OLT.MARCA_ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ONT
    ON ONT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_CLIENTE_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ONT
    ON MODELO_ONT.ID_MODELO_ELEMENTO = ONT.MODELO_ELEMENTO_ID
    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_ONT
    ON MARCA_ONT.ID_MARCA_ELEMENTO             = MODELO_ONT.MARCA_ELEMENTO_ID
    WHERE SERVICIO_INTERNET.ESTADO             = Lv_EstadoActivo
    AND PLAN_DET.ESTADO                        = PLAN.ESTADO
    AND PROD_INTERNET_EN_PLAN.NOMBRE_TECNICO   = Lv_NombreTecnicoInternet
    AND PROD_INTERNET_EN_PLAN.ESTADO           = Lv_EstadoActivo
    AND PROD_INTERNET_EN_PLAN.EMPRESA_COD      = Lv_CodEmpresa
    AND TIPO_OLT.NOMBRE_TIPO_ELEMENTO          = Lv_TipoOlt 
    AND MARCA_OLT.NOMBRE_MARCA_ELEMENTO        = Lv_MarcaHuawei
    AND MARCA_ONT.NOMBRE_MARCA_ELEMENTO        = Lv_MarcaHuawei
    AND SERVICIO_HISTO_CPM.FE_CREACION   >= TO_DATE(Lv_FechaInicioCpm, Lv_FormatoFecha)
    AND (SERVICIO_HISTO_CPM.USR_CREACION = Lv_UsrCreacionCpm OR SERVICIO_HISTO_CPM.USR_CREACION = Lv_UsrCreacionCpMasivo)
    AND SERVICIO_HISTO_CPI.FE_CREACION   >= TO_DATE(Lv_FechaInicioCpIndividual, Lv_FormatoFecha)
    AND SERVICIO_HISTO_CPI.OBSERVACION LIKE Lv_ObservacionCpIndividual
    AND (SERVICIO_HISTO_CPI.USR_CREACION <> Lv_UsrCreacionCpm AND SERVICIO_HISTO_CPI.USR_CREACION <> Lv_UsrCreacionCpMasivo)
    AND SERVICIO_HISTO_CPI.FE_CREACION >= SERVICIO_HISTO_CPM.FE_CREACION;
    Lr_RegClienteAVerificar     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos;
    Lt_TClientesAVerificar      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_DataClientesVerificaEquipos;
    Ln_IndxClientesAVerificar   NUMBER;
    Lv_StatusRegulaServicio     VARCHAR2(5);
    Lv_MensajeRegulaServicio    VARCHAR2(4000);
  BEGIN
    OPEN Lc_GetBaseClientesAVerificar;
    LOOP
      FETCH Lc_GetBaseClientesAVerificar BULK COLLECT INTO Lt_TClientesAVerificar LIMIT 1000;
      Ln_IndxClientesAVerificar := Lt_TClientesAVerificar.FIRST;
      WHILE (Ln_IndxClientesAVerificar IS NOT NULL)
      LOOP
        Lv_StatusRegulaServicio     := '';
        Lv_MensajeRegulaServicio    := '';
        Lr_RegClienteAVerificar     := Lt_TClientesAVerificar(Ln_IndxClientesAVerificar);
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_REGU_SOL_EQUIPOS_X_SERVICIO( Lr_RegClienteAVerificar,
                                                                              Lv_StatusRegulaServicio,
                                                                              Lv_MensajeRegulaServicio);

        Ln_IndxClientesAVerificar := Lt_TClientesAVerificar.NEXT(Ln_IndxClientesAVerificar);
      END LOOP;
      EXIT WHEN (Lc_GetBaseClientesAVerificar%NOTFOUND);
    END LOOP;
    CLOSE Lc_GetBaseClientesAVerificar;
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_REGULA_EQUIPOS_W_Y_EXTENDER', 
                                            'Ha ocurrido un problema al ejecutar el proceso de regularizaci¿n de equipos ' || SQLCODE 
                                            || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_REGULA_EQUIPOS_W_Y_EXTENDER;

PROCEDURE P_CONTROL_BW_INTERFACE
AS
    --
    TYPE C_ObjectoRegistros IS REF CURSOR;
    C_GetRegistros               C_ObjectoRegistros;
    TYPE R_Registros IS RECORD (
        Ln_IdElemento         NUMBER,
        Ln_IdInterface        NUMBER,
        Lv_NombreElemento     VARCHAR2(500),
        Lv_NombreInterface    VARCHAR2(20),
        Lv_EstadoElemento     VARCHAR2(20),
        Lv_EstadoInterface    VARCHAR2(20),
        Ln_TotalCapacidadUno  NUMBER,
        Ln_TotalCapacidadDos  NUMBER,
        Lv_Ciudad             VARCHAR2(50)
    );
    TYPE R_Elementos IS RECORD (
        Ln_IdElemento         NUMBER,
        Lv_NombreElemento     VARCHAR2(500),
        Lv_EstadoElemento     VARCHAR2(20),
        Lv_Ciudad             VARCHAR2(50)
    );
    TYPE R_Interfaces IS RECORD (
        Ln_IdInterface        NUMBER,
        Lv_NombreInterface    VARCHAR2(20),
        Lv_EstadoInterface    VARCHAR2(20),
        Ln_TotalCapacidadUno  NUMBER,
        Ln_TotalCapacidadDos  NUMBER,
        Lv_Ciudad             VARCHAR2(50)
    );
    Lr_Registros                 R_Registros;
    TYPE T_Registros IS TABLE OF R_Registros;
    Lt_Registros                 T_Registros;
    Lr_R_Elemento                R_Elementos;
    Lr_R_Interface               R_Interfaces;
    Ln_IdServicio                NUMBER;
    Ln_IdPunto                   NUMBER;
    Ln_IdHistorial               NUMBER;
    Ln_IdSolicitud               NUMBER;
    Ln_IdMasivoCab               NUMBER;
    Ln_IdElemento                NUMBER;
    Ln_IdInterface               NUMBER;
    Lv_NombreElemento            VARCHAR2(500);
    Lv_NombreInterface           VARCHAR2(500);
    Lv_EstadoElemento            VARCHAR2(20);
    Lv_EstadoInterface           VARCHAR2(20);
    Ln_TotalCapacidadUno         NUMBER;
    Ln_TotalCapacidadDos         NUMBER;
    Ln_MinimoBwInterface         NUMBER;
    Ln_MaximoBwInterface         NUMBER;
    Ln_RatioBwInterfaceUno       NUMBER;
    Ln_RatioBwInterfaceDos       NUMBER;
    Lv_TipoTarea                 VARCHAR2(45);
    TYPE T_Elementos IS TABLE OF R_Elementos INDEX BY VARCHAR2(500);
    Lr_Elementos                 T_Elementos;
    TYPE T_Interfaces IS TABLE OF R_Interfaces INDEX BY VARCHAR2(500);
    Lr_Interfaces                T_Interfaces;
    TYPE T_DataElementos IS TABLE OF CLOB INDEX BY VARCHAR2(500);
    Lr_DataElementos             T_DataElementos;
    Ln_IdParametroEjecucion      NUMBER;
    Ln_IdParametroErrores        NUMBER;
    Ln_IdParametroProgreso       NUMBER;
    Ln_IdDetallesProgreso        NUMBER;
    Ln_TotalSwEjecutados         NUMBER         := 0;
    Ln_TotalSwProcesados         NUMBER         := 0;
    Ln_TotalSwProcesar           NUMBER         := 0;
    Lv_EjecutarControlBwMasivo   VARCHAR2(5)    := '';
    Lv_DiaNoEjeControlBwMasivo   VARCHAR2(5)    := '';
    Ln_MaxLengthErrores          NUMBER         := 3999;

    Lv_EstadoActivo              VARCHAR2(7)    := 'Activo';
    Lv_TipoProceso               VARCHAR2(20)   := 'ControlBwMasivo';
    Lv_TipoSolicitud             VARCHAR2(45)   := 'SOLICITUD CONTROL BW MASIVO';
    Lv_TipoSolicitudEjecucion    VARCHAR2(45)   := 'SOLICITUD CONTROL BW AUTOMATICO';
    Lv_TipoUpdateBw              VARCHAR2(45)   := 'UPGRADE_DOWNGRADE_BW_MASIVO';
    Lv_TipoTareaElemento         VARCHAR2(45)   := 'GENERAR_TAREA_ELEMENTO';
    Lv_TipoTareaInterface        VARCHAR2(45)   := 'GENERAR_TAREA_INTERFACE';
    Lv_TipoEnviarCorreo          VARCHAR2(45)   := 'REPORTE_CORREO_BW_MASIVO';

    Lv_ParametroTiposElementos   VARCHAR2(45)   := 'TIPOS_ELEMENTOS_BW_INTERFACE';
    Lv_ParametroEstadosServicios VARCHAR2(45)   := 'ESTADOS_SERVICIOS_BW_INTERFACE';
    Lv_ParametroRangoInterface   VARCHAR2(45)   := 'RANGO_CONTROL_BW_INTERFACE';
    Lv_ParametroServiciosNot     VARCHAR2(45)   := 'SERVICIOS_NO_PERMITIDOS_CONTROL_BW_INTERFACE';
    Lv_ParametroClientes         VARCHAR2(45)   := 'CLIENTES_CONTROL_BW_INTERFACE';
    Lv_ParametroIdRegiones       VARCHAR2(45)   := 'REGIONES_CONTROL_BW_INTERFACE';
    Lv_ParametroIdProvincias     VARCHAR2(45)   := 'PROVINCIAS_CONTROL_BW_INTERFACE';
    Lv_ParametroIdCantones       VARCHAR2(45)   := 'CANTONES_CONTROL_BW_INTERFACE';
    Lv_ParametroIdParroquias     VARCHAR2(45)   := 'PARROQUIAS_CONTROL_BW_INTERFACE';
    Lv_ParametroArrayElementos   VARCHAR2(45)   := 'ELEMENTOS_ARRAY_CONTROL_BW_INTERFACE';
    Lv_ParametroArrayInterfaces  VARCHAR2(45)   := 'INTERFACE_ARRAY_CONTROL_BW_INTERFACE';

    Lv_ParametroDatosWsNet       VARCHAR2(45)   := 'DATOS_WS_NETWORKING_CONTROL_BW_INTERFACE';
    Lv_ParametroValidacionBw     VARCHAR2(45)   := 'TIPO_VALIDACION_CONTROL_BW_INTERFACE';
    Lv_ParametroPorctRango       VARCHAR2(60)   := 'RANGO_INTERVALO_PORCENTAJE_CONTROL_BW_INTERFACE';
    Lv_ParametroRatioInterface   VARCHAR2(60)   := 'RATIO_PORCENTAJE_CONTROL_BW_INTERFACE';
    Lv_ParametroEjecutarBwMasivo VARCHAR2(45)   := 'EJECUCION_CONTROL_BW_INTERFACE';
    Lv_ParametroDiasNotEjecBw    VARCHAR2(60)   := 'DIAS_NO_EJECUCION_CONTROL_BW_INTERFACE';
    Lv_ParametroProgresoBw       VARCHAR2(45)   := 'PROGRESO_CONTROL_BW_INTERFACE';
    Lv_ParametroErrorControlBw   VARCHAR2(45)   := 'ERRORES_CONTROL_BW_INTERFACE';
    Lv_ParametroDiasEjecucion    VARCHAR2(60)   := 'EJECUCIONES_DIARIAS_CONTROL_BW_INTERFACE';

    Lv_SwitchVirtual             VARCHAR2(20)   := 'ES_SWITCH_VIRTUAL';
    Lv_EsCorrecto                VARCHAR2(5)    := 'SI';
    Lv_ValorCero                 VARCHAR2(5)    := '0';
    Lcl_ArrayValuesElementos     CLOB;
    Lcl_ArrayValuesInterfaces    CLOB;
    Lv_TipoValidacionInterface   VARCHAR2(100)  := '';

    Lv_ExistsClientes            VARCHAR2(2)    := '';
    Lv_ExistsElementos           VARCHAR2(2)    := '';
    Lv_ExistsInterfaces          VARCHAR2(2)    := '';
    Lv_ExistsRegiones            VARCHAR2(2)    := '';
    Lv_ExistsProvincias          VARCHAR2(2)    := '';
    Lv_ExistsCantones            VARCHAR2(2)    := '';
    Lv_ExistsParroquias          VARCHAR2(2)    := '';
    Lv_ExistsServiciosNot        VARCHAR2(2)    := '';

    Lcl_SelectAll                CLOB;
    Lcl_QueryAll                 CLOB;
    Lcl_WhereAll                 CLOB;
    Lcl_OrderAll                 CLOB;
    Lcl_Query                    CLOB;
    Lcl_Where                    CLOB;
    Lcl_Group                    CLOB;
    Lcl_Order                    CLOB;

    Lv_EsEjecucionDiaria         VARCHAR2(5);
    Lv_Url                       VARCHAR2(200)  := '';
    Lv_TipoEjecucionWs           VARCHAR2(10)   := '';
    Lv_AccionWs                  VARCHAR2(50)   := '';
    Lb_StatusReporte             BOOLEAN        := false;
    Lv_JobMinute                 VARCHAR2(10)   := '30';
    Lv_UserWs                    VARCHAR2(50)   := 'controlBWMasivo';
    Lv_IpWs                      VARCHAR2(15)   := '127.0.0.1';
    Lv_Aplicacion                VARCHAR2(50)   := 'application/json';
    Ln_Porcentaje                NUMBER         := 100;
    Lcl_Headers                  CLOB;
    Lcl_Request                  CLOB;
    Lcl_Response                 CLOB;
    Ln_CodeRequest               NUMBER;
    Lv_StatusResult              VARCHAR2(10);
    Lv_StatusIntResult           VARCHAR2(10);
    Lv_ControlResult             VARCHAR2(5);
    Ln_BwResult                  NUMBER;
    Ln_CountInterfaces           NUMBER;
    Ln_IndxReg                   NUMBER;
    Lv_MsgResult                 VARCHAR2(500);
    Ln_PorctRango                NUMBER;
    Lv_MensajeError              VARCHAR2(400);
    Lv_Error                     VARCHAR2(400);
    Lv_StatusMasivo              VARCHAR2(10);
    Lv_MensajeMasivo             VARCHAR2(100);
    Le_Exception                 EXCEPTION;

    CURSOR C_VerificarParametros(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
        SELECT 'SI' FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Cv_NombreParametro AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1;

    CURSOR C_VerificarParametrosEjec(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
        SELECT 'SI' FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Cv_NombreParametro AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND VALOR2 = Ln_IdParametroEjecucion AND ROWNUM = 1;

    CURSOR C_ObtenerServPuntoInterface(Cn_IdInterface DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID%TYPE)
    IS
        SELECT SER.ID_SERVICIO, SER.PUNTO_ID FROM DB_COMERCIAL.INFO_SERVICIO SER 
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO 
        WHERE TEC.INTERFACE_ELEMENTO_ID = Cn_IdInterface 
        AND EXISTS ( 
            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_EST 
            WHERE PAR_EST.PARAMETRO_ID = ( 
                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                WHERE NOMBRE_PARAMETRO = Lv_ParametroEstadosServicios AND ESTADO = Lv_EstadoActivo 
                AND ROWNUM = 1 ) 
            AND PAR_EST.ESTADO = Lv_EstadoActivo AND PAR_EST.VALOR1 = SER.ESTADO 
        ) AND ROWNUM = 1;

    CURSOR C_ObtenerServPuntoElemento(Cn_IdElemento DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_ID%TYPE)
    IS
        SELECT SER.ID_SERVICIO, SER.PUNTO_ID FROM DB_COMERCIAL.INFO_SERVICIO SER 
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO 
        WHERE TEC.ELEMENTO_ID = Cn_IdElemento 
        AND EXISTS ( 
            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_EST 
            WHERE PAR_EST.PARAMETRO_ID = ( 
                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                WHERE NOMBRE_PARAMETRO = Lv_ParametroEstadosServicios AND ESTADO = Lv_EstadoActivo 
                AND ROWNUM = 1 ) 
            AND PAR_EST.ESTADO = Lv_EstadoActivo AND PAR_EST.VALOR1 = SER.ESTADO 
        ) AND ROWNUM = 1;

    CURSOR C_ObtenerDatosWSNetworking
    IS
        SELECT VALOR1, VALOR2, VALOR3, VALOR4 FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroDatosWsNet AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1;

    CURSOR C_ObtenerPorctRangoIntervalo
    IS
        SELECT VALOR1 FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroPorctRango AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1 AND TRIM(TRANSLATE(VALOR1, '0123456789', ' ')) IS NULL;

    CURSOR C_EjecutarControlBwMasivo
    IS
        SELECT VALOR1 FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroEjecutarBwMasivo AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1;

    CURSOR C_ObtenerIdParametroCabecera(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
        SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB WHERE NOMBRE_PARAMETRO = Cv_NombreParametro 
        AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1;

    CURSOR C_ObtenerArrayValuesParametro(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
        SELECT PAR_ARRAY.VALOR1 
        FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_ARRAY 
        WHERE PAR_ARRAY.PARAMETRO_ID = ( 
            SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
            WHERE NOMBRE_PARAMETRO = Cv_NombreParametro AND ESTADO = Lv_EstadoActivo
            AND ROWNUM = 1 ) 
        AND PAR_ARRAY.VALOR2 = Ln_IdParametroEjecucion AND PAR_ARRAY.ESTADO = Lv_EstadoActivo AND ROWNUM <= 8;

    CURSOR C_ObtenerTipoValidacionBw
    IS
        SELECT VALOR1 FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroValidacionBw AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1;

    CURSOR C_ObtenerRatioPorcentaje
    IS
        SELECT VALOR1 FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroRatioInterface AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ROWNUM = 1;

    CURSOR C_GetDiaNoEjecucionBwMasivo
    IS
        SELECT 'SI' FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroDiasNotEjecBw AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND VALOR1 = EXTRACT(DAY FROM SYSDATE) AND ROWNUM = 1;

    CURSOR C_GetControlEjecucionBwMasivo
    IS
        SELECT SOL.ID_DETALLE_SOLICITUD, SOL.USR_CREACION FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL
        INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIP ON TIP.ID_TIPO_SOLICITUD = SOL.TIPO_SOLICITUD_ID
        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT CAR ON CAR.DETALLE_SOLICITUD_ID = SOL.ID_DETALLE_SOLICITUD
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA C ON C.ID_CARACTERISTICA = CAR.CARACTERISTICA_ID
        WHERE TIP.ESTADO = Lv_EstadoActivo AND CAR.ESTADO = Lv_EstadoActivo
        AND C.ESTADO = Lv_EstadoActivo AND SOL.ESTADO = 'Pendiente'
        AND TIP.DESCRIPCION_SOLICITUD = Lv_TipoSolicitudEjecucion
        AND C.DESCRIPCION_CARACTERISTICA = 'FECHA_EJECUCION'
        AND CAR.VALOR = TO_CHAR(SYSDATE,'YYYY-MM-DD') AND ROWNUM = 1;

    CURSOR C_ValidarDiaEjeAutomatico
    IS
        SELECT 'SI' FROM DB_GENERAL.ADMI_PARAMETRO_DET
        WHERE ESTADO = Lv_EstadoActivo AND PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
            WHERE NOMBRE_PARAMETRO = Lv_ParametroDiasEjecucion AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1)
        AND ( VALOR1 = '1' OR MOD(EXTRACT(DAY FROM NUMTODSINTERVAL(SYSDATE-FE_CREACION,'DAY')),VALOR1) = 0 )
        AND ROWNUM = 1;

    BEGIN
        OPEN C_EjecutarControlBwMasivo;
        FETCH C_EjecutarControlBwMasivo INTO Lv_EjecutarControlBwMasivo;
        CLOSE C_EjecutarControlBwMasivo;

        --verifico los dias no permitidos para el control bw interface
        Lv_DiaNoEjeControlBwMasivo := NULL;
        OPEN C_GetDiaNoEjecucionBwMasivo;
        FETCH C_GetDiaNoEjecucionBwMasivo INTO Lv_DiaNoEjeControlBwMasivo;
        CLOSE C_GetDiaNoEjecucionBwMasivo;
        IF Lv_DiaNoEjeControlBwMasivo IS NULL THEN
            Lv_DiaNoEjeControlBwMasivo := 'NO';
        END IF;

        --obtengo el id de la ejecucion de la solicitud
        OPEN C_GetControlEjecucionBwMasivo;
        FETCH C_GetControlEjecucionBwMasivo INTO Ln_IdParametroEjecucion, Lv_UserWs;
        CLOSE C_GetControlEjecucionBwMasivo;

        --verifico la ejecucion diaria
        Lv_EsEjecucionDiaria := NULL;
        OPEN C_ValidarDiaEjeAutomatico;
        FETCH C_ValidarDiaEjeAutomatico INTO Lv_EsEjecucionDiaria;
        CLOSE C_ValidarDiaEjeAutomatico;
        IF Lv_EsEjecucionDiaria IS NULL THEN
            Lv_EsEjecucionDiaria := 'NO';
        END IF;

        --verifico si se realiza la ejecucion del control bw interface
        IF Lv_EjecutarControlBwMasivo = 'SI' AND Lv_DiaNoEjeControlBwMasivo = 'NO'
              AND ( Ln_IdParametroEjecucion IS NOT NULL OR Lv_EsEjecucionDiaria = 'SI' ) THEN
            --verifico si el id de la ejecucion es null
            IF Ln_IdParametroEjecucion IS NULL THEN
                --seteo el usuario
                Lv_UserWs := 'controlBWMasivo';
                --ingreso la solicitud de ejecucion
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOLICITUD
                ( ID_DETALLE_SOLICITUD,TIPO_SOLICITUD_ID,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL,
                    ( SELECT ID_TIPO_SOLICITUD FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD
                      WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD CONTROL BW AUTOMATICO' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    'Pendiente',
                    Lv_UserWs,
                    SYSDATE
                ) RETURNING ID_DETALLE_SOLICITUD INTO Ln_IdParametroEjecucion;
                --ingreso la fecha de la solicitud de ejecucion
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdParametroEjecucion,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'FECHA_EJECUCION' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    TO_CHAR(SYSDATE,'YYYY-MM-DD'),
                    Lv_EstadoActivo,
                    Lv_UserWs,
                    SYSDATE
                );
                --ingreso el total switch de la solicitud de ejecucion
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdParametroEjecucion,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'TOTAL_SWITCH' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    'Todas',
                    Lv_EstadoActivo,
                    Lv_UserWs,
                    SYSDATE
                );
                --ingreso el total interfaces de la solicitud de ejecucion
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdParametroEjecucion,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'TOTAL_INTERFACES' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    'Todas',
                    Lv_EstadoActivo,
                    Lv_UserWs,
                    SYSDATE
                );
                --se guardan los cambios
                COMMIT;
            END IF;

            --ingreso el inicio de la ejecucion
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdParametroEjecucion,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'FECHA_INICIO' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),
                Lv_EstadoActivo,
                Lv_UserWs,
                SYSDATE
            );
            --actualizo el estado
            UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD SET ESTADO = 'EnProceso' WHERE ID_DETALLE_SOLICITUD =  Ln_IdParametroEjecucion;
            --se guardan los cambios
            COMMIT;

            OPEN C_ObtenerIdParametroCabecera(Lv_ParametroProgresoBw);
            FETCH C_ObtenerIdParametroCabecera INTO Ln_IdParametroProgreso;
            CLOSE C_ObtenerIdParametroCabecera;

            OPEN C_ObtenerIdParametroCabecera(Lv_ParametroErrorControlBw);
            FETCH C_ObtenerIdParametroCabecera INTO Ln_IdParametroErrores;
            CLOSE C_ObtenerIdParametroCabecera;

            OPEN C_ObtenerDatosWSNetworking;
            FETCH C_ObtenerDatosWSNetworking INTO Lv_Url, Lv_TipoEjecucionWs, Lv_AccionWs, Lv_JobMinute;
            CLOSE C_ObtenerDatosWSNetworking;

            --seteo los minutos del job si es null
            IF Lv_JobMinute IS NULL THEN
                Lv_JobMinute := '30';
            END IF;

            OPEN C_ObtenerTipoValidacionBw;
            FETCH C_ObtenerTipoValidacionBw INTO Lv_TipoValidacionInterface;
            CLOSE C_ObtenerTipoValidacionBw;

            --se verifica el tipo de validacion de la interface
            IF Lv_TipoValidacionInterface = Lv_ParametroRatioInterface THEN
                OPEN C_ObtenerRatioPorcentaje;
                FETCH C_ObtenerRatioPorcentaje INTO Ln_PorctRango;
                CLOSE C_ObtenerRatioPorcentaje;
            ELSE
                OPEN C_ObtenerPorctRangoIntervalo;
                FETCH C_ObtenerPorctRangoIntervalo INTO Ln_PorctRango;
                CLOSE C_ObtenerPorctRangoIntervalo;
            END IF;

            --seteo el rango si es null o se covierta formato numero
            IF Lv_TipoValidacionInterface = Lv_ParametroRatioInterface AND Ln_PorctRango IS NULL THEN
                Ln_PorctRango := 1;
            ELSIF Ln_PorctRango IS NULL THEN
                Ln_PorctRango := 0;
            ELSE
                Ln_PorctRango := ROUND(Ln_PorctRango, 2);
            END IF;

            OPEN C_VerificarParametros(Lv_ParametroClientes);
            FETCH C_VerificarParametros INTO Lv_ExistsClientes;
            CLOSE C_VerificarParametros;

            OPEN C_VerificarParametros(Lv_ParametroIdRegiones);
            FETCH C_VerificarParametros INTO Lv_ExistsRegiones;
            CLOSE C_VerificarParametros;

            OPEN C_VerificarParametros(Lv_ParametroIdProvincias);
            FETCH C_VerificarParametros INTO Lv_ExistsProvincias;
            CLOSE C_VerificarParametros;

            OPEN C_VerificarParametros(Lv_ParametroIdCantones);
            FETCH C_VerificarParametros INTO Lv_ExistsCantones;
            CLOSE C_VerificarParametros;

            OPEN C_VerificarParametros(Lv_ParametroIdParroquias);
            FETCH C_VerificarParametros INTO Lv_ExistsParroquias;
            CLOSE C_VerificarParametros;

            OPEN C_VerificarParametros(Lv_ParametroServiciosNot);
            FETCH C_VerificarParametros INTO Lv_ExistsServiciosNot;
            CLOSE C_VerificarParametros;

            FOR array_values in C_ObtenerArrayValuesParametro(Lv_ParametroArrayElementos)
            LOOP
                IF Lcl_ArrayValuesElementos IS NULL THEN
                    Lcl_ArrayValuesElementos := array_values.valor1;
                ELSE
                    Lcl_ArrayValuesElementos := Lcl_ArrayValuesElementos || ',' || array_values.valor1;
                END IF;
            END LOOP;

            FOR array_values in C_ObtenerArrayValuesParametro(Lv_ParametroArrayInterfaces)
            LOOP
                IF Lcl_ArrayValuesInterfaces IS NULL THEN
                    Lcl_ArrayValuesInterfaces := array_values.valor1;
                ELSE
                    Lcl_ArrayValuesInterfaces := Lcl_ArrayValuesInterfaces || ',' || array_values.valor1;
                END IF;
            END LOOP;

            Lcl_Query := 'SELECT ELE.ID_ELEMENTO, INT.ID_INTERFACE_ELEMENTO, ELE.NOMBRE_ELEMENTO, INT.NOMBRE_INTERFACE_ELEMENTO,
                             ELE.ESTADO ESTADO_ELEMENTO,INT.ESTADO ESTADO_INTERFACE,
                             DB_COMERCIAL.TECNK_SERVICIOS.F_GET_BW_TOTAL_INTERFACE(INT.ID_INTERFACE_ELEMENTO,''CAPACIDAD1'') CAPACIDAD_UNO,
                             DB_COMERCIAL.TECNK_SERVICIOS.F_GET_BW_TOTAL_INTERFACE(INT.ID_INTERFACE_ELEMENTO,''CAPACIDAD2'') CAPACIDAD_DOS,
                             CAN.NOMBRE_CANTON CIUDAD
                        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INT 
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO   ELE ON ELE.ID_ELEMENTO = INT.ELEMENTO_ID 
                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD ON ELE.MODELO_ELEMENTO_ID = MOD.ID_MODELO_ELEMENTO 
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON ELE.ID_ELEMENTO = TEC.ELEMENTO_ID 
                                                                              AND INT.ID_INTERFACE_ELEMENTO = TEC.INTERFACE_ELEMENTO_ID 
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO         SER ON SER.ID_SERVICIO = TEC.SERVICIO_ID 
                            INNER JOIN DB_COMERCIAL.INFO_PUNTO            PUN ON PUN.ID_PUNTO    = SER.PUNTO_ID 
                            INNER JOIN DB_GENERAL.ADMI_SECTOR             SEC  ON SEC.ID_SECTOR     = PUN.SECTOR_ID 
                            INNER JOIN DB_GENERAL.ADMI_PARROQUIA          PAR  ON PAR.ID_PARROQUIA  = SEC.PARROQUIA_ID 
                            INNER JOIN DB_GENERAL.ADMI_CANTON             CAN  ON CAN.ID_CANTON     = PAR.CANTON_ID 
                            INNER JOIN DB_GENERAL.ADMI_PROVINCIA          PROV ON PROV.ID_PROVINCIA = CAN.PROVINCIA_ID';
            Lcl_Where := ' WHERE ELE.ESTADO = ''' || Lv_EstadoActivo || ''' AND PUN.ESTADO = ''' || Lv_EstadoActivo || '''';
            Lcl_Group := ' GROUP BY ELE.ID_ELEMENTO, INT.ID_INTERFACE_ELEMENTO, ELE.NOMBRE_ELEMENTO, INT.NOMBRE_INTERFACE_ELEMENTO, ELE.ESTADO, INT.ESTADO, CAN.NOMBRE_CANTON';
            Lcl_Order := ' ORDER BY ELE.ID_ELEMENTO';
            Lcl_QueryAll := ' LEFT JOIN ( SELECT * FROM DB_GENERAL.ADMI_PARAMETRO_DET 
                                WHERE PARAMETRO_ID = ( SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroRangoInterface || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' AND ROWNUM = 1 )
                            AND ESTADO = ''' || Lv_EstadoActivo || ''' ) CAP ON UPPER(CAP.VALOR1) = UPPER(SUBSTR(INFO.NOMBRE_INTERFACE_ELEMENTO,1,2)) ';
            Lcl_WhereAll := ' WHERE ( CAP.VALOR3 IS NULL OR CAP.VALOR3 = ''' || Lv_ValorCero || ''' OR ( INFO.CAPACIDAD_UNO >= CAP.VALOR3 AND INFO.CAPACIDAD_DOS >= CAP.VALOR3 ) )
                             AND ( CAP.VALOR4 IS NULL OR CAP.VALOR4 = ''' || Lv_ValorCero || ''' OR ( INFO.CAPACIDAD_UNO <= CAP.VALOR4 AND INFO.CAPACIDAD_DOS <= CAP.VALOR4 ) )';
            Lcl_OrderAll := ' ORDER BY ID_ELEMENTO';

            Lcl_Where := Lcl_Where || ' 
                        AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_TIP 
                            WHERE PAR_TIP.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroTiposElementos || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_TIP.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_TIP.VALOR1 = MOD.TIPO_ELEMENTO_ID 
                        )';

            Lcl_Where := Lcl_Where || ' 
                        AND NOT EXISTS 
                        ( 
                            SELECT 1 FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET_ELE 
                            WHERE DET_ELE.ELEMENTO_ID = ELE.ID_ELEMENTO AND DET_ELE.DETALLE_NOMBRE =''' || Lv_SwitchVirtual || ''' 
                            AND DET_ELE.DETALLE_VALOR = ''' || Lv_EsCorrecto || ''' AND DET_ELE.ESTADO = ''' || Lv_EstadoActivo || '''
                        )';

            Lcl_Where := Lcl_Where || ' 
                        AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_EST 
                            WHERE PAR_EST.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroEstadosServicios || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_EST.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_EST.VALOR1 = SER.ESTADO 
                        )';

            IF Lv_ExistsClientes = 'SI' THEN
                Lcl_Where := Lcl_Where || ' AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_CLI 
                            WHERE PAR_CLI.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroClientes || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_CLI.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_CLI.VALOR1 = PUN.PERSONA_EMPRESA_ROL_ID 
                        )';
            END IF;

            IF Lcl_ArrayValuesElementos IS NOT NULL THEN
                Lcl_Where := Lcl_Where || '
                        AND EXISTS 
                        ( 
                            SELECT 1 FROM (SELECT TO_NUMBER(column_value) as ID_VALUE FROM XMLTABLE(''' || Lcl_ArrayValuesElementos || ''')) 
                                TBL_ARRAY_VALUES_ELE
                            WHERE ELE.ID_ELEMENTO = TBL_ARRAY_VALUES_ELE.ID_VALUE
                        )';
            END IF;

            IF Lcl_ArrayValuesInterfaces IS NOT NULL THEN
                Lcl_Where := Lcl_Where || '
                        AND EXISTS 
                        ( 
                            SELECT 1 FROM (SELECT TO_NUMBER(column_value) as ID_VALUE FROM XMLTABLE(''' || Lcl_ArrayValuesInterfaces || ''')) 
                                TBL_ARRAY_VALUES_INT 
                            WHERE INT.ID_INTERFACE_ELEMENTO = TBL_ARRAY_VALUES_INT.ID_VALUE 
                        )';
            END IF;

            IF Lv_ExistsRegiones = 'SI' THEN
                Lcl_Where := Lcl_Where || ' AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_REG 
                            WHERE PAR_REG.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroIdRegiones || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_REG.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_REG.VALOR1 = PROV.REGION_ID 
                        )';
            END IF;

            IF Lv_ExistsProvincias = 'SI' THEN
                Lcl_Where := Lcl_Where || ' AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_PROV 
                            WHERE PAR_PROV.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroIdProvincias || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_PROV.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_PROV.VALOR1 = CAN.PROVINCIA_ID 
                        )';
            END IF;

            IF Lv_ExistsCantones = 'SI' THEN
                Lcl_Where := Lcl_Where || ' AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_CANT 
                            WHERE PAR_CANT.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroIdCantones || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_CANT.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_CANT.VALOR1 = PAR.CANTON_ID 
                        )';
            END IF;

            IF Lv_ExistsParroquias = 'SI' THEN
                Lcl_Where := Lcl_Where || ' AND EXISTS 
                        ( 
                            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_PAR 
                            WHERE PAR_PAR.PARAMETRO_ID = ( 
                                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroIdParroquias || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                AND ROWNUM = 1 ) 
                            AND PAR_PAR.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_PAR.VALOR1 = SEC.PARROQUIA_ID 
                        )';
            END IF;

            IF Lv_ExistsServiciosNot = 'SI' THEN
                Lcl_Where := Lcl_Where || '
                        AND NOT EXISTS 
                        ( 
                            SELECT 1 FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO DIFF_INT 
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO   DIFF_ELE ON DIFF_ELE.ID_ELEMENTO = DIFF_INT.ELEMENTO_ID 
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO DIFF_TEC ON DIFF_ELE.ID_ELEMENTO = DIFF_TEC.ELEMENTO_ID 
                                                                        AND DIFF_INT.ID_INTERFACE_ELEMENTO = DIFF_TEC.INTERFACE_ELEMENTO_ID 
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO         DIFF_SER ON DIFF_SER.ID_SERVICIO = DIFF_TEC.SERVICIO_ID 
                            WHERE DIFF_INT.ID_INTERFACE_ELEMENTO = INT.ID_INTERFACE_ELEMENTO 
                            AND EXISTS 
                            ( 
                                SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET DIFF_PAR_EST 
                                WHERE DIFF_PAR_EST.PARAMETRO_ID = ( 
                                    SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                    WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroEstadosServicios || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                    AND ROWNUM = 1 ) 
                                AND DIFF_PAR_EST.ESTADO = ''' || Lv_EstadoActivo || ''' AND DIFF_PAR_EST.VALOR1 = DIFF_SER.ESTADO 
                            ) 
                            AND EXISTS 
                            ( 
                                SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_SER 
                                WHERE PAR_SER.PARAMETRO_ID = ( 
                                    SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                    WHERE NOMBRE_PARAMETRO = ''' || Lv_ParametroServiciosNot || ''' AND ESTADO = ''' || Lv_EstadoActivo || ''' 
                                    AND ROWNUM = 1 ) 
                                AND PAR_SER.ESTADO = ''' || Lv_EstadoActivo || ''' AND PAR_SER.VALOR1 = DIFF_SER.PRODUCTO_ID 
                                AND ( PAR_SER.VALOR2 IS NULL OR PAR_SER.VALOR2 = DIFF_SER.DESCRIPCION_PRESENTA_FACTURA ) 
                            ) 
                        )';
            END IF;

            Lcl_SelectAll := 'SELECT INFO.* FROM ( 
                              ' || Lcl_Query || Lcl_Where || Lcl_Group || Lcl_Order || ' 
                             ) INFO ' || Lcl_QueryAll || Lcl_WhereAll || Lcl_OrderAll;

            OPEN C_GetRegistros FOR Lcl_SelectAll;
            LOOP
                FETCH C_GetRegistros BULK COLLECT INTO Lt_Registros LIMIT 1000;
                Ln_IndxReg := Lt_Registros.FIRST;
                WHILE (Ln_IndxReg IS NOT NULL)
                LOOP
                    Lr_Registros                        := Lt_Registros(Ln_IndxReg);
                    Lr_R_Interface.Ln_IdInterface       := Lr_Registros.Ln_IdInterface;
                    Lr_R_Interface.Lv_NombreInterface   := Lr_Registros.Lv_NombreInterface;
                    Lr_R_Interface.Lv_EstadoInterface   := Lr_Registros.Lv_EstadoInterface;
                    Lr_R_Interface.Ln_TotalCapacidadUno := Lr_Registros.Ln_TotalCapacidadUno;
                    Lr_R_Interface.Ln_TotalCapacidadDos := Lr_Registros.Ln_TotalCapacidadDos;
                    Lr_R_Interface.Lv_Ciudad            := Lr_Registros.Lv_Ciudad;
                    Lr_Interfaces(Lr_Registros.Lv_NombreElemento || '_' || Lr_Registros.Lv_NombreInterface) := Lr_R_Interface;
                    IF Lr_Elementos.EXISTS(Lr_Registros.Lv_NombreElemento) = false THEN
                        Lr_R_Elemento.Ln_IdElemento     := Lr_Registros.Ln_IdElemento;
                        Lr_R_Elemento.Lv_NombreElemento := Lr_Registros.Lv_NombreElemento;
                        Lr_R_Elemento.Lv_EstadoElemento := Lr_Registros.Lv_EstadoElemento;
                        Lr_R_Elemento.Lv_Ciudad         := Lr_Registros.Lv_Ciudad;
                        Lr_Elementos(Lr_Registros.Lv_NombreElemento) := Lr_R_Elemento;
                    END IF;
                    IF Lr_DataElementos.EXISTS(Lr_Registros.Lv_NombreElemento) THEN
                        Lr_DataElementos(Lr_Registros.Lv_NombreElemento) := Lr_DataElementos(Lr_Registros.Lv_NombreElemento) || 
                                                                            ',{"interface":"' || Lr_Registros.Lv_NombreInterface || '",' ||
                                                                            '"bw":"' || Lr_Registros.Ln_TotalCapacidadUno || '"}';
                    ELSE
                        Lr_DataElementos(Lr_Registros.Lv_NombreElemento) := '{"interface":"' || Lr_Registros.Lv_NombreInterface || '",' ||
                                                                            '"bw":"' || Lr_Registros.Ln_TotalCapacidadUno || '"}';
                    END IF;
                    Ln_IndxReg := Lt_Registros.NEXT(Ln_IndxReg);
                END LOOP;
                EXIT WHEN C_GetRegistros%NOTFOUND;
            END LOOP;
            CLOSE C_GetRegistros;

            -- CREO EL JSON HEADERS
            APEX_JSON.INITIALIZE_CLOB_OUTPUT;
            APEX_JSON.OPEN_OBJECT;
            APEX_JSON.OPEN_OBJECT('headers');
            APEX_JSON.WRITE('Content-Type', Lv_Aplicacion);
            APEX_JSON.WRITE('Accept', Lv_Aplicacion);
            APEX_JSON.CLOSE_OBJECT;
            APEX_JSON.CLOSE_OBJECT;
            Lcl_Headers := APEX_JSON.GET_CLOB_OUTPUT;

            --total de sw a procesar
            Ln_TotalSwProcesar := Lr_DataElementos.count;

            IF Ln_IdParametroProgreso IS NOT NULL THEN
                --ingreso el parametro para el progreso del control bw masivo
                INSERT INTO DB_GENERAL.ADMI_PARAMETRO_DET
                (ID_PARAMETRO_DET,PARAMETRO_ID,DESCRIPCION,VALOR1,VALOR2,VALOR3,VALOR4,ESTADO,USR_CREACION,FE_CREACION,IP_CREACION,EMPRESA_COD)
                VALUES
                (
                    DB_GENERAL.SEQ_ADMI_PARAMETRO_DET.NEXTVAL,Ln_IdParametroProgreso,
                    'LISTA EJECUCIONES', Ln_IdParametroEjecucion, Ln_TotalSwEjecutados, Ln_TotalSwProcesados,
                    Ln_TotalSwProcesar, Lv_EstadoActivo, Lv_UserWs, SYSDATE, Lv_IpWs,
                    ( SELECT COD_EMPRESA FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO WHERE PREFIJO = 'TN' AND ROWNUM = 1 )
                ) RETURNING ID_PARAMETRO_DET INTO Ln_IdDetallesProgreso;
                --se guardan los cambios
                COMMIT;
            END IF;

            --se recorre la data de los elementos
            Lv_NombreElemento := Lr_DataElementos.FIRST;
            WHILE Lv_NombreElemento IS NOT NULL LOOP
                IF Ln_IdDetallesProgreso IS NOT NULL THEN
                    --actualizo el progreso del control bw masivo
                    Ln_TotalSwEjecutados := Ln_TotalSwEjecutados + 1;
                    UPDATE DB_GENERAL.ADMI_PARAMETRO_DET SET VALOR2 = Ln_TotalSwEjecutados, USR_ULT_MOD = Lv_UserWs, FE_ULT_MOD = SYSDATE
                    WHERE ID_PARAMETRO_DET = Ln_IdDetallesProgreso;
                    --se guardan los cambios
                    COMMIT;
                END IF;
                Ln_IdElemento     := Lr_Elementos(Lv_NombreElemento).Ln_IdElemento;
                Lv_EstadoElemento := Lr_Elementos(Lv_NombreElemento).Lv_EstadoElemento;
                Lcl_Request   := '{
                                    "accion": "' || Lv_AccionWs || '",
                                    "data": {
                                      "ejecuta": "SI",
                                      "tipo_ejecucion": "' || Lv_TipoEjecucionWs || '",
                                      "sw": "' || Lv_NombreElemento || '",
                                      "interfaces":[' || Lr_DataElementos(Lv_NombreElemento) || ']
                                    },
                                    "data-auditoria": {
                                      "servicio": "",
                                      "login_aux": "",
                                      "user_name": "' || Lv_UserWs || '",
                                      "user_ip": "' || Lv_IpWs || '"
                                    }
                                  }';
                --ejecuto el request
                DB_GENERAL.GNKG_WEB_SERVICE.P_POST(Lv_Url,Lcl_Headers,Lcl_Request,Ln_CodeRequest,Lv_MsgResult,Lcl_Response);
                IF Ln_CodeRequest = 0 THEN
                    IF INSTR(Lcl_Response, 'status') != 0 AND INSTR(Lcl_Response, 'msg') != 0 AND INSTR(Lcl_Response, 'interfaces') != 0 THEN
                        APEX_JSON.PARSE(Lcl_Response);
                        Lv_StatusResult := APEX_JSON.GET_VARCHAR2(p_path => 'status');
                        Lv_MsgResult    := APEX_JSON.GET_VARCHAR2(p_path => 'msg');
                        IF Lv_StatusResult = '200' THEN
                            --progreso de los sw procesados
                            IF Ln_IdDetallesProgreso IS NOT NULL THEN
                                --actualizo los sw procesados del control bw masivo
                                Ln_TotalSwProcesados := Ln_TotalSwProcesados + 1;
                                UPDATE DB_GENERAL.ADMI_PARAMETRO_DET SET VALOR3 = Ln_TotalSwProcesados, USR_ULT_MOD = Lv_UserWs, FE_ULT_MOD = SYSDATE
                                WHERE ID_PARAMETRO_DET = Ln_IdDetallesProgreso;
                                --se guardan los cambios
                                COMMIT;
                            END IF;
                            Ln_CountInterfaces := APEX_JSON.GET_COUNT(P_PATH => 'interfaces');
                            IF Ln_CountInterfaces > 0 THEN
                                FOR I IN 1 .. Ln_CountInterfaces LOOP
                                    Lv_TipoTarea    := NULL;
                                    Ln_BwResult     := NULL;
                                    Lv_MensajeError := NULL;
                                    APEX_JSON.PARSE(Lcl_Response);
                                    Lv_StatusIntResult   := APEX_JSON.GET_VARCHAR2(p_path => 'interfaces[%d].status',  p0 => I);
                                    Lv_NombreInterface   := APEX_JSON.GET_VARCHAR2(p_path => 'interfaces[%d].interface',  p0 => I);
                                    Lv_MsgResult         := APEX_JSON.GET_VARCHAR2(p_path => 'interfaces[%d].msg',  p0 => I);
                                    Ln_IdInterface       := Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Ln_IdInterface;
                                    Lv_EstadoInterface   := Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Lv_EstadoInterface;
                                    Ln_TotalCapacidadUno := Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Ln_TotalCapacidadUno;
                                    Ln_TotalCapacidadDos := Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Ln_TotalCapacidadDos;
                                    IF Lv_StatusIntResult = 'ok' THEN
                                        Lv_ControlResult := APEX_JSON.GET_VARCHAR2(p_path => 'interfaces[%d].control',  p0 => I);
                                        IF Lv_ControlResult = 'S' THEN
                                            Ln_BwResult          := TO_NUMBER(APEX_JSON.GET_VARCHAR2(p_path => 'interfaces[%d].bw',  p0 => I));
                                            --se valida el tipo de validaci¿n de la capacidad
                                            IF Lv_TipoValidacionInterface = Lv_ParametroRatioInterface THEN
                                                IF Ln_TotalCapacidadUno >= Ln_BwResult THEN
                                                    Ln_RatioBwInterfaceUno := ROUND(Ln_TotalCapacidadUno/Ln_BwResult, 2);
                                                    Ln_RatioBwInterfaceDos := ROUND(Ln_TotalCapacidadDos/Ln_BwResult, 2);
                                                ELSE
                                                    Ln_RatioBwInterfaceUno := ROUND(Ln_BwResult/Ln_TotalCapacidadUno, 2);
                                                    Ln_RatioBwInterfaceDos := ROUND(Ln_BwResult/Ln_TotalCapacidadDos, 2);
                                                END IF;
                                                --se valida el ratio de la capacidad uno
                                                IF Ln_RatioBwInterfaceUno > Ln_PorctRango THEN
                                                    Lv_TipoTarea := Lv_TipoUpdateBw;
                                                END IF;
                                                --se valida el ratio de la capacidad dos
                                                IF Ln_RatioBwInterfaceDos > Ln_PorctRango THEN
                                                    Lv_TipoTarea := Lv_TipoUpdateBw;
                                                END IF;
                                            ELSE
                                                --saco el intervalo de la capacidad uno con el porcentaje del rango
                                                Ln_MinimoBwInterface := ROUND((Ln_TotalCapacidadUno/Ln_Porcentaje)*(Ln_Porcentaje-Ln_PorctRango));
                                                Ln_MaximoBwInterface := ROUND((Ln_TotalCapacidadUno/Ln_Porcentaje)*(Ln_Porcentaje+Ln_PorctRango));
                                                IF Ln_BwResult < Ln_MinimoBwInterface OR Ln_BwResult > Ln_MaximoBwInterface THEN
                                                    Lv_TipoTarea := Lv_TipoUpdateBw;
                                                END IF;
                                                --saco el intervalo de la capacidad dos con el porcentaje del rango
                                                Ln_MinimoBwInterface := ROUND((Ln_TotalCapacidadDos/Ln_Porcentaje)*(Ln_Porcentaje-Ln_PorctRango));
                                                Ln_MaximoBwInterface := ROUND((Ln_TotalCapacidadDos/Ln_Porcentaje)*(Ln_Porcentaje+Ln_PorctRango));
                                                IF Ln_BwResult < Ln_MinimoBwInterface OR Ln_BwResult > Ln_MaximoBwInterface THEN
                                                    Lv_TipoTarea := Lv_TipoUpdateBw;
                                                END IF;
                                            END IF;
                                        ELSE
                                            --ingreso el historial del elemento
                                            INSERT INTO DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO
                                            ( ID_HISTORIAL,ELEMENTO_ID,ESTADO_ELEMENTO,OBSERVACION,USR_CREACION,FE_CREACION,IP_CREACION )
                                            VALUES
                                            ( DB_INFRAESTRUCTURA.SEQ_INFO_HISTORIAL_ELEMENTO.NEXTVAL,Ln_IdElemento,Lv_EstadoElemento,
                                              'No se actualiza la capacidad de la interface ' || Lv_NombreInterface || 
                                              ' del elemento ' || Lv_NombreElemento || ' porque no posee control de capacidad.',Lv_UserWs,SYSDATE,Lv_IpWs );
                                            --se guardan los cambios
                                            COMMIT;
                                        END IF;
                                        IF Lv_EstadoInterface != 'connected' THEN
                                            --seteo la observacion
                                            Lv_MensajeError := 'Existen errores en la interface ' || Lv_NombreInterface || 
                                                               ' del elemento ' || Lv_NombreElemento || '.<br><b>Mensaje:</b>' || 
                                                               ' Interface en estado ' || Lv_EstadoInterface;
                                            --se genera el proceso masivo
                                            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GENERAR_MASIVO_CONTROL_BW(Lv_TipoTareaInterface,Ln_IdParametroEjecucion,Ln_IdElemento,
                                                  Ln_IdInterface,Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Lv_Ciudad,Lv_MensajeError,Lv_UserWs,NULL,
                                                  Lv_StatusMasivo,Lv_MensajeMasivo);
                                            --seteo la observacion a null
                                            Lv_MensajeError := NULL;
                                            --se setea el status para el reporte
                                            Lb_StatusReporte := true;
                                        END IF;
                                    ELSE
                                        Lv_TipoTarea    := Lv_TipoTareaInterface;
                                        Lv_MensajeError := 'Existen errores al obtener la capacidad de la interface ' || Lv_NombreInterface || 
                                                           ' del elemento ' || Lv_NombreElemento || '.<br><b>Mensaje:</b> ' || Lv_MsgResult;
                                    END IF;
                                    --verifico si hay errores para ingresar el historial y el masivo
                                    IF Lv_TipoTarea IS NOT NULL THEN
                                        --seteo a cero si es null la capacaidad anterior
                                        IF Ln_BwResult IS NULL THEN
                                            Ln_BwResult := 0;
                                        END IF;
                                        --se genera el proceso masivo
                                        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GENERAR_MASIVO_CONTROL_BW(Lv_TipoTarea,Ln_IdParametroEjecucion,Ln_IdElemento,
                                              Ln_IdInterface,Lr_Interfaces(Lv_NombreElemento || '_' || Lv_NombreInterface).Lv_Ciudad,Lv_MensajeError,Lv_UserWs,
                                              '{"capacidadUno":'||Ln_TotalCapacidadUno||',"capacidadDos":'||Ln_TotalCapacidadDos||',"capacidadAnterior":'||Ln_BwResult||'}',
                                              Lv_StatusMasivo,Lv_MensajeMasivo);
                                        --se setea el status para el reporte
                                        Lb_StatusReporte := true;
                                    END IF;
                                END LOOP;
                            END IF;
                        ELSE
                            --seteo la observacion
                            Lv_MensajeError := 'Existen errores al obtener las capacidades de las interfaces del elemento: ' || 
                                               Lv_NombreElemento || '.<br><b>Mensaje:</b> ' || Lv_MsgResult;
                            --se genera el proceso masivo
                            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GENERAR_MASIVO_CONTROL_BW(Lv_TipoTareaElemento,Ln_IdParametroEjecucion,Ln_IdElemento,NULL,
                                Lr_Elementos(Lv_NombreElemento).Lv_Ciudad,Lv_MensajeError,Lv_UserWs,NULL,Lv_StatusMasivo,Lv_MensajeMasivo);
                            --se setea el status para el reporte
                            Lb_StatusReporte := true;
                        END IF;
                    ELSIF Ln_IdParametroErrores IS NOT NULL THEN
                        --ingreso el parametro para el progreso del control bw masivo
                        INSERT INTO DB_GENERAL.ADMI_PARAMETRO_DET
                        (ID_PARAMETRO_DET,PARAMETRO_ID,DESCRIPCION,VALOR1,VALOR2,VALOR3,ESTADO,USR_CREACION,FE_CREACION,IP_CREACION,EMPRESA_COD)
                        VALUES
                        (
                            DB_GENERAL.SEQ_ADMI_PARAMETRO_DET.NEXTVAL,Ln_IdParametroErrores,'LISTA ERRORES',
                            SUBSTR(Lcl_Response, 0, Ln_MaxLengthErrores), Ln_IdDetallesProgreso, Ln_IdElemento,
                            Lv_EstadoActivo, Lv_UserWs, SYSDATE, Lv_IpWs,
                            ( SELECT COD_EMPRESA FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO WHERE PREFIJO = 'TN' AND ROWNUM = 1 )
                        );
                        --se guardan los cambios
                        COMMIT;
                    ELSE
                        Lv_Error := 'Problemas al ejecutar el Ws de Networking para obtener la capacidad de la interface.';
                    END IF;
                ELSE
                    Lv_Error := 'Problemas al ejecutar el Ws de Networking para obtener la capacidad de la interface.';
                END IF;
                --obtengo la siguiente llave
                Lv_NombreElemento := Lr_DataElementos.NEXT(Lv_NombreElemento);
            END LOOP;

            IF Ln_IdParametroEjecucion IS NOT NULL AND Ln_IdElemento IS NOT NULL AND Lb_StatusReporte THEN
                --crear tarea programada para generar el reporte correo unificado
                DBMS_SCHEDULER.CREATE_JOB (
                    job_name => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                    job_type => 'STORED_PROCEDURE',
                    job_action => 'DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GENERAR_MASIVO_CONTROL_BW',
                    number_of_arguments => 10,
                    start_date => systimestamp + NUMTODSINTERVAL(Lv_JobMinute,'MINUTE'),
                    end_date => NULL,
                    enabled => FALSE,
                    auto_drop => TRUE,
                    comments => 'Tarea que se ejecuta para generar el proceso masivo de reporte del correo unificado del Control BW Interfaces.');
                DBMS_SCHEDULER.SET_ATTRIBUTE(
                    name => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                    attribute => 'logging_level', value => DBMS_SCHEDULER.LOGGING_OFF);
                --setear tarea
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 1,
                   argument_value          => Lv_TipoEnviarCorreo);
                --setear id de la ejecucion
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 2,
                   argument_value          => Ln_IdParametroEjecucion);
                --setear id del elemento
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 3,
                   argument_value          => Ln_IdElemento);
                --setear id de la interface
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 4,
                   argument_value          => Ln_IdInterface);
                --setear ciudad
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 5,
                   argument_value          => NULL);
                --setear historial
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 6,
                   argument_value          => NULL);
                --setear usuario
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 7,
                   argument_value          => Lv_UserWs);
                --setear capacidades
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 8,
                   argument_value          => NULL);
                --setear la variable de salida
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 9,
                   argument_value          => Lv_StatusMasivo);
                --setear la variable de salida
                DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE(
                   job_name                => '"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"',
                   argument_position       => 10,
                   argument_value          => Lv_MensajeMasivo);
                --habilitar job
                DBMS_SCHEDULER.ENABLE('"DB_INFRAESTRUCTURA"."JOB_REPORTE_CONTROL_BW"');
            ELSE
                --ingreso el fin de la ejecucion
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                   DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                   Ln_IdParametroEjecucion,
                   ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                     WHERE DESCRIPCION_CARACTERISTICA = 'FECHA_FIN' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                   TO_CHAR(SYSDATE,'YYYY-MM-DD HH24:MI:SS'),
                   Lv_EstadoActivo,
                   Lv_UserWs,
                   SYSDATE
                );
                --actualizo el estado
                UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD SET ESTADO = 'Finalizada' WHERE ID_DETALLE_SOLICITUD =  Ln_IdParametroEjecucion;
                --se guardan los cambios
                COMMIT;
            END IF;

            IF TRIM(Lv_Error) IS NOT NULL THEN
                RAISE Le_Exception;
            END IF;
        END IF;

    EXCEPTION
    WHEN Le_Exception THEN
      --
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                            'INFRK_TRANSACCIONES.P_CONTROL_BW_INTERFACE',
                                            Lv_Error,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    WHEN OTHERS THEN
      --
      Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                            'INFRK_TRANSACCIONES.P_CONTROL_BW_INTERFACE',
                                            Lv_MensajeError,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    --
END P_CONTROL_BW_INTERFACE;

  PROCEDURE P_CANCEL_ELIM_SERVS_DUAL_BAND(
    Pn_IdPunto                  IN DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE,
    Pv_NombreTecnicoProducto    IN DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE,
    Pn_IdServicioUnicoACancelar IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdServicioANoCancelar    IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_EliminaDataTecnica       IN VARCHAR2,
    Pv_ObsProcesoEjecutante     IN VARCHAR2,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_IpCreacion               IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2
  )
  AS
    Lv_MsjError                     VARCHAR2(4000);
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_EstadoPendiente              VARCHAR2(9) := 'Pendiente';
    Lv_EstadoPrePlanificada         VARCHAR2(14) := 'PrePlanificada';
    Lv_EstadoPlanificada            VARCHAR2(11) := 'Planificada';
    Lv_EstadoDetenido               VARCHAR2(8) := 'Detenido';
    Lv_EstadoReplanificada          VARCHAR2(13) := 'Replanificada';
    Lv_EstadoAsignadoTarea          VARCHAR2(13) := 'AsignadoTarea';
    Lv_EstadoAsignada               VARCHAR2(8) := 'Asignada';
    Lv_EstadoEliminado              VARCHAR2(9) := 'Eliminado';
    Lv_EstadoEliminada              VARCHAR2(9) := 'Eliminada';
    Lv_EstadoInCorte                VARCHAR2(9) := 'In-Corte';
    Lv_EstadoCancel                 VARCHAR2(9) := 'Cancel';
    Lv_ContinuaProceso              VARCHAR2(2) := 'NO';
    Lv_NuevoEstadoServicio          VARCHAR2(30);
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lr_InfoDetalleSolHistorial      DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Lv_ProcesoAEjecutar             VARCHAR2(100);
    Lcl_ObservacionServicio         CLOB;
    Ln_Rownum                       NUMBER := 1;
    Ln_IdElemento                   DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Lv_SerieFisicaElemento          DB_INFRAESTRUCTURA.INFO_ELEMENTO.SERIE_FISICA%TYPE;
    Ln_IdInterfaceElemento          DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
    Lv_ResponsableTraza             VARCHAR2(100);
    Lv_Responsable                  VARCHAR2(100);
    Lv_CedulaResponsable            VARCHAR2(15);
    Ln_IdServicioTecnico            DB_INFRAESTRUCTURA.INFO_SERVICIO_TECNICO.ID_SERVICIO_TECNICO%TYPE;
    Lr_InfoHistorialElemento        DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE;
    Ln_IdEnlaceIzq                  DB_INFRAESTRUCTURA.INFO_ENLACE.ID_ENLACE%TYPE;
    Ln_IdInterfaceElementoIniIzq    DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE;
    Ln_IdInterfaceElementoFinIzq    DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_FIN_ID%TYPE;
    Ln_IdEnlaceDer                  DB_INFRAESTRUCTURA.INFO_ENLACE.ID_ENLACE%TYPE;
    Ln_IdInterfaceElementoIniDer    DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE;
    Ln_IdInterfaceElementoFinDer    DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_FIN_ID%TYPE;
    Ln_IdUltimaMillaSt              DB_COMERCIAL.INFO_SERVICIO_TECNICO.ULTIMA_MILLA_ID%TYPE;
    Le_Exception                    EXCEPTION;  
    CURSOR Lc_GetServiciosDualBand
    IS
      SELECT SERVICIO.ID_SERVICIO, SERVICIO.ESTADO, PUNTO.LOGIN
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD
      ON PROD.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
      WHERE SERVICIO.PUNTO_ID = Pn_IdPunto
      AND SERVICIO.ESTADO IN (Lv_EstadoPrePlanificada, Lv_EstadoPlanificada, Lv_EstadoDetenido, Lv_EstadoReplanificada, 
                              Lv_EstadoAsignadoTarea, Lv_EstadoAsignada, Lv_EstadoPendiente, Lv_EstadoActivo, Lv_EstadoInCorte)
      AND PROD.NOMBRE_TECNICO = Pv_NombreTecnicoProducto;

    CURSOR Lc_GetSolicitudesServicio(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT SOLICITUD.ID_DETALLE_SOLICITUD, SOLICITUD.ESTADO
      FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOLICITUD
      WHERE SOLICITUD.SERVICIO_ID = Cn_IdServicio;

    CURSOR Lc_GetInformacionTecnica(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT ST.ID_SERVICIO_TECNICO, ELEMENTO.ID_ELEMENTO, ELEMENTO.SERIE_FISICA, INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO, ST.ULTIMA_MILLA_ID
      FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO ST
      LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
      ON ELEMENTO.ID_ELEMENTO = ST.ELEMENTO_CLIENTE_ID
      LEFT JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_ELEMENTO
      ON INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO = ST.INTERFACE_ELEMENTO_CLIENTE_ID
      WHERE ST.SERVICIO_ID = Cn_IdServicio
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetEnlaceInterfaceEleIni(Cn_InterfaceElementoIniId DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE)
    IS
      SELECT ID_ENLACE, INTERFACE_ELEMENTO_FIN_ID
      FROM DB_INFRAESTRUCTURA.INFO_ENLACE
      WHERE INTERFACE_ELEMENTO_INI_ID = Cn_InterfaceElementoIniId
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetEnlaceInterfaceEleFin(Cn_InterfaceElementoFinId DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_FIN_ID%TYPE)
    IS
      SELECT ID_ENLACE, INTERFACE_ELEMENTO_INI_ID
      FROM DB_INFRAESTRUCTURA.INFO_ENLACE
      WHERE INTERFACE_ELEMENTO_FIN_ID = Cn_InterfaceElementoFinId
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetResponsableArtsInstala(Cv_NumeroSerie VARCHAR2)
    IS
      SELECT ARTS_INST.CEDULA, 
      CASE
        WHEN PERSONA.RAZON_SOCIAL IS NOT NULL THEN PERSONA.RAZON_SOCIAL
        WHEN PERSONA.NOMBRES IS NOT NULL AND PERSONA.APELLIDOS IS NOT NULL THEN 
          PERSONA.APELLIDOS || ' ' || PERSONA.NOMBRES
        WHEN PERSONA.REPRESENTANTE_LEGAL IS NOT NULL THEN 
          PERSONA.REPRESENTANTE_LEGAL
        ELSE ''
      END RESPONSABLE
      FROM NAF47_TNET.IN_ARTICULOS_INSTALACION ARTS_INST 
      LEFT JOIN DB_COMERCIAL.INFO_PERSONA PERSONA
      ON PERSONA.IDENTIFICACION_CLIENTE = ARTS_INST.CEDULA
      WHERE ARTS_INST.ROWID = (
        SELECT MAX(ARTS_INST_MAX.ROWID) 
        FROM NAF47_TNET.IN_ARTICULOS_INSTALACION ARTS_INST_MAX
        WHERE ARTS_INST_MAX.NUMERO_SERIE = Cv_NumeroSerie 
        AND ARTS_INST_MAX.CEDULA IS NOT NULL)
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetResponsableFueraBodega(Cv_NumeroSerie VARCHAR2)
    IS
      SELECT V_EMPLEADO_EMPRESA.NOMBRE 
      FROM NAF47_TNET.V_EMPLEADOS_EMPRESAS V_EMPLEADO_EMPRESA
      INNER JOIN
      (
        SELECT ARI.EMPLE_SOLIC, ARI.NO_CIA_RESPONSABLE
        FROM NAF47_TNET.ARINME ARI 
        WHERE  ARI.ROWID =
        (
          SELECT MAX(ARI_MAX.ROWID) 
          FROM NAF47_TNET.ARINME ARI_MAX 
          WHERE ARI_MAX.NO_DOCU IN (
            SELECT INV_DOC_SERIE.ID_DOCUMENTO 
            FROM NAF47_TNET.INV_DOCUMENTO_SERIE INV_DOC_SERIE 
            WHERE UPPER(INV_DOC_SERIE.SERIE) = UPPER(Cv_NumeroSerie))
          AND ARI_MAX.EMPLE_SOLIC IS NOT NULL
        )
      ) INFO_ARI
      ON (INFO_ARI.EMPLE_SOLIC = V_EMPLEADO_EMPRESA.NO_EMPLE
          AND INFO_ARI.NO_CIA_RESPONSABLE = V_EMPLEADO_EMPRESA.NO_CIA)
      WHERE ROWNUM = Ln_Rownum;

  BEGIN
    IF Pv_UsrCreacion IS NOT NULL THEN
      Lv_UsrCreacion := Pv_UsrCreacion;
    ELSE
      Lv_UsrCreacion := 'cancelaDualBand';
    END IF;

    IF Pv_IpCreacion IS NOT NULL THEN
      Lv_IpCreacion := Pv_IpCreacion;
    ELSE
      Lv_IpCreacion := '127.0.0.1';
    END IF;

    IF Lc_GetServiciosDualBand%ISOPEN THEN
      CLOSE Lc_GetServiciosDualBand;
    END IF;
    FOR I_GetServiciosDualBand IN Lc_GetServiciosDualBand
    LOOP
      Lv_ContinuaProceso    := 'SI';
      IF ((Pn_IdServicioUnicoACancelar IS NOT NULL AND Pn_IdServicioUnicoACancelar <> I_GetServiciosDualBand.ID_SERVICIO)
        OR (Pn_IdServicioANoCancelar IS NOT NULL AND Pn_IdServicioANoCancelar = I_GetServiciosDualBand.ID_SERVICIO)) THEN 
        Lv_ContinuaProceso  := 'NO';
      END IF;
      IF Lv_ContinuaProceso = 'SI' THEN
        IF (I_GetServiciosDualBand.ESTADO = Lv_EstadoActivo OR I_GetServiciosDualBand.ESTADO = Lv_EstadoInCorte) THEN
          Lv_NuevoEstadoServicio    := Lv_EstadoCancel;
          Lcl_ObservacionServicio   := 'Se cancela el servicio de manera lógica' || Pv_ObsProcesoEjecutante;
          Lv_ProcesoAEjecutar       := 'cancelación';
        ELSE
          Lv_NuevoEstadoServicio  := Lv_EstadoEliminado;
          Lcl_ObservacionServicio := 'Se elimina el servicio de manera lógica' || Pv_ObsProcesoEjecutante;
          Lv_ProcesoAEjecutar     := 'eliminación';
        END IF;

        UPDATE DB_COMERCIAL.INFO_SERVICIO
        SET    ESTADO = Lv_NuevoEstadoServicio
        WHERE  ID_SERVICIO = I_GetServiciosDualBand.ID_SERVICIO;

        Lr_ServicioHistorial              := NULL;
        Lr_ServicioHistorial.SERVICIO_ID  := I_GetServiciosDualBand.ID_SERVICIO;
        Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
        Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
        Lr_ServicioHistorial.ESTADO       := Lv_NuevoEstadoServicio;
        Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionServicio;
        DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        IF Lc_GetSolicitudesServicio%ISOPEN THEN
          CLOSE Lc_GetSolicitudesServicio;
        END IF;
        FOR I_GetSolicitudesServicio IN Lc_GetSolicitudesServicio(I_GetServiciosDualBand.ID_SERVICIO)
        LOOP
          UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
          SET ESTADO = Lv_EstadoEliminada
          WHERE ID_DETALLE_SOLICITUD = I_GetSolicitudesServicio.ID_DETALLE_SOLICITUD;

          Lr_InfoDetalleSolHistorial                        := NULL;
          Lr_InfoDetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
          Lr_InfoDetalleSolHistorial.DETALLE_SOLICITUD_ID   := I_GetSolicitudesServicio.ID_DETALLE_SOLICITUD;
          Lr_InfoDetalleSolHistorial.ESTADO                 := Lv_EstadoEliminada;
          Lr_InfoDetalleSolHistorial.OBSERVACION            := 'Se da de baja la solicitud en estado ' || I_GetSolicitudesServicio.ESTADO
                                                                || ' por ' || Lv_ProcesoAEjecutar || ' del servicio asociado ';
          Lr_InfoDetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
          Lr_InfoDetalleSolHistorial.FE_CREACION            := SYSDATE;
          Lr_InfoDetalleSolHistorial.IP_CREACION            := Lv_IpCreacion;
          DB_COMERCIAL.COMEK_MODELO.P_INSERT_INFO_DETALLE_SOL_HIST(Lr_InfoDetalleSolHistorial, Lv_MsjError);
          IF Lv_MsjError IS NOT NULL THEN
            RAISE Le_Exception;
          END IF;

          UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
          SET ESTADO = Lv_EstadoEliminado,
          USR_ULT_MOD = Lv_UsrCreacion,
          FE_ULT_MOD = SYSDATE
          WHERE DETALLE_SOLICITUD_ID = I_GetSolicitudesServicio.ID_DETALLE_SOLICITUD;
        END LOOP;

        IF Pv_NombreTecnicoProducto = 'EXTENDER_DUAL_BAND' AND I_GetServiciosDualBand.ESTADO = Lv_EstadoActivo THEN
          OPEN Lc_GetInformacionTecnica(I_GetServiciosDualBand.ID_SERVICIO);
          FETCH Lc_GetInformacionTecnica INTO Ln_IdServicioTecnico, Ln_IdElemento, Lv_SerieFisicaElemento, Ln_IdInterfaceElemento, Ln_IdUltimaMillaSt;
          CLOSE Lc_GetInformacionTecnica;

          IF Ln_IdServicioTecnico IS NOT NULL AND Pv_EliminaDataTecnica = 'SI'THEN
            IF Ln_IdInterfaceElemento IS NOT NULL THEN
              OPEN Lc_GetEnlaceInterfaceEleFin(Ln_IdInterfaceElemento);
              FETCH Lc_GetEnlaceInterfaceEleFin INTO Ln_IdEnlaceIzq, Ln_IdInterfaceElementoIniIzq;
              CLOSE Lc_GetEnlaceInterfaceEleFin;
              IF Ln_IdEnlaceIzq IS NOT NULL THEN
                UPDATE DB_INFRAESTRUCTURA.INFO_ENLACE
                SET ESTADO = Lv_EstadoEliminado
                WHERE ID_ENLACE = Ln_IdEnlaceIzq;

                OPEN Lc_GetEnlaceInterfaceEleIni(Ln_IdInterfaceElemento);
                FETCH Lc_GetEnlaceInterfaceEleIni INTO Ln_IdEnlaceDer, Ln_IdInterfaceElementoFinDer;
                CLOSE Lc_GetEnlaceInterfaceEleIni;

                IF Ln_IdEnlaceDer IS NOT NULL THEN
                  UPDATE DB_INFRAESTRUCTURA.INFO_ENLACE
                  SET ESTADO = Lv_EstadoEliminado
                  WHERE ID_ENLACE = Ln_IdEnlaceDer;

                  INSERT 
                  INTO DB_INFRAESTRUCTURA.INFO_ENLACE
                  ( 
                    ID_ENLACE,
                    INTERFACE_ELEMENTO_INI_ID,
                    INTERFACE_ELEMENTO_FIN_ID,
                    TIPO_MEDIO_ID,
                    TIPO_ENLACE,
                    ESTADO,
                    USR_CREACION,
                    FE_CREACION,
                    IP_CREACION
                  )
                  VALUES
                  ( 
                    DB_INFRAESTRUCTURA.SEQ_INFO_ENLACE.NEXTVAL,
                    Ln_IdInterfaceElementoIniIzq,
                    Ln_IdInterfaceElementoFinDer,
                    Ln_IdUltimaMillaSt,
                    'PRINCIPAL',
                    'Activo',
                    Lv_UsrCreacion,
                    SYSDATE,
                    Lv_IpCreacion
                  );
                END IF;
              END IF;
            END IF;

            IF Ln_IdElemento IS NOT NULL THEN
              UPDATE DB_INFRAESTRUCTURA.INFO_ELEMENTO 
              SET ESTADO = Lv_EstadoEliminado
              WHERE ID_ELEMENTO = Ln_IdElemento;

              Lr_InfoHistorialElemento                  := NULL;
              Lr_InfoHistorialElemento.ELEMENTO_ID      := Ln_IdElemento;
              Lr_InfoHistorialElemento.ESTADO_ELEMENTO  := Lv_EstadoEliminado;
              Lr_InfoHistorialElemento.OBSERVACION      := 'Se eliminó el elemento por cancelación de servicio' || Pv_ObsProcesoEjecutante;
              Lr_InfoHistorialElemento.USR_CREACION     := Lv_UsrCreacion;
              Lr_InfoHistorialElemento.IP_CREACION      := Lv_IpCreacion;
              DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_InfoHistorialElemento, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;

              UPDATE DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
              SET ESTADO = Lv_EstadoEliminado
              WHERE ELEMENTO_ID = Ln_IdElemento;

              OPEN Lc_GetResponsableArtsInstala(Lv_SerieFisicaElemento);
              FETCH Lc_GetResponsableArtsInstala INTO Lv_CedulaResponsable, Lv_Responsable;
              CLOSE Lc_GetResponsableArtsInstala;

              IF Lv_CedulaResponsable IS NOT NULL THEN
                Lv_ResponsableTraza := Lv_Responsable;
              ELSE
                OPEN Lc_GetResponsableFueraBodega(Lv_SerieFisicaElemento);
                FETCH Lc_GetResponsableFueraBodega INTO Lv_ResponsableTraza;
                CLOSE Lc_GetResponsableFueraBodega;
              END IF;

              INSERT 
              INTO DB_INFRAESTRUCTURA.INFO_ELEMENTO_TRAZABILIDAD
              ( 
                ID_TRAZABILIDAD,
                NUMERO_SERIE,
                COD_EMPRESA,
                ESTADO_TELCOS,
                ESTADO_NAF,
                ESTADO_ACTIVO,
                UBICACION,
                LOGIN,
                RESPONSABLE,
                OFICINA_ID,
                OBSERVACION,
                USR_CREACION,
                FE_CREACION,
                FE_CREACION_NAF,
                TRANSACCION,
                IP_CREACION
              )
              VALUES
              ( 
                DB_INFRAESTRUCTURA.SEQ_INFO_ELEMENTO_TRAZABILIDAD.NEXTVAL,
                Lv_SerieFisicaElemento,
                '18',
                Lv_EstadoEliminado,
                Lv_EstadoEliminado,
                'Cancelado',
                'Cliente',
                I_GetServiciosDualBand.LOGIN,
                Lv_ResponsableTraza,
                0,
                NULL,
                Lv_UsrCreacion,
                SYSDATE,
                SYSDATE,
                'Cancelacion Servicio',
                Lv_IpCreacion
              );
            END IF;
          END IF;
        END IF;
      END IF;  
    END LOOP;
    Pv_Status := 'OK';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := 'No se ha podido cancelar los servicios Dual band';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND', 
                                            'No se ha podido cancelar los servicios dual band - ' || Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := 'No se ha podido cancelar los servicios Dual band';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND', 
                                            'No se ha podido cancelar los servicios dual band - ' 
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CANCEL_ELIM_SERVS_DUAL_BAND;


  PROCEDURE P_CREA_SERVICIO_DUAL_BAND(
    Pr_InfoCreacionServDualBand IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoCreacionServicioDb,
    Pn_IdElementoClienteSt      IN DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID%TYPE,
    Pn_IdInterfaceEleClienteSt  IN DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID%TYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_IpCreacion               IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2, 
    Pv_MsjError                 OUT VARCHAR2,
    Pn_IdServicioNuevo          OUT DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
  AS
    Lv_UsrCreacion              VARCHAR2(15);
    Lv_IpCreacion               VARCHAR2(15);
    Lv_UsrVendedor              VARCHAR2(28);
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_PrefijoEmpresa           VARCHAR2(2) := 'MD';
    Lv_NombreParamsServiciosMd  VARCHAR2(35) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_NombreParamPrecioProds   VARCHAR2(17) := 'PRECIOS_PRODUCTOS';
    Lv_DescripcionEmpleado      DB_GENERAL.ADMI_TIPO_ROL.DESCRIPCION_TIPO_ROL%TYPE := 'Empleado';
    Lv_NumeroOrdenTrabajo       VARCHAR2(30);
    Ln_IdOficinaVendedor        NUMBER;
    Ln_IdOrdenTrabajoServicio   DB_COMERCIAL.INFO_ORDEN_TRABAJO.ID_ORDEN_TRABAJO%TYPE := 0;
    Ln_IdServicioNuevo          DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE := 0;
    Lr_ServicioHistorial        DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Ln_IdPrecioVentaServicio    NUMBER;
    Lv_DetalleMac               VARCHAR2(100) := 'MAC';
    Lv_DetEleValorMacExtender   VARCHAR2(100);
    Ln_Rownum                   NUMBER := 1;
    Lv_MsjError                 VARCHAR2(4000);
    Le_Exception                EXCEPTION;

    CURSOR Lc_GetInformacionServicio(Cn_IdServicioInternet DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT SERVICIO_INTERNET.ID_SERVICIO, SERVICIO_INTERNET.USR_VENDEDOR AS USR_VENDEDOR_SERVICIO_INTERNET, SERVICIO_INTERNET.PUNTO_FACTURACION_ID,
      PUNTO.ID_PUNTO, PUNTO.LOGIN, PUNTO.USR_VENDEDOR AS USR_VENDEDOR_PTO
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO_INTERNET
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO_INTERNET.PUNTO_ID
      WHERE SERVICIO_INTERNET.ID_SERVICIO = Cn_IdServicioInternet;
    Lr_GetInformacionServicio Lc_GetInformacionServicio%ROWTYPE;

    CURSOR Lc_GetProductoDualBand(Cv_NombreTecnicoDualBand DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE)
    IS
      SELECT PROD_DUAL_BAND.ID_PRODUCTO, PROD_DUAL_BAND.DESCRIPCION_PRODUCTO, 
      COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_PRECIOS_PROD.VALOR3,'^\d+')),0) AS PRECIO_VENTA_PRODUCTO
      FROM DB_COMERCIAL.ADMI_PRODUCTO PROD_DUAL_BAND
      INNER JOIN 
      (
        SELECT PARAM_DET.*
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_CAB
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET
        ON PARAM_DET.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
        WHERE PARAM_CAB.NOMBRE_PARAMETRO = Lv_NombreParamsServiciosMd
        AND PARAM_DET.VALOR1 = Lv_NombreParamPrecioProds
        AND PARAM_CAB.ESTADO = Lv_EstadoActivo
        AND PARAM_DET.ESTADO = Lv_EstadoActivo
      ) PARAM_PRECIOS_PROD
      ON COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_PRECIOS_PROD.VALOR2,'^\d+')),0) = PROD_DUAL_BAND.ID_PRODUCTO
      WHERE PROD_DUAL_BAND.NOMBRE_TECNICO = Cv_NombreTecnicoDualBand;

    Lr_GetProductoDualBand Lc_GetProductoDualBand%ROWTYPE;

    CURSOR Lc_GetDetElementoMacExtender(Cn_IdElementoClienteSt DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE)
    IS
      SELECT DET_ELE_MAC.DETALLE_VALOR
      FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET_ELE_MAC
      WHERE DET_ELE_MAC.ELEMENTO_ID = Cn_IdElementoClienteSt
      AND DET_ELE_MAC.DETALLE_NOMBRE = Lv_DetalleMac
      AND DET_ELE_MAC.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_NumeracionDoc(Cn_IdOficina NUMBER, Cv_Codigo VARCHAR2)
    IS
      SELECT ID_NUMERACION, (NUMERACION_UNO || '-' || NUMERACION_DOS || '-' || LPAD(SECUENCIA,7,'0')) NUMERACION, SECUENCIA
      FROM DB_COMERCIAL.ADMI_NUMERACION
      WHERE OFICINA_ID = Cn_IdOficina
      AND CODIGO = Cv_Codigo;

    CURSOR Lc_GetInfoVendedor(Cv_UsrVendedor VARCHAR2)
    IS
      SELECT
        OFICINA_ID
      FROM
        DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL
      WHERE
        ID_PERSONA_ROL = (
          SELECT
            MAX(IPER.ID_PERSONA_ROL)
          FROM
            DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
            JOIN DB_COMERCIAL.INFO_PERSONA IPE ON IPE.ID_PERSONA = IPER.PERSONA_ID
            JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER ON IER.ID_EMPRESA_ROL = IPER.EMPRESA_ROL_ID
            JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO IEG ON IEG.COD_EMPRESA = IER.EMPRESA_COD
            JOIN DB_GENERAL.ADMI_ROL AR ON AR.ID_ROL = IER.ROL_ID
            JOIN DB_GENERAL.ADMI_TIPO_ROL ATR ON AR.TIPO_ROL_ID = ATR.ID_TIPO_ROL
          WHERE
            IPE.LOGIN = Cv_UsrVendedor
            AND IPER.ESTADO = Lv_EstadoActivo
            AND IEG.PREFIJO = Lv_PrefijoEmpresa
            AND ATR.DESCRIPCION_TIPO_ROL = Lv_DescripcionEmpleado
            AND IPER.DEPARTAMENTO_ID IS NOT NULL
        );
    Lr_NumeracionDoc Lc_NumeracionDoc%ROWTYPE;
  BEGIN
    IF Pv_UsrCreacion IS NOT NULL THEN
      Lv_UsrCreacion := Pv_UsrCreacion;
    ELSE
      Lv_UsrCreacion := 'creaDualBand';
    END IF;

    IF Pv_IpCreacion IS NOT NULL THEN
      Lv_IpCreacion := Pv_IpCreacion;
    ELSE
      Lv_IpCreacion := '127.0.0.1';
    END IF;

    OPEN Lc_GetInformacionServicio(Pr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET);
    FETCH Lc_GetInformacionServicio INTO Lr_GetInformacionServicio;
    IF(Lc_GetInformacionServicio%NOTFOUND) THEN
      Lv_MsjError := 'No se pudo obtener la informaci¿n del servicio de Internet';
      RAISE Le_Exception;    
    END IF;
    CLOSE Lc_GetInformacionServicio;

    OPEN Lc_GetProductoDualBand(Pr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD);
    FETCH Lc_GetProductoDualBand INTO Lr_GetProductoDualBand;
    IF(Lc_GetProductoDualBand%NOTFOUND) THEN
      Lv_MsjError := 'No se ha podido obtener el producto Dual Band';
      RAISE Le_Exception;    
    END IF;
    CLOSE Lc_GetProductoDualBand;

    IF Pr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS IS NOT NULL AND Pr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS = 'SI' THEN
      Ln_IdPrecioVentaServicio := 0;
    ELSE
      Ln_IdPrecioVentaServicio := Lr_GetProductoDualBand.PRECIO_VENTA_PRODUCTO;
    END IF;

    Lv_UsrVendedor := Lr_GetInformacionServicio.USR_VENDEDOR_SERVICIO_INTERNET;
    IF Lv_UsrVendedor IS NULL THEN
      Lv_UsrVendedor := Lr_GetInformacionServicio.USR_VENDEDOR_PTO;
    END IF;

    OPEN Lc_GetInfoVendedor(Lv_UsrVendedor);
    FETCH Lc_GetInfoVendedor INTO Ln_IdOficinaVendedor;
    CLOSE Lc_GetInfoVendedor;

    IF Ln_IdOficinaVendedor IS NULL THEN
      Ln_IdOficinaVendedor := 58;
    END IF;

    OPEN Lc_NumeracionDoc(Ln_IdOficinaVendedor, 'ORD');
    FETCH Lc_NumeracionDoc INTO Lr_NumeracionDoc;
    IF(Lc_NumeracionDoc%FOUND) THEN
        Lv_NumeroOrdenTrabajo := Lr_NumeracionDoc.NUMERACION;
        UPDATE DB_COMERCIAL.ADMI_NUMERACION SET SECUENCIA= SECUENCIA + 1 WHERE ID_NUMERACION = Lr_NumeracionDoc.ID_NUMERACION;
    ELSE
      Lv_MsjError := 'No se pudo obtener la numeraci¿n para la orden de trabajo';
      RAISE Le_Exception;    
    END IF;
    CLOSE Lc_NumeracionDoc;

    Ln_IdOrdenTrabajoServicio := DB_COMERCIAL.SEQ_INFO_ORDEN_TRABAJO.NEXTVAL;
    INSERT
    INTO DB_COMERCIAL.INFO_ORDEN_TRABAJO
    (
      ID_ORDEN_TRABAJO,
      NUMERO_ORDEN_TRABAJO,
      PUNTO_ID,
      FE_CREACION,
      USR_CREACION,
      IP_CREACION,
      TIPO_ORDEN,
      OFICINA_ID,
      ESTADO
    )
    VALUES
    (
      Ln_IdOrdenTrabajoServicio,
      Lv_NumeroOrdenTrabajo,
      Lr_GetInformacionServicio.ID_PUNTO,
      SYSDATE,
      Lv_UsrCreacion,
      Lv_IpCreacion,
      'N',
      Ln_IdOficinaVendedor,
      'Activa'
    );

    Ln_IdServicioNuevo := DB_COMERCIAL.SEQ_INFO_SERVICIO.NEXTVAL;
    INSERT
    INTO DB_COMERCIAL.INFO_SERVICIO
    (
      ID_SERVICIO,
      PUNTO_ID,
      PRODUCTO_ID,
      ORDEN_TRABAJO_ID,
      ES_VENTA,
      CANTIDAD,
      PRECIO_VENTA,
      FRECUENCIA_PRODUCTO,
      MESES_RESTANTES,
      DESCRIPCION_PRESENTA_FACTURA,
      PRECIO_FORMULA,
      ESTADO,
      FE_CREACION,
      USR_CREACION,
      IP_CREACION,
      PUNTO_FACTURACION_ID,
      TIPO_ORDEN,
      USR_VENDEDOR
    )
    VALUES
    (
      Ln_IdServicioNuevo,
      Lr_GetInformacionServicio.ID_PUNTO,
      Lr_GetProductoDualBand.ID_PRODUCTO,
      Ln_IdOrdenTrabajoServicio,
      'S',
      1,
      Ln_IdPrecioVentaServicio,
      1,
      1,
      Lr_GetProductoDualBand.DESCRIPCION_PRODUCTO,
      Ln_IdPrecioVentaServicio,
      Pr_InfoCreacionServDualBand.ESTADO_SERVICIO,
      SYSDATE,
      Lv_UsrCreacion,
      Lv_IpCreacion,
      Lr_GetInformacionServicio.PUNTO_FACTURACION_ID,
      'N',
      Lv_UsrVendedor
    );

    Lr_ServicioHistorial              := NULL;
    Lr_ServicioHistorial.SERVICIO_ID  := Ln_IdServicioNuevo;
    Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
    Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
    Lr_ServicioHistorial.ESTADO       := 'Pendiente';
    Lr_ServicioHistorial.OBSERVACION  := 'Se creo el servicio ' || Pr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
    IF Lv_MsjError IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    Lr_ServicioHistorial              := NULL;
    Lr_ServicioHistorial.SERVICIO_ID  := Ln_IdServicioNuevo;
    Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
    Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
    Lr_ServicioHistorial.ESTADO       := Pr_InfoCreacionServDualBand.ESTADO_SERVICIO;
    Lr_ServicioHistorial.OBSERVACION  := Pr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL;
    Lr_ServicioHistorial.ACCION       := Pr_InfoCreacionServDualBand.ACCION_HISTORIAL;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
    IF Lv_MsjError IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    Lr_ServicioHistorial              := NULL;
    Lr_ServicioHistorial.SERVICIO_ID  := Ln_IdServicioNuevo;
    Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
    Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
    Lr_ServicioHistorial.ESTADO       := Pr_InfoCreacionServDualBand.ESTADO_SERVICIO;
    Lr_ServicioHistorial.OBSERVACION  := '<br>Se ha creado el servicio ' || Lr_GetProductoDualBand.DESCRIPCION_PRODUCTO || ' como producto adicional';
    Lr_ServicioHistorial.ACCION       := NULL;
    DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
    IF Lv_MsjError IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    INSERT
    INTO DB_COMERCIAL.INFO_SERVICIO_TECNICO
    (
      ID_SERVICIO_TECNICO,
      SERVICIO_ID,
      TIPO_ENLACE,
      ULTIMA_MILLA_ID,
      ELEMENTO_CLIENTE_ID,
      INTERFACE_ELEMENTO_CLIENTE_ID
    )
    VALUES
    (
      DB_COMERCIAL.SEQ_INFO_SERVICIO_TECNICO.NEXTVAL,
      Ln_IdServicioNuevo,
      'PRINCIPAL',
      1,
      Pn_IdElementoClienteSt,
      Pn_IdInterfaceEleClienteSt
    );

    IF Pn_IdElementoClienteSt IS NOT NULL 
      AND (Pr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD = 'EXTENDER_DUAL_BAND' 
           OR Pr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD = 'WDB_Y_EDB') THEN
      OPEN Lc_GetDetElementoMacExtender(Pn_IdElementoClienteSt);
      FETCH Lc_GetDetElementoMacExtender INTO Lv_DetEleValorMacExtender;
      CLOSE Lc_GetDetElementoMacExtender;

      IF Lv_DetEleValorMacExtender IS NOT NULL THEN
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_INSERT_SERVICIO_PROD_CARACT( Ln_IdServicioNuevo,
                                                                              Lr_GetProductoDualBand.ID_PRODUCTO,
                                                                              Lv_EstadoActivo,
                                                                              'MAC',
                                                                              Lv_DetEleValorMacExtender,
                                                                              Lv_EstadoActivo,
                                                                              Lv_UsrCreacion,
                                                                              Lv_MsjError
                                                                            );
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      END IF;
    END IF;

    Pv_Status               := 'OK';
    Pn_IdServicioNuevo      := Ln_IdServicioNuevo; 
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status           := 'ERROR';
    Pv_MsjError         := Lv_MsjError;
    Pn_IdServicioNuevo  := NULL;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND',
                                            Lv_MsjError,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status           := 'ERROR';
    Pv_MsjError         := 'No se ha podido crear correctamente el servicio Dual Band';
    Pn_IdServicioNuevo  := NULL;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND',
                                            'Error al crear servicio Dual Band' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || 
                                            ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CREA_SERVICIO_DUAL_BAND;

  PROCEDURE P_EJECUTA_CAMBIOPLAN_DUAL_BAND(
    Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
    Pn_IdPlanAnterior       IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pn_IdPlanNuevo          IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pv_ObsProcesoEjecutante IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_IpCreacion           IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2)
  AS
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Lcl_Observacion                 CLOB;
    Le_Exception                    EXCEPTION;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_PlanAnteriorConDetalleWdb    VARCHAR2(2);
    Lv_PlanAnteriorConDetalleEdb    VARCHAR2(2);
    Lv_PlanNuevoConDetalleWdb       VARCHAR2(2);
    Lv_PlanNuevoConDetalleEdb       VARCHAR2(2);
    Lr_RegClienteAVerificar         DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos;
    Lr_InfoCreacionServDualBand     DB_INFRAESTRUCTURA.INKG_TYPES.Lr_InfoCreacionServicioDb;
    Lv_EstadoActivo                 VARCHAR2(6)  := 'Activo';
    Lv_EstadoEliminado              VARCHAR2(9)  := 'Eliminado';
    Lv_NombreTecnicoWdb             VARCHAR2(14) := 'WIFI_DUAL_BAND';
    Lv_NombreTecnicoEdb             VARCHAR2(18) := 'EXTENDER_DUAL_BAND';
    Lv_NombreTecnicoWdbyEdb         VARCHAR2(18) := 'WDB_Y_EDB';
    Ln_IdItemSmartWifi              DB_COMERCIAL.INFO_PLAN_DET.ID_ITEM%TYPE;
    Ln_IdElementoSiguiente          DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdInterfaceEleSiguiente      DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
    Ln_Rownum                       NUMBER := 1;
    Lv_ModelosOltEquiposdb          VARCHAR2(29) := 'MODELOS_OLT_EQUIPOS_DUAL_BAND';
    Lv_PermitidoWYExtenderEnPlanes  VARCHAR2(300);
    Lv_TecnologiaPermitidaDb        VARCHAR2(2);
    Ln_IdDetSolCaractSolCambioOnt   DB_COMERCIAL.INFO_DETALLE_SOL_CARACT.ID_SOLICITUD_CARACTERISTICA%TYPE;
    Lv_CaractMotivoCreacionSol      VARCHAR2(26) := 'MOTIVO_CREACION_SOLICITUD';
    Lv_ValorMotivoCreacionSol       VARCHAR2(32) := 'CAMBIO ONT POR AGREGAR EXTENDER';
    Lr_ParametroDetalleBusqueda     DB_GENERAL.ADMI_PARAMETRO_DET%ROWTYPE;
    Lr_RespuestaBusqTecnologiaDb    DB_GENERAL.ADMI_PARAMETRO_DET%ROWTYPE;
    Lrf_BusquedaTecnologiaDb        SYS_REFCURSOR;
    CURSOR Lc_GetServAdicDualBandValido( Cn_IdPunto DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE,
                                          Cn_ElementoClienteId DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID%TYPE,
                                          Cn_InterfaceElemClienteId DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID%TYPE,
                                          Cv_NombreTecnicoProducto DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE)
    IS
      SELECT *
      FROM (
              SELECT SERVICIO.ID_SERVICIO
              FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
              INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD
              ON PROD.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
              INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ST
              ON ST.SERVICIO_ID = SERVICIO.ID_SERVICIO
              WHERE SERVICIO.PUNTO_ID = Cn_IdPunto
              AND SERVICIO.ESTADO = Lv_EstadoActivo
              AND ST.ELEMENTO_CLIENTE_ID = Cn_ElementoClienteId
              AND ST.INTERFACE_ELEMENTO_CLIENTE_ID = Cn_InterfaceElemClienteId
              AND PROD.NOMBRE_TECNICO = Cv_NombreTecnicoProducto
              AND SERVICIO.PUNTO_FACTURACION_ID IS NOT NULL
              AND SERVICIO.MESES_RESTANTES IS NOT NULL
              ORDER BY SERVICIO.FE_CREACION DESC
            )
      WHERE ROWNUM = Ln_Rownum;   

    CURSOR Lc_GetInfoElementoEnlaceDer(Cn_InterfaceElementoIniId DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE)
    IS
      SELECT ENLACE.ID_ENLACE, ELEMENTO_FIN.ID_ELEMENTO AS ID_ELEMENTO_FIN, INTERFACE_ELE_FIN.ID_INTERFACE_ELEMENTO AS ID_INTERFACE_ELE_FIN
      FROM DB_INFRAESTRUCTURA.INFO_ENLACE ENLACE
      INNER JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_ELE_FIN
      ON INTERFACE_ELE_FIN.ID_INTERFACE_ELEMENTO = ENLACE.INTERFACE_ELEMENTO_FIN_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_FIN
      ON ELEMENTO_FIN.ID_ELEMENTO = INTERFACE_ELE_FIN.ELEMENTO_ID
      WHERE ENLACE.INTERFACE_ELEMENTO_INI_ID = Cn_InterfaceElementoIniId
      AND ENLACE.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetPrecioPlan(Cn_IdPlan NUMBER) 
    IS
      SELECT SUM(PLAN_DET.CANTIDAD_DETALLE * PLAN_DET.PRECIO_ITEM) PRECIO_PLAN
      FROM DB_COMERCIAL.INFO_PLAN_CAB PLAN_CAB
      INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
      ON PLAN_DET.PLAN_ID = PLAN_CAB.ID_PLAN
      WHERE PLAN_CAB.ID_PLAN = Cn_IdPlan
      AND PLAN_DET.ESTADO <> Lv_EstadoEliminado;

    LclInicioDetalleSolsEliminadas  CLOB := '<b>Detalle de solicitudes asociadas a equipos Dual Band que han sido eliminadas automáticamente</b>' ||
                                            '<br />' ||
                                              '<table cellpadding="5">' ||
                                                '<tr>' ||
                                                  '<td valign="center">' ||
                                                    '<div>' ||
                                                      '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                        '<thead>' ||
                                                          '<tr>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Detalle Wifi Dual Band</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Detalle Extender Dual Band</b></th>' ||
                                                          '</tr>' ||
                                                        '</thead>' ||
                                                        '<tbody>';                                                   
    Lcl_DetalleSolsEliminadas       CLOB;
    LclFinDetalleSolsEliminadas     CLOB :=           '</tbody>' ||
                                                      '</table>' ||
                                                    '</div>' ||
                                                  '</td>' ||
                                                '</tr>' ||
                                              '</table>';
    Lv_ServicioSinEquipoWdb     VARCHAR2(2);                                          
    Lv_ServicioSinEquipoEdb     VARCHAR2(2);
    Lv_CreaSolAgregarEquipo     VARCHAR2(2);
    Lv_CreaSolCaractWdb         VARCHAR2(2);
    Lv_CreaSolCaractEdb         VARCHAR2(2);
    Lv_CreaServicioAdicionalWdb VARCHAR2(2);
    Lv_ObsProcesoEjecutante     VARCHAR2(4000);
    Ln_IdServicioNuevoWdb       DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioNuevoEdb       DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioNuevoWdbyEdb   DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioWdbAdic        DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioEdbAdic        DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioEdbCancelXWyAp DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Lv_ServicioDbEsGratis       VARCHAR2(2);
    Lv_CreaServicioWdbAdic      VARCHAR2(2);
    Lv_CreaServicioEdbAdic      VARCHAR2(2);
    Ln_PrecioPlanAnterior       DB_COMERCIAL.INFO_PLAN_DET.PRECIO_ITEM%TYPE := 0;
    Ln_PrecioPlanNuevo          DB_COMERCIAL.INFO_PLAN_DET.PRECIO_ITEM%TYPE := 0;
  BEGIN    
    IF Pv_ObsProcesoEjecutante IS NOT NULL THEN
      Lv_ObsProcesoEjecutante := Pv_ObsProcesoEjecutante;
    ELSE
      Lv_ObsProcesoEjecutante := ' por cambio de plan';
    END IF;

    IF Pv_IpCreacion IS NULL THEN
      Lv_IpCreacion  := '127.0.0.1';
    ELSE
      Lv_IpCreacion := Pv_IpCreacion;
    END IF;
    IF Pv_UsrCreacion IS NULL THEN
      Lv_UsrCreacion  := 'ejecutaCPlanDb';
    ELSE
      Lv_UsrCreacion := Pv_UsrCreacion;
    END IF;

    --Se verifica si la tecnología es permitida para equipos Dual Band
    Lr_RespuestaBusqTecnologiaDb        := NULL;
    Lr_ParametroDetalleBusqueda         := NULL;
    Lr_ParametroDetalleBusqueda.VALOR1  := Lv_ModelosOltEquiposdb;
    Lr_ParametroDetalleBusqueda.VALOR2  := Pr_RegClienteAVerificar.NOMBRE_MARCA_OLT;
    Lr_ParametroDetalleBusqueda.VALOR3  := Pr_RegClienteAVerificar.NOMBRE_MODELO_OLT;
    Lr_ParametroDetalleBusqueda.VALOR4  := NULL;
    Lr_ParametroDetalleBusqueda.VALOR5  := NULL;
    Lrf_BusquedaTecnologiaDb            := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_PARAMS_SERVICIOS_MD(Lr_ParametroDetalleBusqueda);
    FETCH Lrf_BusquedaTecnologiaDb INTO Lr_RespuestaBusqTecnologiaDb;
    IF Lr_RespuestaBusqTecnologiaDb.ID_PARAMETRO_DET IS NOT NULL THEN 
      Lv_TecnologiaPermitidaDb          := 'SI';
      Lv_PermitidoWYExtenderEnPlanes    := Lr_RespuestaBusqTecnologiaDb.VALOR4;
    ELSE
      Lv_TecnologiaPermitidaDb := 'NO';
    END IF;

    IF Lv_TecnologiaPermitidaDb = 'SI' AND Lv_PermitidoWYExtenderEnPlanes = 'SI' THEN
      --Se verifica los equipos del servicio de Internet
      DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_EQUIPOS_W_Y_EXTENDER(  'SI', 
                                                                  'SI', 
                                                                  Pr_RegClienteAVerificar.NOMBRE_MARCA_OLT, 
                                                                  Pr_RegClienteAVerificar.NOMBRE_MODELO_OLT, 
                                                                  Pr_RegClienteAVerificar.NOMBRE_MODELO_ONT, 
                                                                  Pr_RegClienteAVerificar.ID_INTERFACE_ONT, 
                                                                  Lv_Status, 
                                                                  Lv_MsjError, 
                                                                  Lv_ServicioSinEquipoWdb, 
                                                                  Lv_ServicioSinEquipoEdb,
                                                                  Ln_IdElementoSiguiente,
                                                                  Ln_IdInterfaceEleSiguiente);
      IF Lv_Status = 'ERROR' THEN
        RAISE Le_Exception;
      END IF; 

        --Se verifica los detalles del plan anterior del servicio
      DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_DET_PLAN_W_Y_EXTENDER( Pn_IdPlanAnterior, 
                                                                  Lv_Status, 
                                                                  Lv_MsjError, 
                                                                  Lv_PlanAnteriorConDetalleWdb, 
                                                                  Lv_PlanAnteriorConDetalleEdb);
      IF Lv_Status = 'ERROR' THEN
        RAISE Le_Exception;
      END IF;


      --Se verifica los detalles del plan nuevo del servicio
      DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_DET_PLAN_W_Y_EXTENDER( Pn_IdPlanNuevo, 
                                                                  Lv_Status, 
                                                                  Lv_MsjError, 
                                                                  Lv_PlanNuevoConDetalleWdb, 
                                                                  Lv_PlanNuevoConDetalleEdb);
      IF Lv_Status = 'ERROR' THEN
        RAISE Le_Exception;
      END IF;

      --Se verifica si el nuevo plan tiene el detalle del Wifi Dual Band
      IF Lv_PlanNuevoConDetalleWdb = 'SI' THEN
        --Si el nuevo plan tiene el detalle del Wifi Dual Band
        --Se verifica si el Wifi Dual Band está a nivel de equipos del servicio
        IF Lv_ServicioSinEquipoWdb = 'SI' THEN
          --El servicio no tiene el Wifi Dual Band en la data técnica
          --Se creará la solicitud de agregar equipo con el detalle del Wifi Dual Band
          Lv_CreaSolAgregarEquipo := 'SI';
          Lv_CreaSolCaractWdb     := 'SI';
        END IF;
        --Se cancelarán/eliminarán lógicamente todos los servicios adicionales Wifi Dual Band
        --Si tiene el equipo Wifi Dual Band, se elimina para regularizar aquellas solicitudes que quedaron abiertas y ya no aplican
        --Si no tiene el equipo Wifi Dual Band, se elimina solicitudes que están abiertas ya que se creará una nueva
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                              Pr_RegClienteAVerificar.ID_PUNTO,
                                                                              Lv_NombreTecnicoWdb,
                                                                              NULL,
                                                                              NULL,
                                                                              NULL,
                                                                              Lv_ObsProcesoEjecutante,
                                                                              Lv_UsrCreacion,
                                                                              Lv_IpCreacion,
                                                                              Lv_Status,
                                                                              Lv_MsjError
                                                                            );
        IF Lv_Status = 'ERROR' THEN
          RAISE Le_Exception;
        END IF;
      ELSE
        --Si el nuevo plan no tiene el detalle del wifi Dual Band
        --Se verifica si el Wifi Dual Band está a nivel de equipos del servicio
        IF Lv_ServicioSinEquipoWdb = 'NO' THEN
          --El servicio si tiene el Wifi Dual Band en la data técnica
          --Se obtiene el último servicio adicional Wifi Dual Band válido que está relacionado al equipo Wifi Dual Band
          OPEN Lc_GetServAdicDualBandValido( Pr_RegClienteAVerificar.ID_PUNTO,
                                              Pr_RegClienteAVerificar.ID_ONT, 
                                              Pr_RegClienteAVerificar.ID_INTERFACE_ONT, 
                                              Lv_NombreTecnicoWdb);
          FETCH Lc_GetServAdicDualBandValido INTO Ln_IdServicioWdbAdic;
          CLOSE Lc_GetServAdicDualBandValido;

          IF Ln_IdServicioWdbAdic IS NOT NULL THEN
            --Existe un servicio adicional Wifi Dual Band válido con los datos de los equipos
            --Se elimina el resto de servicios adicionales Wifi Dual Band que existieran
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                                  Pr_RegClienteAVerificar.ID_PUNTO,
                                                                                  Lv_NombreTecnicoWdb,
                                                                                  NULL,
                                                                                  Ln_IdServicioWdbAdic,
                                                                                  NULL,
                                                                                  Lv_ObsProcesoEjecutante,
                                                                                  Lv_UsrCreacion,
                                                                                  Lv_IpCreacion,
                                                                                  Lv_Status,
                                                                                  Lv_MsjError
                                                                                );
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
          ELSE
            --No existe un servicio adicional Wifi Dual Band válido
            --Se verifica si el plan anterior tenía el detalle del Wifi Dual Band
            IF Lv_PlanAnteriorConDetalleWdb = 'SI' THEN
              --El plan anterior tenía el detalle Wifi Dual Band
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                                    Pr_RegClienteAVerificar.ID_PUNTO,
                                                                                    Lv_NombreTecnicoWdb,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    NULL,
                                                                                    Lv_ObsProcesoEjecutante,
                                                                                    Lv_UsrCreacion,
                                                                                    Lv_IpCreacion,
                                                                                    Lv_Status,
                                                                                    Lv_MsjError
                                                                                  );
              IF Lv_Status = 'ERROR' THEN
                RAISE Le_Exception;
              END IF;
              Lv_CreaServicioWdbAdic := 'SI';
            END IF;
          END IF;
        END IF;
      END IF;

      --Se verifica si el nuevo plan tiene el detalle del Extender Dual Band
      IF Lv_PlanNuevoConDetalleEdb = 'SI' THEN
        --Si el nuevo plan tiene el detalle del Extender Dual Band
        --Se verifica si el Extender Dual Band está a nivel de equipos del servicio
        IF Lv_ServicioSinEquipoEdb = 'NO' THEN
          --El servicio si tiene el Extender Dual Band en la data técnica por lo que se valida si pertenece a un servicio adicional
          OPEN Lc_GetServAdicDualBandValido( Pr_RegClienteAVerificar.ID_PUNTO,
                                              Ln_IdElementoSiguiente, 
                                              Ln_IdInterfaceEleSiguiente, 
                                              Lv_NombreTecnicoEdb);
          FETCH Lc_GetServAdicDualBandValido INTO Ln_IdServicioEdbAdic;
          CLOSE Lc_GetServAdicDualBandValido;
          IF Ln_IdServicioEdbAdic IS NOT NULL THEN
            --El equipo pertenece a un servicio Extender Dual Band adicional, por lo que se elimina dicho servicio,
            --ya que ahora dicho extender será el que pasará a formar parte del plan
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                                  Pr_RegClienteAVerificar.ID_PUNTO,
                                                                                  Lv_NombreTecnicoEdb,
                                                                                  Ln_IdServicioEdbAdic,
                                                                                  NULL,
                                                                                  NULL,
                                                                                  Lv_ObsProcesoEjecutante,
                                                                                  Lv_UsrCreacion,
                                                                                  Lv_IpCreacion,
                                                                                  Lv_Status,
                                                                                  Lv_MsjError
                                                                                );
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        ELSE
          --El Extender Dual Band no está en la data técnica
          --Se creará la solicitud de agregar equipo con el detalle del Extender Dual Band
          Lv_CreaSolAgregarEquipo := 'SI';
          Lv_CreaSolCaractEdb     := 'SI';
        END IF;

      ELSE
        --Si el nuevo plan no tiene el detalle del Extender Dual Band
        --Se verifica si el Extender Dual Band está a nivel de equipos del servicio
        IF Lv_ServicioSinEquipoEdb = 'NO' THEN
          --Si el servicio si tiene el equipo Extender Dual Band
          --Se verifica si algún servicio adicional Extender Dual Band está asociado al equipo Extender
            OPEN Lc_GetServAdicDualBandValido( Pr_RegClienteAVerificar.ID_PUNTO,
                                                Ln_IdElementoSiguiente, 
                                                Ln_IdInterfaceEleSiguiente, 
                                                Lv_NombreTecnicoEdb);
            FETCH Lc_GetServAdicDualBandValido INTO Ln_IdServicioEdbAdic;
            CLOSE Lc_GetServAdicDualBandValido;


          --Se verifica si el plan anterior tenía el detalle Extender Dual Band
          IF Lv_PlanAnteriorConDetalleEdb = 'SI' THEN
            --Si el plan anterior si tiene el detalle Extender Dual Band
            IF Ln_IdServicioEdbAdic IS NULL THEN
              Lv_CreaServicioEdbAdic    := 'SI';
            END IF;
          ELSE
            --Si el plan anterior no tiene el detalle Extender Dual Band
            IF Ln_IdServicioEdbAdic IS NOT NULL THEN
              --Si existe un servicio adicional Extender Dual Band, se guarda el ID_SERVICIO por si se tuviera que cancelar dicho servicio
              --por creación de W + AP
              Ln_IdServicioEdbCancelXWyAp := Ln_IdServicioEdbAdic;
            END IF;
          END IF;
        ELSE
          Lv_MsjError := '';
        END IF;
      END IF;

      IF Lv_CreaServicioWdbAdic = 'SI' OR Lv_CreaServicioEdbAdic = 'SI' THEN
        Lv_ServicioDbEsGratis   := 'NO';
        OPEN  Lc_GetPrecioPlan(Pn_IdPlanAnterior);
        FETCH Lc_GetPrecioPlan INTO Ln_PrecioPlanAnterior;
        CLOSE Lc_GetPrecioPlan;

        OPEN  Lc_GetPrecioPlan(Pn_IdPlanNuevo);
        FETCH Lc_GetPrecioPlan INTO Ln_PrecioPlanNuevo;
        CLOSE Lc_GetPrecioPlan;

        IF Ln_PrecioPlanAnterior IS NULL OR Ln_PrecioPlanNuevo IS NULL THEN
          Lv_MsjError := 'No se han podido obtener de manera correcta los precios de los planes anterior y nuevo';
          RAISE Le_Exception;
        END IF;

        IF Ln_PrecioPlanNuevo >= Ln_PrecioPlanAnterior THEN
          Lv_ServicioDbEsGratis   := 'SI';
        END IF;

        IF Lv_CreaServicioWdbAdic = 'SI' AND Lv_CreaServicioEdbAdic = 'SI' THEN
          --En caso de que se necesite crear un adicional tanto para el Wifi Dual Band como para Extender Dual Band, se deberá crear un servicio W+AP
          --La información técnica que se le pasará a la creación del servicio, será la del Extender dual Band
          Lr_InfoCreacionServDualBand                           := NULL;
          Lr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET      := Pr_RegClienteAVerificar.ID_SERVICIO;
          Lr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD       := Lv_NombreTecnicoWdbyEdb;
          Lr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS        := Lv_ServicioDbEsGratis;
          Lr_InfoCreacionServDualBand.ESTADO_SERVICIO           := Lv_EstadoActivo;
          Lr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL     := 'Se confirmo el servicio';
          Lr_InfoCreacionServDualBand.ACCION_HISTORIAL          := 'confirmarServicio';
          Lr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE    := Lv_ObsProcesoEjecutante;
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND(
                                                                            Lr_InfoCreacionServDualBand,
                                                                            Ln_IdElementoSiguiente,
                                                                            Ln_IdInterfaceEleSiguiente,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError,
                                                                            Ln_IdServicioNuevoWdbyEdb);
        ELSIF Lv_CreaServicioWdbAdic = 'SI' THEN
          --Si el precio del plan nuevo es menor que el precio del plan anterior se debe crear un servicio W+AP y crear la solicitud de agregar equipo
          --para agregar el extender
          IF Ln_PrecioPlanNuevo < Ln_PrecioPlanAnterior THEN
            IF Ln_IdServicioEdbCancelXWyAp IS NOT NULL THEN
              --Existe un servicio adicional Extender Dual Band, por lo que al crearse el servicio adicional W+AP, el servicio Extender Dual Band
              --adicional deberá cancelarse sin eliminar la data técnica y el W+AP deberá pasar a estado Activo sin creación de solicitud 
              --para agregar equipo
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                                  Pr_RegClienteAVerificar.ID_PUNTO,
                                                                                  Lv_NombreTecnicoEdb,
                                                                                  Ln_IdServicioEdbCancelXWyAp,
                                                                                  NULL,
                                                                                  NULL,
                                                                                  Lv_ObsProcesoEjecutante,
                                                                                  Lv_UsrCreacion,
                                                                                  Lv_IpCreacion,
                                                                                  Lv_Status,
                                                                                  Lv_MsjError
                                                                                );
              IF Lv_Status = 'ERROR' THEN
                RAISE Le_Exception;
              END IF;
              Lr_InfoCreacionServDualBand                           := NULL;
              Lr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET      := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD       := Lv_NombreTecnicoWdbyEdb;
              Lr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS        := Lv_ServicioDbEsGratis;
              Lr_InfoCreacionServDualBand.ESTADO_SERVICIO           := Lv_EstadoActivo;
              Lr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL     := 'Se confirmo el servicio';
              Lr_InfoCreacionServDualBand.ACCION_HISTORIAL          := 'confirmarServicio';
              Lr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE    := Lv_ObsProcesoEjecutante;
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND(
                                                                                Lr_InfoCreacionServDualBand,
                                                                                NULL,
                                                                                NULL,
                                                                                Lv_UsrCreacion,
                                                                                Lv_IpCreacion,
                                                                                Lv_Status,
                                                                                Lv_MsjError,
                                                                                Ln_IdServicioNuevoWdbyEdb);
            ELSE
              --No existe un servicio adicional Extender Dual Band, por lo que deberá crearse el servicio W+AP en estado PrePlanificada, para permitir
              --agregar el Extender Dual Band a través de una SOLICITUD AGREGAR EQUIPO
              Lr_InfoCreacionServDualBand                           := NULL;
              Lr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET      := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD       := Lv_NombreTecnicoWdbyEdb;
              Lr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS        := Lv_ServicioDbEsGratis;
              Lr_InfoCreacionServDualBand.ESTADO_SERVICIO           := 'PrePlanificada';
              Lr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL     := 'Servicio pasa a estado PrePlanificada. '
                                                                       || 'Por favor agregue el equipo faltante para activar el servicio';
              Lr_InfoCreacionServDualBand.ACCION_HISTORIAL          := NULL;
              Lr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE    := Lv_ObsProcesoEjecutante;
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND(
                                                                                Lr_InfoCreacionServDualBand,
                                                                                NULL,
                                                                                NULL,
                                                                                Lv_UsrCreacion,
                                                                                Lv_IpCreacion,
                                                                                Lv_Status,
                                                                                Lv_MsjError,
                                                                                Ln_IdServicioNuevoWdbyEdb);
              IF Lv_Status = 'ERROR' THEN
                RAISE Le_Exception;
              END IF;

              Lr_RegClienteAVerificar                     := NULL;
              Lr_RegClienteAVerificar.ID_SERVICIO         := Ln_IdServicioNuevoWdbyEdb;
              Lr_RegClienteAVerificar.TIPO_ORDEN          := 'N';
              Lr_RegClienteAVerificar.ESTADO_SERVICIO     := 'PrePlanificada';
              Lr_RegClienteAVerificar.ID_PUNTO            := Pr_RegClienteAVerificar.ID_PUNTO;
              Lr_RegClienteAVerificar.LOGIN               := Pr_RegClienteAVerificar.LOGIN;
              Lr_RegClienteAVerificar.CLIENTE             := Pr_RegClienteAVerificar.CLIENTE;
              Lr_RegClienteAVerificar.NOMBRE_JURISDICCION := Pr_RegClienteAVerificar.NOMBRE_JURISDICCION;
              Lr_RegClienteAVerificar.ID_PLAN             := NULL;
              Lr_RegClienteAVerificar.NOMBRE_PLAN         := NULL;
              Lr_RegClienteAVerificar.ID_OLT              := NULL;
              Lr_RegClienteAVerificar.NOMBRE_OLT          := NULL;
              Lr_RegClienteAVerificar.NOMBRE_MARCA_OLT    := NULL;
              Lr_RegClienteAVerificar.NOMBRE_MODELO_OLT   := NULL;
              Lr_RegClienteAVerificar.ID_ONT              := NULL;
              Lr_RegClienteAVerificar.NOMBRE_ONT          := NULL;
              Lr_RegClienteAVerificar.NOMBRE_MODELO_ONT   := NULL;
              Lr_RegClienteAVerificar.ID_INTERFACE_ONT    := NULL;
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SOL_AGREGAR_DUAL_BAND(  Lr_RegClienteAVerificar,
                                                                                    Lr_RegClienteAVerificar.ID_SERVICIO,
                                                                                    'NO',
                                                                                    'SI',
                                                                                    Lv_UsrCreacion,
                                                                                    Lv_IpCreacion,
                                                                                    Lv_Status, 
                                                                                    Lv_MsjError);
            END IF;
          ELSE
            Lr_InfoCreacionServDualBand                           := NULL;
            Lr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET      := Pr_RegClienteAVerificar.ID_SERVICIO;
            Lr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD       := Lv_NombreTecnicoWdb;
            Lr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS        := Lv_ServicioDbEsGratis;
            Lr_InfoCreacionServDualBand.ESTADO_SERVICIO           := Lv_EstadoActivo;
            Lr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL     := 'Se confirmo el servicio';
            Lr_InfoCreacionServDualBand.ACCION_HISTORIAL          := 'confirmarServicio';
            Lr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE    := Lv_ObsProcesoEjecutante;
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND(
                                                                              Lr_InfoCreacionServDualBand,
                                                                              Pr_RegClienteAVerificar.ID_ONT,
                                                                              Pr_RegClienteAVerificar.ID_INTERFACE_ONT,
                                                                              Lv_UsrCreacion,
                                                                              Lv_IpCreacion,
                                                                              Lv_Status,
                                                                              Lv_MsjError,
                                                                              Ln_IdServicioNuevoWdb);
          END IF;
        ELSIF Lv_CreaServicioEdbAdic = 'SI' THEN
          Lr_InfoCreacionServDualBand                           := NULL;
          Lr_InfoCreacionServDualBand.ID_SERVICIO_INTERNET      := Pr_RegClienteAVerificar.ID_SERVICIO;
          Lr_InfoCreacionServDualBand.NOMBRE_TECNICO_PROD       := Lv_NombreTecnicoEdb;
          Lr_InfoCreacionServDualBand.SERVICIO_ES_GRATIS        := Lv_ServicioDbEsGratis;
          Lr_InfoCreacionServDualBand.ESTADO_SERVICIO           := Lv_EstadoActivo;
          Lr_InfoCreacionServDualBand.OBSERVACION_HISTORIAL     := 'Se confirmo el servicio';
          Lr_InfoCreacionServDualBand.ACCION_HISTORIAL          := 'confirmarServicio';
          Lr_InfoCreacionServDualBand.OBSERVACION_EJECUTANTE    := Lv_ObsProcesoEjecutante;
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SERVICIO_DUAL_BAND(
                                                                            Lr_InfoCreacionServDualBand,
                                                                            Ln_IdElementoSiguiente,
                                                                            Ln_IdInterfaceEleSiguiente,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError,
                                                                            Ln_IdServicioNuevoEdb);
        END IF;
        IF Lv_Status = 'ERROR' THEN
          RAISE Le_Exception;
        END IF;
      END IF;

      IF Lv_CreaSolAgregarEquipo = 'SI' THEN
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SOL_AGREGAR_DUAL_BAND(Pr_RegClienteAVerificar,
                                                                            Pr_RegClienteAVerificar.ID_SERVICIO,
                                                                            Lv_CreaSolCaractWdb,
                                                                            Lv_CreaSolCaractEdb,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status, 
                                                                            Lv_MsjError);

        IF Lv_Status = 'ERROR' THEN
          RAISE Le_Exception;
        END IF;
      ELSE
        --Servicios cuyos planes no incluyen productos Dual Band, por lo que se procede a verificar si no tiene SmartWifi y si no tiene, 
        --se procede a eliminar las solicitudes abiertas en caso que existieran
        Ln_IdItemSmartWifi  := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ITEM_PROD_EN_PLAN(Pn_IdPlanNuevo, 
                                                                                    NULL, 
                                                                                    NULL, 
                                                                                    'Renta SmartWiFi (Aironet 1602)');

        Ln_IdDetSolCaractSolCambioOnt   := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ID_DET_SOL_CARACT_VALIDA( NULL, 
                                                                                                        Pr_RegClienteAVerificar.ID_SERVICIO, 
                                                                                                        'ID_SERVICIO', 
                                                                                                        Lv_CaractMotivoCreacionSol, 
                                                                                                        Lv_ValorMotivoCreacionSol);

        IF Ln_IdItemSmartWifi IS NULL AND Ln_IdDetSolCaractSolCambioOnt IS NULL THEN 
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(   Pr_RegClienteAVerificar.ID_SERVICIO, 
                                                                                  NULL, 
                                                                                  Lv_Status, 
                                                                                  Lv_MsjError, 
                                                                                  Lcl_DetalleSolsEliminadas );
          IF Lv_Status                           = 'OK' THEN
            IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
              Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
              Lr_ServicioHistorial              := NULL;
              Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
              Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
              Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
              Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
              Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
              DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
              IF Lv_MsjError IS NOT NULL THEN
                RAISE Le_Exception;
              END IF;
            END IF;
          ELSE
            RAISE Le_Exception;
          END IF;
        END IF;
      END IF;
    ELSIF Lv_TecnologiaPermitidaDb = 'SI' THEN
      --Se eliminan servicios Wifi Dual Band en caso de que existan de manera errónea para ZTE
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                            Pr_RegClienteAVerificar.ID_PUNTO,
                                                                            Lv_NombreTecnicoWdb,
                                                                            NULL,
                                                                            NULL,
                                                                            'SI',
                                                                            Lv_ObsProcesoEjecutante,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError
                                                                          );
    ELSE
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                            Pr_RegClienteAVerificar.ID_PUNTO,
                                                                            Lv_NombreTecnicoWdb,
                                                                            NULL,
                                                                            NULL,
                                                                            'SI',
                                                                            Lv_ObsProcesoEjecutante,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError
                                                                          );
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND(
                                                                            Pr_RegClienteAVerificar.ID_PUNTO,
                                                                            Lv_NombreTecnicoEdb,
                                                                            NULL,
                                                                            NULL,
                                                                            'SI',
                                                                            Lv_ObsProcesoEjecutante,
                                                                            Lv_UsrCreacion,
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError
                                                                          );
      --Servicios cuyos planes no tienen una tecnología permitida para equipos Dual Band, por lo que se procede a verificar si no tiene SmartWifi 
      --y si no tiene, se procede a eliminar las solicitudes abiertas en caso que existieran
      Ln_IdItemSmartWifi := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ITEM_PROD_EN_PLAN(   Pn_IdPlanNuevo, 
                                                                                    NULL, 
                                                                                    NULL, 
                                                                                    'Renta SmartWiFi (Aironet 1602)');

      IF Ln_IdItemSmartWifi IS NULL THEN 
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(   Pr_RegClienteAVerificar.ID_SERVICIO, 
                                                                                NULL, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError, 
                                                                                Lcl_DetalleSolsEliminadas );
        IF Lv_Status                           = 'OK' THEN
          IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
            Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
            Lr_ServicioHistorial              := NULL;
            Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
            Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
            Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
            Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
            Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
            DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
            IF Lv_MsjError IS NOT NULL THEN
              RAISE Le_Exception;
            END IF;
          END IF;
        ELSE
          RAISE Le_Exception;
        END IF;
      END IF;
    END IF;
    Pv_Status   := 'OK';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := Lv_MsjError;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_EJECUTA_CAMBIOPLAN_DUAL_BAND', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Error inesperado ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                    || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error al intentar ejecutar el proceso de cambio de plan de equipos Dual Band';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_EJECUTA_CAMBIOPLAN_DUAL_BAND', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 
                                          'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_EJECUTA_CAMBIOPLAN_DUAL_BAND;

  PROCEDURE P_EJECUTA_PROCESOS_CAMBIOPLAN(
    Pn_IdServicioInternet IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdPlanAnterior     IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pn_IdPlanNuevo        IN DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE,
    Pv_UsrCreacion        IN VARCHAR2,
    Pv_IpCreacion         IN VARCHAR2,
    Pv_Status             OUT VARCHAR2, 
    Pv_MsjError           OUT VARCHAR2)
  AS
    Lv_Status                 VARCHAR2(5);
    Lv_MsjError               VARCHAR2(4000);
    Lr_RegClienteAVerificar   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos;
    Lv_NombreTecnicoInternet  VARCHAR2(8) := 'INTERNET';
    Lv_TipoOlt                VARCHAR2(3) := 'OLT';
    Lv_CodEmpresaMD           VARCHAR2(2) := '18';
    Lv_CodEmpresaEN           VARCHAR2(2) := '33';
    Lv_EstadoActivo           VARCHAR2(6) := 'Activo';
    Lv_ObsProcesoEjecutante   VARCHAR2(2000) := ' por cambio de plan';
    Ln_Rownum                 NUMBER := 1;
    --SE MODIFICA CURSOR PARA QUE RECIBA UN VARCHAR2 COMO BANDERA DE EMPRESA PARA QUE ECUANET SIGA EL FLUJO DE MEGADATOS
    CURSOR Lc_GetInfoServicioAVerificar(Lv_CodEmpresa IN VARCHAR2)
      IS
      SELECT DISTINCT SERVICIO_INTERNET.ID_SERVICIO,
        SERVICIO_INTERNET.TIPO_ORDEN,
        SERVICIO_INTERNET.ESTADO                                AS ESTADO_SERVICIO,
        PUNTO.ID_PUNTO,
        PUNTO.LOGIN,
        NVL(PERSONA.NOMBRES || ' ' || PERSONA.APELLIDOS, PERSONA.RAZON_SOCIAL) AS CLIENTE,
        NVL(JURISDICCION.NOMBRE_JURISDICCION, '') AS NOMBRE_JURISDICCION,
        PLAN.ID_PLAN,
        PLAN.NOMBRE_PLAN,
        OLT.ID_ELEMENTO                                         AS ID_OLT,
        OLT.NOMBRE_ELEMENTO                                     AS NOMBRE_OLT,
        MARCA_OLT.NOMBRE_MARCA_ELEMENTO                         AS NOMBRE_MARCA_OLT,
        MODELO_OLT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_OLT,
        ONT.ID_ELEMENTO                                         AS ID_ONT,
        ONT.NOMBRE_ELEMENTO                                     AS NOMBRE_ONT,
        MODELO_ONT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_ONT,
        SERVICIO_TECNICO_INTERNET.INTERFACE_ELEMENTO_CLIENTE_ID AS ID_INTERFACE_ONT
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO_INTERNET
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO_INTERNET.PUNTO_ID
      INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
      ON PER.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
      INNER JOIN DB_COMERCIAL.INFO_PERSONA PERSONA
      ON PERSONA.ID_PERSONA = PER.PERSONA_ID
      LEFT JOIN DB_INFRAESTRUCTURA.ADMI_JURISDICCION JURISDICCION
      ON JURISDICCION.ID_JURISDICCION = PUNTO.PUNTO_COBERTURA_ID
      INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN
      ON PLAN.ID_PLAN = SERVICIO_INTERNET.PLAN_ID
      INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
      ON PLAN_DET.PLAN_ID = PLAN.ID_PLAN
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_INTERNET_EN_PLAN
      ON PROD_INTERNET_EN_PLAN.ID_PRODUCTO = PLAN_DET.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO_INTERNET
      ON SERVICIO_TECNICO_INTERNET.SERVICIO_ID = SERVICIO_INTERNET.ID_SERVICIO
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO OLT
      ON OLT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_OLT
      ON MODELO_OLT.ID_MODELO_ELEMENTO = OLT.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_OLT
      ON TIPO_OLT.ID_TIPO_ELEMENTO = MODELO_OLT.TIPO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_OLT
      ON MARCA_OLT.ID_MARCA_ELEMENTO = MODELO_OLT.MARCA_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ONT
      ON ONT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_CLIENTE_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ONT
      ON MODELO_ONT.ID_MODELO_ELEMENTO = ONT.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_ONT
      ON MARCA_ONT.ID_MARCA_ELEMENTO              = MODELO_ONT.MARCA_ELEMENTO_ID
      WHERE SERVICIO_INTERNET.ID_SERVICIO        = Pn_IdServicioInternet
      AND SERVICIO_INTERNET.ESTADO               = Lv_EstadoActivo
      AND PLAN_DET.ESTADO                        = PLAN.ESTADO
      AND PROD_INTERNET_EN_PLAN.NOMBRE_TECNICO   = Lv_NombreTecnicoInternet
      AND PROD_INTERNET_EN_PLAN.ESTADO           = Lv_EstadoActivo
      AND PROD_INTERNET_EN_PLAN.EMPRESA_COD      = Lv_CodEmpresa
      AND TIPO_OLT.NOMBRE_TIPO_ELEMENTO          = Lv_TipoOlt
      AND ROWNUM = Ln_Rownum;
    Le_Exception EXCEPTION;
  BEGIN
  --BUSCA POR EMPRESA ECUANET
    OPEN Lc_GetInfoServicioAVerificar(Lv_CodEmpresaMD);
    FETCH Lc_GetInfoServicioAVerificar INTO Lr_RegClienteAVerificar;
    CLOSE Lc_GetInfoServicioAVerificar;
    --VALIDACION POR SERVICIO MEDIANTE ID_SERVICIO
    IF Lr_RegClienteAVerificar.ID_SERVICIO IS  NULL THEN
    --INGRESA Y BUSCA POR EMPRESA ECUANET
       OPEN Lc_GetInfoServicioAVerificar(Lv_CodEmpresaEN);
       FETCH Lc_GetInfoServicioAVerificar INTO Lr_RegClienteAVerificar;
       CLOSE Lc_GetInfoServicioAVerificar;
    END IF;

    IF Lr_RegClienteAVerificar.ID_SERVICIO IS NOT NULL THEN
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_EJECUTA_CAMBIOPLAN_DUAL_BAND(Lr_RegClienteAVerificar,
                                                                            Pn_IdPlanAnterior,
                                                                            Pn_IdPlanNuevo,
                                                                            Lv_ObsProcesoEjecutante,
                                                                            Pv_UsrCreacion,
                                                                            Pv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError);
      IF Lv_Status = 'OK' THEN
        COMMIT;
      ELSE
        RAISE Le_Exception;
      END IF;
    ELSE
      Lv_Status   := 'ERROR';
      Lv_MsjError := 'No se ha podido obtener la información del servicio de Internet';
    END IF;
    Pv_Status   := Lv_Status;
    Pv_MsjError := Lv_MsjError;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := 'No se ha podido realizar el cambio de plan que verifica equipos dual band. Por favor consultar con el Dep. de Sistemas!';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_EJECUTA_PROCESOS_CAMBIOPLAN', 
                                            'No se ha podido realizar el cambio de plan respecto a equipos Dual Band - ' || Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Error inesperado ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                    || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error al intentar ejecutar el proceso de cambio de plan que verifica equipos dual band. '
                    || 'Por favor consultar con el Dep. de Sistemas!';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_EJECUTA_PROCESOS_CAMBIOPLAN', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_EJECUTA_PROCESOS_CAMBIOPLAN;

  PROCEDURE P_CLONACION_SOLICITUDES(
    Pr_DataGeneralClienteDestino  IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataGeneralCliente,
    Pn_IdServicioOrigen           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pv_ProcesoEjecutante          IN VARCHAR2,
    Pv_UsrCreacion                IN VARCHAR2,
    Pv_IpCreacion                 IN VARCHAR2,
    Pv_Status                     OUT VARCHAR2,
    Pv_MsjError                   OUT VARCHAR2)
  AS
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Lv_EstadoIniSolicitud           VARCHAR2(14) := 'PrePlanificada';
    Lv_EstadoPendiente              VARCHAR2(14) := 'Pendiente';
    Lv_EstadoFinalizada             VARCHAR2(10) := 'Finalizada';
    Lv_EstadoActivo                 VARCHAR2(6)  := 'Activo';
    Lv_EstadoSolicitud              VARCHAR2(30);
    Lv_ParamAsociadoServiciosMd     VARCHAR2(35) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_Valor1SolsGestionOnt         VARCHAR2(41) := 'TIPOS_SOLICITUDES_GENERALES_GESTIONAN_ONT';
    Lv_Valor3PermiteClonar          VARCHAR2(14) := 'PERMITE_CLONAR';
    Lv_Valor1EstadosSolsGestionOnt  VARCHAR2(28) := 'ESTADOS_SOLICITUDES_ABIERTAS';
    Lv_CreaSolicitud                VARCHAR2(2) := 'SI';
    Lv_ProcesoTareas                VARCHAR2(11) := 'Regularizar';
    Ln_IdUltDetSolicitudOrigen      DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE;
    Ln_IdUltDetSolicitudDestino     DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE;
    Lr_InfoDetalleSolicitud         DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
    Lr_InfoDetalleSolCaract         DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
    Lr_InfoDetalleSolHistorial      DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Le_Exception                    EXCEPTION;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lcl_DetalleSolsCreadas          CLOB;
    Lcl_DetalleSolsEliminadas       CLOB;
    Lcl_IniDetalleSolsCreadas       CLOB := '<b>Detalle de solicitudes asociadas al CPE ONT que han sido creadas autom¿ticamente</b>';
    Lcl_IniDetalleSolsEliminadas    CLOB := '<b>Detalle de solicitudes asociadas al CPE ONT que han sido eliminadas autom¿ticamente</b>';
    Lcl_IniDetalleSols              CLOB := '<br />' ||
                                              '<table cellpadding="5">' ||
                                                '<tr>' ||
                                                  '<td valign="center">' ||
                                                    '<div>' ||
                                                      '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                        '<thead>' ||
                                                          '<tr>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Usr Creaci¿n</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Fecha Creaci¿n</b></th>' ||
                                                          '</tr>' ||
                                                        '</thead>' ||
                                                        '<tbody>';
    Lcl_FinDetalleSols              CLOB  :=           '</tbody>' ||
                                                      '</table>' ||
                                                    '</div>' ||
                                                  '</td>' ||
                                                '</tr>' ||
                                              '</table>';
    Lv_CreaHistorialesServicios     VARCHAR2(2) := 'NO';
    Lv_EstadoServicioOrigen         VARCHAR2(30);
    CURSOR Lc_GetSolsCaractsAbiertas
    IS
      SELECT DISTINCT SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD,
        TIPO_SOLICITUD.ID_TIPO_SOLICITUD,
        TIPO_SOLICITUD.DESCRIPCION_SOLICITUD,
        SOLICITUDES_ABIERTAS.ESTADO AS ESTADO_SOLICITUD,
        SOLICITUDES_ABIERTAS.USR_CREACION                                  AS USR_CREACION_SOL,
        TO_CHAR(SOLICITUDES_ABIERTAS.FE_CREACION, 'DD-MM-YYYY HH24:MI:SS') AS FE_CREACION_SOL,
        SERVICIO.ESTADO AS ESTADO_SERVICIO,
        CARACT.ID_CARACTERISTICA,
        SOL_CARACT.ID_SOLICITUD_CARACTERISTICA,
        SOL_CARACT.VALOR,
        SOL_CARACT.ESTADO AS ESTADO_SOL_CARACT
      FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOLICITUDES_ABIERTAS
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
      ON SERVICIO.ID_SERVICIO = SOLICITUDES_ABIERTAS.SERVICIO_ID
      INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      ON TIPO_SOLICITUD.ID_TIPO_SOLICITUD = SOLICITUDES_ABIERTAS.TIPO_SOLICITUD_ID
      INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOL_CARACT
      ON SOL_CARACT.DETALLE_SOLICITUD_ID = SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
      ON CARACT.ID_CARACTERISTICA = SOL_CARACT.CARACTERISTICA_ID
      INNER JOIN
        ( SELECT DISTINCT PARAM_DET_SOLS_CLONACION.VALOR2 AS DESCRIPCION_SOLICITUD,
          PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR3           AS ESTADO_SOL_PERMITIDA,
          PARAM_DET_ESTADOS_SOL_CARACT.VALOR3             AS ESTADO_SOL_CARACT_PERMITIDA
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_CAB
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_SOLS_CLONACION
        ON PARAM_DET_SOLS_CLONACION.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SOL_ABIERTAS
        ON PARAM_DET_ESTADOS_SOL_ABIERTAS.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SOL_CARACT
        ON PARAM_DET_ESTADOS_SOL_CARACT.PARAMETRO_ID                 = PARAM_CAB.ID_PARAMETRO
        WHERE PARAM_CAB.NOMBRE_PARAMETRO                             = Lv_ParamAsociadoServiciosMd
        AND PARAM_CAB.ESTADO                                         = Lv_EstadoActivo
        AND PARAM_DET_SOLS_CLONACION.VALOR1                          = Lv_Valor1SolsGestionOnt
        AND PARAM_DET_SOLS_CLONACION.VALOR3                          = Lv_Valor3PermiteClonar
        AND PARAM_DET_SOLS_CLONACION.ESTADO                          = Lv_EstadoActivo
        AND PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR1                    = Lv_Valor1EstadosSolsGestionOnt
        AND PARAM_DET_SOLS_CLONACION.VALOR2                          = PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR2
        AND PARAM_DET_ESTADOS_SOL_ABIERTAS.ESTADO                    = Lv_EstadoActivo
        AND PARAM_DET_ESTADOS_SOL_CARACT.VALOR1                      = Lv_Valor1EstadosSolsGestionOnt
        AND PARAM_DET_SOLS_CLONACION.VALOR2                          = PARAM_DET_ESTADOS_SOL_CARACT.VALOR2
        AND PARAM_DET_ESTADOS_SOL_CARACT.ESTADO                      = Lv_EstadoActivo
        ) INFO_PARAMS_SOLS ON INFO_PARAMS_SOLS.DESCRIPCION_SOLICITUD = TIPO_SOLICITUD.DESCRIPCION_SOLICITUD
    WHERE SOLICITUDES_ABIERTAS.SERVICIO_ID                           = Pn_IdServicioOrigen
    AND SOLICITUDES_ABIERTAS.ESTADO                                  = INFO_PARAMS_SOLS.ESTADO_SOL_PERMITIDA
    AND SOL_CARACT.ESTADO                                            = INFO_PARAMS_SOLS.ESTADO_SOL_CARACT_PERMITIDA
    ORDER BY SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD ASC;
  BEGIN
    IF Pv_IpCreacion IS NULL THEN
      Lv_IpCreacion  := '127.0.0.1';
    ELSE
      Lv_IpCreacion := Pv_IpCreacion;
    END IF;
    IF Pv_UsrCreacion IS NULL THEN
      Lv_UsrCreacion  := 'clonaSolsServ';
    ELSE
      Lv_UsrCreacion := Pv_UsrCreacion;
    END IF;

    IF Lc_GetSolsCaractsAbiertas%ISOPEN THEN
      CLOSE Lc_GetSolsCaractsAbiertas;
    END IF;
    FOR I_GetSolsCaractsAbiertas IN Lc_GetSolsCaractsAbiertas
    LOOP
      Lv_EstadoSolicitud                          := Lv_EstadoIniSolicitud;
      IF I_GetSolsCaractsAbiertas.ESTADO_SOLICITUD = Lv_EstadoPendiente THEN
        Lv_EstadoSolicitud                        := Lv_EstadoPendiente;
      END IF;
      IF Lv_CreaSolicitud         = 'SI' OR Ln_IdUltDetSolicitudOrigen <> I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD THEN
        Lv_CreaSolicitud                             := 'NO';
        Ln_IdUltDetSolicitudDestino                  := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
        --Se crean la solicitud en el servicio destino
        Lr_InfoDetalleSolicitud                      := NULL;
        Lr_InfoDetalleSolicitud.ID_DETALLE_SOLICITUD := Ln_IdUltDetSolicitudDestino;
        Lr_InfoDetalleSolicitud.SERVICIO_ID          := Pr_DataGeneralClienteDestino.ID_SERVICIO;
        Lr_InfoDetalleSolicitud.TIPO_SOLICITUD_ID    := I_GetSolsCaractsAbiertas.ID_TIPO_SOLICITUD;
        Lr_InfoDetalleSolicitud.OBSERVACION          := I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD || ' creada autom¿ticamente';
        Lr_InfoDetalleSolicitud.USR_CREACION         := Lv_UsrCreacion;
        Lr_InfoDetalleSolicitud.ESTADO               := Lv_EstadoSolicitud;
        DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_InfoDetalleSolicitud, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se actualiza el estado de la solicitud del servicio origen
        UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
        SET ESTADO                                         = Lv_EstadoFinalizada
        WHERE ID_DETALLE_SOLICITUD                         = I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD;

        --Se cierran todas las tareas que est¿n asociadas a las solicitudes
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRP_CIERRA_TAREAS_SOLICITUD( I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD, 
                                                                              Lv_ProcesoTareas, 
                                                                              Lv_MsjError);
        Lr_InfoDetalleSolHistorial                        := NULL;
        Lr_InfoDetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
        Lr_InfoDetalleSolHistorial.DETALLE_SOLICITUD_ID   := I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD;
        Lr_InfoDetalleSolHistorial.ESTADO                 := Lv_EstadoFinalizada;
        Lr_InfoDetalleSolHistorial.OBSERVACION            := 'Se finaliza ' || I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD || Pv_ProcesoEjecutante;
        Lr_InfoDetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
        Lr_InfoDetalleSolHistorial.FE_CREACION            := SYSDATE;
        Lr_InfoDetalleSolHistorial.IP_CREACION            := Lv_IpCreacion;
        DB_COMERCIAL.COMEK_MODELO.P_INSERT_INFO_DETALLE_SOL_HIST(Lr_InfoDetalleSolHistorial, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        --Se env¿a correo notificando la creaci¿n de la solciitud
        DB_COMERCIAL.TECNK_SERVICIOS.P_ENVIO_CORREO_CREA_SOL_PYL( Pr_DataGeneralClienteDestino, 
                                                                  I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD,
                                                                  I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD || ' creada autom¿ticamente',
                                                                  Lv_Status, 
                                                                  Lv_MsjError);


        Lcl_DetalleSolsEliminadas   :=  Lcl_DetalleSolsEliminadas || 
                                      '<tr>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                          I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolsCaractsAbiertas.ESTADO_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        I_GetSolsCaractsAbiertas.USR_CREACION_SOL || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        I_GetSolsCaractsAbiertas.FE_CREACION_SOL ||
                                        '</td>' ||
                                      '</tr>';

        Lcl_DetalleSolsCreadas      :=  Lcl_DetalleSolsCreadas || 
                                      '<tr>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                          Ln_IdUltDetSolicitudDestino || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolsCaractsAbiertas.DESCRIPCION_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          Lv_EstadoSolicitud || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        Lv_UsrCreacion || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        SYSDATE ||
                                        '</td>' ||
                                      '</tr>';
        Lv_CreaHistorialesServicios := 'SI';
        Lv_EstadoServicioOrigen     := I_GetSolsCaractsAbiertas.ESTADO_SERVICIO;
      END IF;
      --Se crea cada caracter¿stica de la solicitud asociada al servicio destino
      Lr_InfoDetalleSolCaract                      := NULL;
      Lr_InfoDetalleSolCaract.CARACTERISTICA_ID    := I_GetSolsCaractsAbiertas.ID_CARACTERISTICA;
      Lr_InfoDetalleSolCaract.VALOR                := I_GetSolsCaractsAbiertas.VALOR;
      Lr_InfoDetalleSolCaract.DETALLE_SOLICITUD_ID := Ln_IdUltDetSolicitudDestino;
      Lr_InfoDetalleSolCaract.ESTADO               := Lv_EstadoSolicitud;
      Lr_InfoDetalleSolCaract.USR_CREACION         := Lv_UsrCreacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_InfoDetalleSolCaract, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      --Se actualiza el estado de la caracter¿stica de la solicitud del servicio origen
      UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
      SET ESTADO                        = Lv_EstadoFinalizada,
        USR_ULT_MOD                     = Lv_UsrCreacion,
        FE_ULT_MOD                      = SYSDATE
      WHERE ID_SOLICITUD_CARACTERISTICA = I_GetSolsCaractsAbiertas.ID_SOLICITUD_CARACTERISTICA;
      Ln_IdUltDetSolicitudOrigen       := I_GetSolsCaractsAbiertas.ID_DETALLE_SOLICITUD;
    END LOOP;


    IF Lv_CreaHistorialesServicios = 'SI' THEN
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pn_IdServicioOrigen;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Lv_EstadoServicioOrigen;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_IniDetalleSolsEliminadas || Lcl_IniDetalleSols || Lcl_DetalleSolsEliminadas || Lcl_FinDetalleSols;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_DataGeneralClienteDestino.ID_SERVICIO;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Pr_DataGeneralClienteDestino.ESTADO_SERVICIO;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_IniDetalleSolsCreadas || Lcl_IniDetalleSols || Lcl_DetalleSolsCreadas || Lcl_FinDetalleSols;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;
    Pv_Status   := 'OK';
    Pv_MsjError := '';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := Lv_MsjError;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'INFRK_TRANSACCIONES.P_CLONACION_SOLICITUDES', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Error inesperado ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                   || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error al intentar trasladar las solicitudes del servicio origen del traslado. Por favor comun¿quese con Sistemas!';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'INFRK_TRANSACCIONES.P_CLONACION_SOLICITUDES', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

  END P_CLONACION_SOLICITUDES;


  PROCEDURE P_ELIMINA_SOLS_GESTIONA_ONT(
    Pn_IdServicio               IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
    Pn_IdSolicitudValida        IN DB_COMERCIAL.INFO_DETALLE_SOLICITUD.ID_DETALLE_SOLICITUD%TYPE,
    Pv_Status                   OUT VARCHAR2,
    Pv_MsjError                 OUT VARCHAR2,
    Pcl_DetalleSolsEliminadas   OUT CLOB
  )
  AS
    Lv_TipoElemento                 VARCHAR2(7) := 'CPE ONT';
    Lv_CaractElementoCliente        VARCHAR2(16) := 'ELEMENTO CLIENTE';
    Lv_EstadoEliminada              VARCHAR2(9) := 'Eliminada';
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lr_InfoDetalleSolHistorial      DB_COMERCIAL.INFO_DETALLE_SOL_HIST%ROWTYPE;
    Lv_UsrCreacion                  VARCHAR2(13) := 'regulaWdbYEdb';
    Lv_IpCreacion                   VARCHAR2(9) := '127.0.0.1';
    Lv_ObservacionSolAEliminar      VARCHAR2(200) := 'Solicitud eliminada por regularizaci¿n de solicitudes para gestionar equipos Dual Band';
    Lv_ProcesoTareas                VARCHAR2(11) := 'Regularizar';
    Lv_ParamAsociadoServiciosMd     VARCHAR2(35) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_Valor1SolsGestionOnt         VARCHAR2(41) := 'TIPOS_SOLICITUDES_GENERALES_GESTIONAN_ONT';
    Lv_Valor1EstadosSolsGestionOnt  VARCHAR2(28) := 'ESTADOS_SOLICITUDES_ABIERTAS';
    Lv_ContinuaEliminacion          VARCHAR2(2);
    Lcl_DetalleSolsEliminadas       CLOB;
    Lv_MsjError                     VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    CURSOR Lc_GetSolicitudesAbiertas
    IS
      SELECT DISTINCT SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD,
        TIPO_SOLICITUD.ID_TIPO_SOLICITUD,
        TIPO_SOLICITUD.DESCRIPCION_SOLICITUD,
        SOLICITUDES_ABIERTAS.ESTADO                                        AS ESTADO_SOLICITUD,
        SOLICITUDES_ABIERTAS.USR_CREACION                                  AS USR_CREACION_SOL,
        TO_CHAR(SOLICITUDES_ABIERTAS.FE_CREACION, 'DD-MM-YYYY HH24:MI:SS') AS FE_CREACION_SOL
      FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOLICITUDES_ABIERTAS
      INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      ON TIPO_SOLICITUD.ID_TIPO_SOLICITUD = SOLICITUDES_ABIERTAS.TIPO_SOLICITUD_ID
      INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOL_CARACT
      ON SOL_CARACT.DETALLE_SOLICITUD_ID = SOLICITUDES_ABIERTAS.ID_DETALLE_SOLICITUD
      INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
      ON CARACT.ID_CARACTERISTICA = SOL_CARACT.CARACTERISTICA_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
      ON COALESCE(TO_NUMBER(REGEXP_SUBSTR(SOL_CARACT.VALOR,'^\d+')),0) = ELEMENTO.ID_ELEMENTO
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ELEMENTO
      ON MODELO_ELEMENTO.ID_MODELO_ELEMENTO = ELEMENTO.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_ELEMENTO
      ON TIPO_ELEMENTO.ID_TIPO_ELEMENTO = MODELO_ELEMENTO.TIPO_ELEMENTO_ID
      INNER JOIN
        ( SELECT DISTINCT PARAM_DET_SOLS_GESTIONA_ONT.VALOR2 AS DESCRIPCION_SOLICITUD,
          PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR3           AS ESTADO_SOL_PERMITIDA,
          PARAM_DET_ESTADOS_SOL_CARACT.VALOR3             AS ESTADO_SOL_CARACT_PERMITIDA
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_CAB
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_SOLS_GESTIONA_ONT
        ON PARAM_DET_SOLS_GESTIONA_ONT.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SOL_ABIERTAS
        ON PARAM_DET_ESTADOS_SOL_ABIERTAS.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SOL_CARACT
        ON PARAM_DET_ESTADOS_SOL_CARACT.PARAMETRO_ID                 = PARAM_CAB.ID_PARAMETRO
        WHERE PARAM_CAB.NOMBRE_PARAMETRO                             = Lv_ParamAsociadoServiciosMd
        AND PARAM_CAB.ESTADO                                         = Lv_EstadoActivo
        AND PARAM_DET_SOLS_GESTIONA_ONT.VALOR1                       = Lv_Valor1SolsGestionOnt
        AND PARAM_DET_SOLS_GESTIONA_ONT.ESTADO                       = Lv_EstadoActivo
        AND PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR1                    = Lv_Valor1EstadosSolsGestionOnt
        AND PARAM_DET_SOLS_GESTIONA_ONT.VALOR2                       = PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR2
        AND PARAM_DET_ESTADOS_SOL_ABIERTAS.ESTADO                    = Lv_EstadoActivo
        AND PARAM_DET_ESTADOS_SOL_CARACT.VALOR1                      = Lv_Valor1EstadosSolsGestionOnt
        AND PARAM_DET_SOLS_GESTIONA_ONT.VALOR2                       = PARAM_DET_ESTADOS_SOL_CARACT.VALOR2
        AND PARAM_DET_ESTADOS_SOL_CARACT.ESTADO                      = Lv_EstadoActivo
        ) INFO_PARAMS_SOLS ON INFO_PARAMS_SOLS.DESCRIPCION_SOLICITUD = TIPO_SOLICITUD.DESCRIPCION_SOLICITUD
      WHERE SOLICITUDES_ABIERTAS.SERVICIO_ID                         = Pn_IdServicio
      AND SOLICITUDES_ABIERTAS.ESTADO                                = INFO_PARAMS_SOLS.ESTADO_SOL_PERMITIDA
      AND CARACT.DESCRIPCION_CARACTERISTICA                          = Lv_CaractElementoCliente
      AND TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO                         = Lv_TipoElemento
      AND SOL_CARACT.ESTADO                                          = INFO_PARAMS_SOLS.ESTADO_SOL_CARACT_PERMITIDA;
  BEGIN
    IF Lc_GetSolicitudesAbiertas%ISOPEN THEN
      CLOSE Lc_GetSolicitudesAbiertas;
    END IF;
    FOR I_GetSolicitudesAbiertas IN Lc_GetSolicitudesAbiertas
    LOOP
      Lv_ContinuaEliminacion    := 'SI';
      IF Pn_IdSolicitudValida IS NOT NULL AND Pn_IdSolicitudValida = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD THEN 
        Lv_ContinuaEliminacion  := 'NO';
      END IF;
      IF Lv_ContinuaEliminacion = 'SI' THEN
        Lcl_DetalleSolsEliminadas :=  Lcl_DetalleSolsEliminadas || 
                                      '<tr>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                          I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.DESCRIPCION_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' || 
                                          I_GetSolicitudesAbiertas.ESTADO_SOLICITUD || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        I_GetSolicitudesAbiertas.USR_CREACION_SOL || 
                                        '</td>' ||
                                        '<td style="border: 1px solid; padding:4px;">' ||
                                        I_GetSolicitudesAbiertas.FE_CREACION_SOL ||
                                        '</td>' ||
                                      '</tr>';

        UPDATE DB_COMERCIAL.INFO_DETALLE_SOLICITUD
        SET    ESTADO = Lv_EstadoEliminada
        WHERE  ID_DETALLE_SOLICITUD = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD;

        Lr_InfoDetalleSolHistorial                        := NULL;
        Lr_InfoDetalleSolHistorial.ID_SOLICITUD_HISTORIAL := DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL;
        Lr_InfoDetalleSolHistorial.DETALLE_SOLICITUD_ID   := I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD;
        Lr_InfoDetalleSolHistorial.ESTADO                 := Lv_EstadoEliminada;
        Lr_InfoDetalleSolHistorial.OBSERVACION            := Lv_ObservacionSolAEliminar;
        Lr_InfoDetalleSolHistorial.USR_CREACION           := Lv_UsrCreacion;
        Lr_InfoDetalleSolHistorial.FE_CREACION            := SYSDATE;
        Lr_InfoDetalleSolHistorial.IP_CREACION            := Lv_IpCreacion;
        DB_COMERCIAL.COMEK_MODELO.P_INSERT_INFO_DETALLE_SOL_HIST(Lr_InfoDetalleSolHistorial, Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        UPDATE DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
        SET ESTADO = Lv_EstadoEliminada,
        USR_ULT_MOD = Lv_UsrCreacion,
        FE_ULT_MOD = SYSDATE
        WHERE DETALLE_SOLICITUD_ID = I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD
        AND ESTADO IN (   
            SELECT DISTINCT PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR3
            FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_CAB
            INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SOL_ABIERTAS
            ON PARAM_DET_ESTADOS_SOL_ABIERTAS.PARAMETRO_ID = PARAM_CAB.ID_PARAMETRO
            WHERE PARAM_CAB.NOMBRE_PARAMETRO               = Lv_ParamAsociadoServiciosMd
            AND PARAM_CAB.ESTADO                           = Lv_EstadoActivo
            AND PARAM_DET_ESTADOS_SOL_ABIERTAS.ESTADO      = Lv_EstadoActivo
            AND PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR1      = Lv_Valor1EstadosSolsGestionOnt
            AND PARAM_DET_ESTADOS_SOL_ABIERTAS.VALOR2      = I_GetSolicitudesAbiertas.DESCRIPCION_SOLICITUD);

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRP_CIERRA_TAREAS_SOLICITUD( I_GetSolicitudesAbiertas.ID_DETALLE_SOLICITUD, 
                                                                              Lv_ProcesoTareas, 
                                                                              Lv_MsjError);
        IF Lv_MsjError IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;
      END IF;
    END LOOP;
    Pv_Status                   := 'OK';
    Pcl_DetalleSolsEliminadas   := Lcl_DetalleSolsEliminadas;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status                   := 'ERROR';
    Pv_MsjError                 := 'No se ha podido eliminar correctamente las solicitudes abiertas del servicio';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_ELIMINA_SOLS_GESTIONA_ONT', 
                                            'No se ha podido eliminar correctamente las solicitudes abiertas del servicio' || Lv_MsjError, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status                   := 'ERROR';
    Pv_MsjError                 := 'No se ha podido eliminar correctamente las solicitudes abiertas del servicio';
    Pcl_DetalleSolsEliminadas   := '';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 
                                            'INFRK_TRANSACCIONES.P_ELIMINA_SOLS_GESTIONA_ONT', 
                                            'No se ha podido eliminar correctamente las solicitudes abiertas del servicio - ' 
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_COMERCIAL'),
                                            SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_SOLS_GESTIONA_ONT;

  PROCEDURE P_CREA_SOL_AGREGAR_DUAL_BAND(
      Pr_RegClienteAVerificar IN DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos,
      Pn_IdServicioOrigen     IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
      Pv_CreaSolCaractWdb     IN VARCHAR2,
      Pv_CreaSolCaractEdb     IN VARCHAR2,
      Pv_UsrCreacion          IN VARCHAR2,
      Pv_IpCreacion           IN VARCHAR2,
      Pv_Status               OUT VARCHAR2,
      Pv_MsjError             OUT VARCHAR2)
  AS
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Lv_DescripcionSolAgregarEquipo  VARCHAR2(24) := 'SOLICITUD AGREGAR EQUIPO';
    Lv_EstadoActivo                 VARCHAR2(6)  := 'Activo';
    Lv_EstadoEliminado              VARCHAR2(9)  := 'Eliminado';
    Ln_Rownum                       NUMBER := 1;
    Lcl_Observacion                 CLOB;
    Lcl_ObservacionEliminacion      CLOB;
    Lv_ObservacionCorreo            VARCHAR2(4000);
    Lv_EstadoIniSolEquiposDualBand  VARCHAR2(14) := 'PrePlanificada';
    Lv_EstadoIniSolCaract           VARCHAR2(14) := 'PrePlanificada';
    Ln_IdTipoSolAgregarEquipo       DB_COMERCIAL.ADMI_TIPO_SOLICITUD.ID_TIPO_SOLICITUD%TYPE;
    Ln_IdCaractWifiDualBand         DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractElementoCliente      DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Ln_IdCaractExtenderDualBand     DB_COMERCIAL.ADMI_CARACTERISTICA.ID_CARACTERISTICA%TYPE;
    Lv_TipoCaract                   VARCHAR2(7)  := 'TECNICA';
    Lv_CaractTecnicaWdb             VARCHAR2(14) := 'WIFI DUAL BAND';
    Lv_CaractTecnicaTrasladarEdb    VARCHAR2(28) := 'TRASLADAR EXTENDER DUAL BAND';
    Lv_CaractTecnicaSincronizarEdb  VARCHAR2(30) := 'SINCRONIZAR EXTENDER DUAL BAND';
    Lv_CaractTecnicaElementCliente  VARCHAR2(16) := 'ELEMENTO CLIENTE';
    Lv_CaractTecnicaEdb             VARCHAR2(18) := 'EXTENDER DUAL BAND';
    Lr_DetalleSolicitud             DB_COMERCIAL.INFO_DETALLE_SOLICITUD%ROWTYPE;
    Lr_DetalleSolCaract             DB_COMERCIAL.INFO_DETALLE_SOL_CARACT%ROWTYPE;
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lr_DataGeneralClienteServicio   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataGeneralCliente;
    Lv_EstadoServicioOrigen         VARCHAR2(30);
    Le_Exception                    EXCEPTION;
    CURSOR Lc_GetIdTipoSolicitud(Cv_DescripcionSolicitud DB_COMERCIAL.ADMI_TIPO_SOLICITUD.DESCRIPCION_SOLICITUD%TYPE)
    IS
      SELECT TIPO_SOLICITUD.ID_TIPO_SOLICITUD
      FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
      WHERE TIPO_SOLICITUD.DESCRIPCION_SOLICITUD = Cv_DescripcionSolicitud
      AND TIPO_SOLICITUD.ESTADO                  = Lv_EstadoActivo
      AND ROWNUM                                 = Ln_Rownum;
    CURSOR Lc_GetIdCaracteristica(Cv_DescripcionCaracteristica DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT CARACTERISTICA.ID_CARACTERISTICA
      FROM DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA
      WHERE CARACTERISTICA.DESCRIPCION_CARACTERISTICA = Cv_DescripcionCaracteristica
      AND CARACTERISTICA.ESTADO                       = Lv_EstadoActivo
      AND CARACTERISTICA.TIPO                         = Lv_TipoCaract
      AND ROWNUM                                      = Ln_Rownum;

    CURSOR Lc_GetServicioDestino(Cn_IdServicioDestino DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT
      CASE
        WHEN SERVICIO.PRODUCTO_ID IS NOT NULL THEN 'Producto'
        ELSE 'Plan'
      END TIPO_SERVICIO,
      PLAN_CAB.ID_PLAN,
      PLAN_CAB.NOMBRE_PLAN,
      PRODUCTO.ID_PRODUCTO,
      PRODUCTO.DESCRIPCION_PRODUCTO
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
      LEFT JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN_CAB
      ON PLAN_CAB.ID_PLAN = SERVICIO.PLAN_ID
      LEFT JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
      ON PRODUCTO.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
      WHERE SERVICIO.ID_SERVICIO = Cn_IdServicioDestino;

    Lv_TipoServicioDestino          VARCHAR2(100);
    Ln_IdPlanDestino                DB_COMERCIAL.INFO_PLAN_CAB.ID_PLAN%TYPE;
    Lv_NombrePlanDestino            DB_COMERCIAL.INFO_PLAN_CAB.NOMBRE_PLAN%TYPE;
    Ln_IdProductoDestino            DB_COMERCIAL.ADMI_PRODUCTO.ID_PRODUCTO%TYPE;
    Lv_DescripcionProductoDestino   DB_COMERCIAL.ADMI_PRODUCTO.DESCRIPCION_PRODUCTO%TYPE;

    CURSOR Lc_GetEstadoServicioOrigen
    IS
      SELECT ESTADO
      FROM DB_COMERCIAL.INFO_SERVICIO
      WHERE ID_SERVICIO = Pn_IdServicioOrigen;

    LclInicioDetalleSolsEliminadas  CLOB := '<b>Detalle de solicitudes asociadas a equipos Dual Band que han sido eliminadas autom¿ticamente</b>' ||
                                            '<br />' ||
                                              '<table cellpadding="5">' ||
                                                '<tr>' ||
                                                  '<td valign="center">' ||
                                                    '<div>' ||
                                                      '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                        '<thead>' ||
                                                          '<tr>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Detalle Wifi Dual Band</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Detalle Extender Dual Band</b></th>' ||
                                                          '</tr>' ||
                                                        '</thead>' ||
                                                        '<tbody>';                                                   
    Lcl_DetalleSolsEliminadas       CLOB;
    LclFinDetalleSolsEliminadas     CLOB :=           '</tbody>' ||
                                                      '</table>' ||
                                                    '</div>' ||
                                                  '</td>' ||
                                                '</tr>' ||
                                              '</table>';

    LclIniDetalleSolsEliminaOtras  CLOB := '<b>Detalle de solicitudes asociadas al CPE ONT que han sido eliminadas autom¿ticamente</b>' ||
                                            '<br />' ||
                                              '<table cellpadding="5">' ||
                                                '<tr>' ||
                                                  '<td valign="center">' ||
                                                    '<div>' ||
                                                      '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                        '<thead>' ||
                                                          '<tr>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Usr Creaci¿n</b></th>' ||
                                                            '<th style="border: 1px solid; padding:4px;"><b>Fecha Creaci¿n</b></th>' ||
                                                          '</tr>' ||
                                                        '</thead>' ||
                                                        '<tbody>';
    LclFinDetalleSolsEliminaOtras CLOB  :=           '</tbody>' ||
                                                      '</table>' ||
                                                    '</div>' ||
                                                  '</td>' ||
                                                '</tr>' ||
                                              '</table>';


  BEGIN
    IF Pv_IpCreacion IS NULL THEN
      Lv_IpCreacion  := '127.0.0.1';
    ELSE
      Lv_IpCreacion := Pv_IpCreacion;
    END IF;
    IF Pv_UsrCreacion IS NULL THEN
      Lv_UsrCreacion  := 'creaSolAgEquiDb';
    ELSE
      Lv_UsrCreacion := Pv_UsrCreacion;
    END IF;

    Lcl_Observacion         := Lv_DescripcionSolAgregarEquipo || ' creada autom¿ticamente.';
    Lv_ObservacionCorreo    := Lv_DescripcionSolAgregarEquipo || ' creada autom¿ticamente.';
    IF Pv_CreaSolCaractWdb = 'SI' THEN
      Lcl_Observacion       := Lcl_Observacion || ' Incluye cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
      Lv_ObservacionCorreo  := Lv_ObservacionCorreo || ' Incluye cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
    END IF;

    IF Pv_CreaSolCaractEdb = 'SI' THEN
      Lcl_Observacion       := Lcl_Observacion || ' Incluye agregar equipo Extender Dual Band.';
      Lv_ObservacionCorreo  := Lv_ObservacionCorreo || ' Incluye agregar equipo Extender Dual Band.';
    END IF;

    OPEN Lc_GetIdTipoSolicitud(Lv_DescripcionSolAgregarEquipo);
    FETCH Lc_GetIdTipoSolicitud INTO Ln_IdTipoSolAgregarEquipo;
    CLOSE Lc_GetIdTipoSolicitud;

    OPEN Lc_GetServicioDestino(Pr_RegClienteAVerificar.ID_SERVICIO);
    FETCH Lc_GetServicioDestino INTO Lv_TipoServicioDestino, Ln_IdPlanDestino, Lv_NombrePlanDestino, 
                                     Ln_IdProductoDestino, Lv_DescripcionProductoDestino;
    CLOSE Lc_GetServicioDestino;

    --Se crea una SOLICITUD AGREGAR EQUIPO con los respectivos detalles que necesite el servicio
    Lr_DetalleSolicitud                      := NULL;
    Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD := DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL;
    Lr_DetalleSolicitud.SERVICIO_ID          := Pr_RegClienteAVerificar.ID_SERVICIO;
    Lr_DetalleSolicitud.TIPO_SOLICITUD_ID    := Ln_IdTipoSolAgregarEquipo;
    Lr_DetalleSolicitud.OBSERVACION          := Lcl_Observacion;
    Lr_DetalleSolicitud.USR_CREACION         := Lv_UsrCreacion;
    Lr_DetalleSolicitud.ESTADO               := Lv_EstadoIniSolEquiposDualBand;
    DB_COMERCIAL.COMEK_MODELO.COMPP_INSERT_DETALLE_SOLICITUD(Lr_DetalleSolicitud, Lv_MsjError);
    IF Lv_MsjError IS NOT NULL THEN
      RAISE Le_Exception;
    END IF;

    Lcl_Observacion := 'Se ha creado la ' || Lv_DescripcionSolAgregarEquipo || ' #' || Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD 
                                  || ' asociada al servicio';
    IF Pv_CreaSolCaractWdb = 'SI' THEN
      --Servicios de clientes que necesitan cambiar al Wifi Dual Band
      OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaWdb);
      FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractWifiDualBand;
      CLOSE Lc_GetIdCaracteristica;
      --Se inserta la caracter¿stica WIFI DUAL BAND a la SOLICITUD AGREGAR EQUIPO
      Lr_DetalleSolCaract                      := NULL;
      Lr_DetalleSolCaract.CARACTERISTICA_ID    := Ln_IdCaractWifiDualBand;
      Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
      Lr_DetalleSolCaract.VALOR                := Pv_CreaSolCaractWdb;
      Lr_DetalleSolCaract.ESTADO               := Lv_EstadoIniSolCaract;
      Lr_DetalleSolCaract.USR_CREACION         := Lv_UsrCreacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaElementCliente);
      FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractElementoCliente;
      CLOSE Lc_GetIdCaracteristica;
      --Se inserta la caracter¿stica ELEMENTO CLIENTE a la SOLICITUD AGREGAR EQUIPO
      Lr_DetalleSolCaract                      := NULL;
      Lr_DetalleSolCaract.CARACTERISTICA_ID    := Ln_IdCaractElementoCliente;
      Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
      Lr_DetalleSolCaract.VALOR                := Pr_RegClienteAVerificar.ID_ONT;
      Lr_DetalleSolCaract.ESTADO               := Lv_EstadoIniSolCaract;
      Lr_DetalleSolCaract.USR_CREACION         := Lv_UsrCreacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      Lcl_Observacion := Lcl_Observacion || '<br />Incluye cambio de CPE ONT de un Wifi Est¿ndar a un Wifi Dual Band.';
    END IF;
    IF Pv_CreaSolCaractEdb = 'SI' THEN
      --Servicios de clientes que necesitan agregar el Extender Dual Band
      --Se inserta la caracter¿stica EXTENDER DUAL BAND a la SOLICITUD AGREGAR EQUIPO
      OPEN Lc_GetIdCaracteristica(Lv_CaractTecnicaEdb);
      FETCH Lc_GetIdCaracteristica INTO Ln_IdCaractExtenderDualBand;
      CLOSE Lc_GetIdCaracteristica;
      Lr_DetalleSolCaract                      := NULL;
      Lr_DetalleSolCaract.CARACTERISTICA_ID    := Ln_IdCaractExtenderDualBand;
      Lr_DetalleSolCaract.DETALLE_SOLICITUD_ID := Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD;
      Lr_DetalleSolCaract.VALOR                := Pv_CreaSolCaractEdb;
      Lr_DetalleSolCaract.ESTADO               := Lv_EstadoIniSolCaract;
      Lr_DetalleSolCaract.USR_CREACION         := Lv_UsrCreacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_DETALLE_SOL_CARAC(Lr_DetalleSolCaract, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
      Lcl_Observacion := Lcl_Observacion || '<br />Incluye agregar equipo Extender Dual Band.';
    END IF;
    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( Pn_IdServicioOrigen, 
                                                                          Lr_DetalleSolicitud.ID_DETALLE_SOLICITUD, 
                                                                          Lv_Status, 
                                                                          Lv_MsjError, 
                                                                          Lcl_DetalleSolsEliminadas);
    IF Lv_Status = 'OK' THEN
      IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
        Lcl_ObservacionEliminacion := Lcl_ObservacionEliminacion || '<br />' || LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas 
                                      || LclFinDetalleSolsEliminadas;
      END IF;
    ELSE
      RAISE Le_Exception;
    END IF;

    --Si ya se va a gestionar por medio de una solicitud de agregar equipo, se deben eliminar las solicitudes asociadas al CPE ONT que no sean
    --SOLICITUD AGREGAR EQUIPO y SOLICITUD AGREGAR EQUIPO MASIVO
    IF Pv_CreaSolCaractWdb = 'SI' THEN
      Lcl_DetalleSolsEliminadas := '';
      DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_GESTIONA_ONT( Pn_IdServicioOrigen, 
                                                                          NULL, 
                                                                          Lv_Status, 
                                                                          Lv_MsjError, 
                                                                          Lcl_DetalleSolsEliminadas);
      IF Lv_Status = 'OK' THEN
        IF Lcl_DetalleSolsEliminadas IS NOT NULL THEN
          Lcl_ObservacionEliminacion := Lcl_ObservacionEliminacion || '<br />' || LclIniDetalleSolsEliminaOtras || Lcl_DetalleSolsEliminadas 
                                        || LclFinDetalleSolsEliminaOtras;
        END IF;
      ELSE
        RAISE Le_Exception;
      END IF;
    END IF;

    IF Pv_CreaSolCaractEdb = 'SI' THEN
      UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
      SET ESTADO                   = Lv_EstadoEliminado,
      FE_ULT_MOD                   = SYSDATE,
      USR_ULT_MOD                  = Lv_UsrCreacion
      WHERE ID_SERVICIO_PROD_CARACT IN
      ( SELECT ISC.ID_SERVICIO_PROD_CARACT
        FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISC
        JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
        ON APC.ID_PRODUCTO_CARACTERISITICA = ISC.PRODUCTO_CARACTERISITICA_ID
        JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
        ON AC.ID_CARACTERISTICA           = APC.CARACTERISTICA_ID
        WHERE ISC.SERVICIO_ID             = Pn_IdServicioOrigen
        AND AC.DESCRIPCION_CARACTERISTICA IN (Lv_CaractTecnicaTrasladarEdb, Lv_CaractTecnicaSincronizarEdb)
        AND ISC.ESTADO                    = Lv_EstadoActivo
        AND APC.ESTADO                    = Lv_EstadoActivo
      );
    END IF;

    IF Pr_RegClienteAVerificar.ID_SERVICIO = Pn_IdServicioOrigen THEN
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion || Lcl_ObservacionEliminacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    ELSE
      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pr_RegClienteAVerificar.ID_SERVICIO;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;

      OPEN Lc_GetEstadoServicioOrigen;
      FETCH Lc_GetEstadoServicioOrigen INTO Lv_EstadoServicioOrigen;
      CLOSE Lc_GetEstadoServicioOrigen;

      Lr_ServicioHistorial              := NULL;
      Lr_ServicioHistorial.SERVICIO_ID  := Pn_IdServicioOrigen;
      Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
      Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
      Lr_ServicioHistorial.ESTADO       := Lv_EstadoServicioOrigen;
      Lr_ServicioHistorial.OBSERVACION  := Lcl_ObservacionEliminacion;
      DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
      IF Lv_MsjError IS NOT NULL THEN
        RAISE Le_Exception;
      END IF;
    END IF;

    Lr_DataGeneralClienteServicio                       := NULL;
    Lr_DataGeneralClienteServicio.ID_SERVICIO           := Pr_RegClienteAVerificar.ID_SERVICIO;
    Lr_DataGeneralClienteServicio.TIPO_ORDEN            := Pr_RegClienteAVerificar.TIPO_ORDEN;
    Lr_DataGeneralClienteServicio.ESTADO_SERVICIO       := Pr_RegClienteAVerificar.ESTADO_SERVICIO;
    Lr_DataGeneralClienteServicio.ID_PUNTO              := Pr_RegClienteAVerificar.ID_PUNTO;
    Lr_DataGeneralClienteServicio.LOGIN                 := Pr_RegClienteAVerificar.LOGIN;
    Lr_DataGeneralClienteServicio.CLIENTE               := Pr_RegClienteAVerificar.CLIENTE;
    Lr_DataGeneralClienteServicio.NOMBRE_JURISDICCION   := Pr_RegClienteAVerificar.NOMBRE_JURISDICCION;
    Lr_DataGeneralClienteServicio.TIPO_SERVICIO         := Lv_TipoServicioDestino;
    Lr_DataGeneralClienteServicio.ID_PLAN               := Ln_IdPlanDestino;
    Lr_DataGeneralClienteServicio.NOMBRE_PLAN           := Lv_NombrePlanDestino;
    Lr_DataGeneralClienteServicio.ID_PRODUCTO           := Ln_IdProductoDestino;
    Lr_DataGeneralClienteServicio.DESCRIPCION_PRODUCTO  := Lv_DescripcionProductoDestino;
    DB_COMERCIAL.TECNK_SERVICIOS.P_ENVIO_CORREO_CREA_SOL_PYL(   Lr_DataGeneralClienteServicio, 
                                                                Lv_DescripcionSolAgregarEquipo,
                                                                Lv_ObservacionCorreo,
                                                                Lv_Status, 
                                                                Lv_MsjError);
    Pv_Status   := 'OK';
    Pv_MsjError := '';
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := Lv_MsjError;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_CREA_SOL_AGREGAR_DUAL_BAND', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Error inesperado ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                    || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error al intentar ejecutar el proceso de creaci¿n de SOLICITUD AGREGAR EQUIPO para gestionar equipos Dual Band';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_CREA_SOL_AGREGAR_DUAL_BAND', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 
                                          'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_CREA_SOL_AGREGAR_DUAL_BAND;


  PROCEDURE P_GENERA_SOLS_POR_TRASLADO(
      Pn_IdServicio           IN DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE,
      Pv_CodEmpresa           IN VARCHAR2,
      Pv_ObsProcesoEjecutante IN VARCHAR2,
      Pv_UsrCreacion          IN VARCHAR2,
      Pv_IpCreacion           IN VARCHAR2,
      Pv_Status               OUT VARCHAR2,
      Pv_MsjError             OUT VARCHAR2)
  AS
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Lv_UsrCreacion                  VARCHAR2(15);
    Lv_IpCreacion                   VARCHAR2(15);
    Ln_IdServicioOrigen             DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Lr_RegClienteOrigenAVerificar   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos;
    Lr_RegClienteDestinoAVerificar  DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataClientesVerificaEquipos;
    Lv_ServicioOrigenSinEquipoWdb   VARCHAR2(2);                                          
    Lv_ServicioOrigenSinEquipoEdb   VARCHAR2(2);
    Lv_PlanConDetalleWdb            VARCHAR2(2);
    Lv_PlanConDetalleEdb            VARCHAR2(2);
    Lv_CreaSolAgregarEquipo         VARCHAR2(2);
    Lv_CreaSolCaractWdb             VARCHAR2(2);
    Lv_CreaSolCaractEdb             VARCHAR2(2);
    Ln_IdServicioWdbAdic            DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdServicioEdbAdic            DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE;
    Ln_IdItemSmartWifi              DB_COMERCIAL.INFO_PLAN_DET.ID_ITEM%TYPE;
    Ln_IdElementoSiguiente          DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdInterfaceEleSiguiente      DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE;
    Lv_NombreTecnicoInternet        VARCHAR2(8)  := 'INTERNET';
    Lv_TipoOlt                      VARCHAR2(3)  := 'OLT';
    Lv_CodEmpresa                   VARCHAR2(2)  := '18';
    Lv_EstadoActivo                 VARCHAR2(6)  := 'Activo';
    Ln_Rownum                       NUMBER       := 1;
    Lv_ModelosOltEquiposdb          VARCHAR2(29) := 'MODELOS_OLT_EQUIPOS_DUAL_BAND';
    Lv_PermitidoWYExtenderEnPlanes  VARCHAR2(300);
    Lv_TecnologiaPermitidaDb        VARCHAR2(2);
    Lr_ParametroDetalleBusqueda     DB_GENERAL.ADMI_PARAMETRO_DET%ROWTYPE;
    Lr_RespuestaBusqTecnologiaDb    DB_GENERAL.ADMI_PARAMETRO_DET%ROWTYPE;
    Lrf_BusquedaTecnologiaDb        SYS_REFCURSOR;
    Lv_NombreTecnicoWdb             VARCHAR2(14)   := 'WIFI_DUAL_BAND';
    Lv_NombreTecnicoEdb             VARCHAR2(18)   := 'EXTENDER_DUAL_BAND';
    Lv_ObsProcesoEjecutante         VARCHAR2(4000);
    Lr_ServicioHistorial            DB_COMERCIAL.INFO_SERVICIO_HISTORIAL%ROWTYPE;
    Lv_CaractMotivoCreacionSol      VARCHAR2(26) := 'MOTIVO_CREACION_SOLICITUD';
    Lv_ValorMotivoCreacionSol       VARCHAR2(32) := 'CAMBIO ONT POR AGREGAR EXTENDER';
    Ln_IdDetSolCaractSolCambioOnt   DB_COMERCIAL.INFO_DETALLE_SOL_CARACT.ID_SOLICITUD_CARACTERISTICA%TYPE;
    Lcl_Observacion                 CLOB;
    Le_Exception                    EXCEPTION;
    CURSOR Lc_GetInfoServicioAVerificar(Cn_IdServicioAVerificar DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT DISTINCT SERVICIO_INTERNET.ID_SERVICIO,
        SERVICIO_INTERNET.TIPO_ORDEN,
        SERVICIO_INTERNET.ESTADO AS ESTADO_SERVICIO,
        PUNTO.ID_PUNTO,
        PUNTO.LOGIN,
        NVL(PERSONA.NOMBRES
        || ' '
        || PERSONA.APELLIDOS, PERSONA.RAZON_SOCIAL) AS CLIENTE,
        NVL(JURISDICCION.NOMBRE_JURISDICCION, '')   AS NOMBRE_JURISDICCION,
        PLAN.ID_PLAN,
        PLAN.NOMBRE_PLAN,
        OLT.ID_ELEMENTO                                         AS ID_OLT,
        OLT.NOMBRE_ELEMENTO                                     AS NOMBRE_OLT,
        MARCA_OLT.NOMBRE_MARCA_ELEMENTO                         AS NOMBRE_MARCA_OLT,
        MODELO_OLT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_OLT,
        ONT.ID_ELEMENTO                                         AS ID_ONT,
        ONT.NOMBRE_ELEMENTO                                     AS NOMBRE_ONT,
        MODELO_ONT.NOMBRE_MODELO_ELEMENTO                       AS NOMBRE_MODELO_ONT,
        SERVICIO_TECNICO_INTERNET.INTERFACE_ELEMENTO_CLIENTE_ID AS ID_INTERFACE_ONT
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO_INTERNET
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO = SERVICIO_INTERNET.PUNTO_ID
      INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
      ON PER.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
      INNER JOIN DB_COMERCIAL.INFO_PERSONA PERSONA
      ON PERSONA.ID_PERSONA = PER.PERSONA_ID
      LEFT JOIN DB_INFRAESTRUCTURA.ADMI_JURISDICCION JURISDICCION
      ON JURISDICCION.ID_JURISDICCION = PUNTO.PUNTO_COBERTURA_ID
      INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN
      ON PLAN.ID_PLAN = SERVICIO_INTERNET.PLAN_ID
      INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
      ON PLAN_DET.PLAN_ID = PLAN.ID_PLAN
      INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_INTERNET_EN_PLAN
      ON PROD_INTERNET_EN_PLAN.ID_PRODUCTO = PLAN_DET.PRODUCTO_ID
      INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO_INTERNET
      ON SERVICIO_TECNICO_INTERNET.SERVICIO_ID = SERVICIO_INTERNET.ID_SERVICIO
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO OLT
      ON OLT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_OLT
      ON MODELO_OLT.ID_MODELO_ELEMENTO = OLT.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_OLT
      ON TIPO_OLT.ID_TIPO_ELEMENTO = MODELO_OLT.TIPO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_OLT
      ON MARCA_OLT.ID_MARCA_ELEMENTO = MODELO_OLT.MARCA_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ONT
      ON ONT.ID_ELEMENTO = SERVICIO_TECNICO_INTERNET.ELEMENTO_CLIENTE_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ONT
      ON MODELO_ONT.ID_MODELO_ELEMENTO = ONT.MODELO_ELEMENTO_ID
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARCA_ONT
      ON MARCA_ONT.ID_MARCA_ELEMENTO           = MODELO_ONT.MARCA_ELEMENTO_ID
      WHERE SERVICIO_INTERNET.ID_SERVICIO      = Cn_IdServicioAVerificar
      AND SERVICIO_INTERNET.ESTADO             = Lv_EstadoActivo
      AND PLAN_DET.ESTADO                      = PLAN.ESTADO
      AND PROD_INTERNET_EN_PLAN.NOMBRE_TECNICO = Lv_NombreTecnicoInternet
      AND PROD_INTERNET_EN_PLAN.ESTADO         = Lv_EstadoActivo
      AND PROD_INTERNET_EN_PLAN.EMPRESA_COD    = Lv_CodEmpresa
      AND TIPO_OLT.NOMBRE_TIPO_ELEMENTO        = Lv_TipoOlt
      AND ROWNUM                               = Ln_Rownum;
    CURSOR Lc_GetInfoServicioDestino(Cn_IdServicioAVerificar DB_COMERCIAL.INFO_SERVICIO.ID_SERVICIO%TYPE)
    IS
      SELECT DISTINCT SERVICIO_INTERNET.ID_SERVICIO,
        SERVICIO_INTERNET.TIPO_ORDEN,
        SERVICIO_INTERNET.ESTADO AS ESTADO_SERVICIO,
        PUNTO.ID_PUNTO,
        PUNTO.LOGIN,
        NVL(JURISDICCION.NOMBRE_JURISDICCION, '') AS NOMBRE_JURISDICCION
      FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO_INTERNET
      INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
      ON PUNTO.ID_PUNTO                   = SERVICIO_INTERNET.PUNTO_ID
      LEFT JOIN DB_INFRAESTRUCTURA.ADMI_JURISDICCION JURISDICCION
      ON JURISDICCION.ID_JURISDICCION = PUNTO.PUNTO_COBERTURA_ID
      WHERE SERVICIO_INTERNET.ID_SERVICIO = Cn_IdServicioAVerificar
      AND ROWNUM                          = Ln_Rownum;
    CURSOR Lc_GetServAdicDualBandValido(Cn_IdPunto DB_COMERCIAL.INFO_PUNTO.ID_PUNTO%TYPE, 
                                        Cn_ElementoClienteId DB_COMERCIAL.INFO_SERVICIO_TECNICO.ELEMENTO_CLIENTE_ID%TYPE, 
                                        Cn_InterfaceElemClienteId DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID%TYPE, 
                                        Cv_NombreTecnicoProducto DB_COMERCIAL.ADMI_PRODUCTO.NOMBRE_TECNICO%TYPE)
    IS
      SELECT *
      FROM
        (SELECT SERVICIO.ID_SERVICIO
        FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD
        ON PROD.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ST
        ON ST.SERVICIO_ID                    = SERVICIO.ID_SERVICIO
        WHERE SERVICIO.PUNTO_ID              = Cn_IdPunto
        AND SERVICIO.ESTADO                  = Lv_EstadoActivo
        AND ST.ELEMENTO_CLIENTE_ID           = Cn_ElementoClienteId
        AND ST.INTERFACE_ELEMENTO_CLIENTE_ID = Cn_InterfaceElemClienteId
        AND PROD.NOMBRE_TECNICO              = Cv_NombreTecnicoProducto
        AND SERVICIO.PUNTO_FACTURACION_ID   IS NOT NULL
        AND SERVICIO.MESES_RESTANTES        IS NOT NULL
        ORDER BY SERVICIO.FE_CREACION DESC
        )
    WHERE ROWNUM = Ln_Rownum;
    CURSOR Lc_GetInfoElementoEnlaceDer(Cn_InterfaceElementoIniId DB_INFRAESTRUCTURA.INFO_ENLACE.INTERFACE_ELEMENTO_INI_ID%TYPE)
    IS
      SELECT ENLACE.ID_ENLACE,
        ELEMENTO_FIN.ID_ELEMENTO                AS ID_ELEMENTO_FIN,
        INTERFACE_ELE_FIN.ID_INTERFACE_ELEMENTO AS ID_INTERFACE_ELE_FIN
      FROM DB_INFRAESTRUCTURA.INFO_ENLACE ENLACE
      INNER JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_ELE_FIN
      ON INTERFACE_ELE_FIN.ID_INTERFACE_ELEMENTO = ENLACE.INTERFACE_ELEMENTO_FIN_ID
      INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_FIN
      ON ELEMENTO_FIN.ID_ELEMENTO            = INTERFACE_ELE_FIN.ELEMENTO_ID
      WHERE ENLACE.INTERFACE_ELEMENTO_INI_ID = Cn_InterfaceElementoIniId
      AND ENLACE.ESTADO                      = Lv_EstadoActivo
      AND ROWNUM                             = Ln_Rownum;
    Lr_RegInfoServicioDestino Lc_GetInfoServicioDestino%ROWTYPE;
    Lr_DataGeneralClienteServicio   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataGeneralCliente;
    Lcl_DetalleSolsEliminadas       CLOB;
    LclInicioDetalleSolsEliminadas  CLOB := '<b>Detalle de solicitudes asociadas a equipos Dual Band que han sido eliminadas automáticamente</b>' ||
                                            '<br />' ||
                                            '<table cellpadding="5">' ||
                                              '<tr>' ||
                                                '<td valign="center">' ||
                                                  '<div>' ||
                                                    '<table style="font-size: 10px; border-collapse: collapse;" cellpadding="5">' ||
                                                      '<thead>' ||
                                                        '<tr>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>#</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Tipo</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Estado</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Detalle Wifi Dual Band</b></th>' ||
                                                          '<th style="border: 1px solid; padding:4px;"><b>Detalle Extender Dual Band</b></th>' ||
                                                        '</tr>' ||
                                                      '</thead>' ||
                                                      '<tbody>';
    LclFinDetalleSolsEliminadas     CLOB :=           '</tbody>' ||
                                                    '</table>' ||
                                                  '</div>' ||
                                                '</td>' ||
                                              '</tr>' ||
                                            '</table>';

  BEGIN
    IF Pv_IpCreacion IS NULL THEN
      Lv_IpCreacion  := '127.0.0.1';
    ELSE
      Lv_IpCreacion := Pv_IpCreacion;
    END IF;
    IF Pv_UsrCreacion IS NULL THEN
      Lv_UsrCreacion  := 'creaSolsTraslad';
    ELSE
      Lv_UsrCreacion := Pv_UsrCreacion;
    END IF;

    IF Pv_ObsProcesoEjecutante IS NULL THEN
      Lv_ObsProcesoEjecutante := ' por traslado de servicio';
    ELSE
      Lv_ObsProcesoEjecutante := Pv_ObsProcesoEjecutante;
    END IF;
    OPEN Lc_GetInfoServicioDestino(Pn_IdServicio);
    FETCH Lc_GetInfoServicioDestino INTO Lr_RegInfoServicioDestino;
    CLOSE Lc_GetInfoServicioDestino;
    Ln_IdServicioOrigen    := COALESCE(TO_NUMBER(REGEXP_SUBSTR(
                                DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(Pn_IdServicio,'TRASLADO'),'^\d+')), 0);
    IF Ln_IdServicioOrigen IS NOT NULL AND Ln_IdServicioOrigen > 0 THEN
      OPEN Lc_GetInfoServicioAVerificar(Ln_IdServicioOrigen);
      FETCH Lc_GetInfoServicioAVerificar INTO Lr_RegClienteOrigenAVerificar;
      CLOSE Lc_GetInfoServicioAVerificar;
      IF Lr_RegClienteOrigenAVerificar.ID_SERVICIO IS NOT NULL THEN
        Lr_DataGeneralClienteServicio                       := NULL;
        Lr_DataGeneralClienteServicio.ID_SERVICIO           := Lr_RegInfoServicioDestino.ID_SERVICIO;
        Lr_DataGeneralClienteServicio.TIPO_ORDEN            := Lr_RegInfoServicioDestino.TIPO_ORDEN;
        Lr_DataGeneralClienteServicio.ESTADO_SERVICIO       := Lr_RegInfoServicioDestino.ESTADO_SERVICIO;
        Lr_DataGeneralClienteServicio.ID_PUNTO              := Lr_RegInfoServicioDestino.ID_PUNTO;
        Lr_DataGeneralClienteServicio.LOGIN                 := Lr_RegInfoServicioDestino.LOGIN;
        Lr_DataGeneralClienteServicio.CLIENTE               := Lr_RegClienteOrigenAVerificar.CLIENTE;
        Lr_DataGeneralClienteServicio.NOMBRE_JURISDICCION   := Lr_RegInfoServicioDestino.NOMBRE_JURISDICCION;
        Lr_DataGeneralClienteServicio.TIPO_SERVICIO         := 'Plan';
        Lr_DataGeneralClienteServicio.ID_PLAN               := Lr_RegClienteOrigenAVerificar.ID_PLAN;
        Lr_DataGeneralClienteServicio.NOMBRE_PLAN           := Lr_RegClienteOrigenAVerificar.NOMBRE_PLAN;
        Lr_DataGeneralClienteServicio.ID_PRODUCTO           := NULL;
        Lr_DataGeneralClienteServicio.DESCRIPCION_PRODUCTO  := NULL;

        --Se verifica si la tecnología es permitida para equipos Dual Band
        Lr_RespuestaBusqTecnologiaDb       := NULL;
        Lr_ParametroDetalleBusqueda        := NULL;
        Lr_ParametroDetalleBusqueda.VALOR1 := Lv_ModelosOltEquiposdb;
        Lr_ParametroDetalleBusqueda.VALOR2 := Lr_RegClienteOrigenAVerificar.NOMBRE_MARCA_OLT;
        Lr_ParametroDetalleBusqueda.VALOR3 := Lr_RegClienteOrigenAVerificar.NOMBRE_MODELO_OLT;
        Lr_ParametroDetalleBusqueda.VALOR4 := NULL;
        Lr_ParametroDetalleBusqueda.VALOR5 := NULL;
        Lrf_BusquedaTecnologiaDb           := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_PARAMS_SERVICIOS_MD(Lr_ParametroDetalleBusqueda);
        FETCH Lrf_BusquedaTecnologiaDb INTO Lr_RespuestaBusqTecnologiaDb;
        IF Lr_RespuestaBusqTecnologiaDb.ID_PARAMETRO_DET IS NOT NULL THEN
          Lv_TecnologiaPermitidaDb          := 'SI';
          Lv_PermitidoWYExtenderEnPlanes    := Lr_RespuestaBusqTecnologiaDb.VALOR4;
        ELSE
          Lv_TecnologiaPermitidaDb := 'NO';
        END IF;
        IF Lv_TecnologiaPermitidaDb = 'SI' AND Lv_PermitidoWYExtenderEnPlanes = 'SI' THEN
          --Se verifica los equipos del servicio de Internet origen
          DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_EQUIPOS_W_Y_EXTENDER('SI',
                                                                    'SI', 
                                                                    Lr_RegClienteOrigenAVerificar.NOMBRE_MARCA_OLT, 
                                                                    Lr_RegClienteOrigenAVerificar.NOMBRE_MODELO_OLT, 
                                                                    Lr_RegClienteOrigenAVerificar.NOMBRE_MODELO_ONT, 
                                                                    Lr_RegClienteOrigenAVerificar.ID_INTERFACE_ONT, 
                                                                    Lv_Status, 
                                                                    Lv_MsjError, 
                                                                    Lv_ServicioOrigenSinEquipoWdb, 
                                                                    Lv_ServicioOrigenSinEquipoEdb, 
                                                                    Ln_IdElementoSiguiente, 
                                                                    Ln_IdInterfaceEleSiguiente);
          IF Lv_Status = 'ERROR' THEN
            RAISE Le_Exception;
          END IF;
          --Se verifica los detalles del plan del servicio origen
          DB_COMERCIAL.TECNK_SERVICIOS.P_VERIF_DET_PLAN_W_Y_EXTENDER( Lr_RegClienteOrigenAVerificar.ID_PLAN, 
                                                                      Lv_Status, 
                                                                      Lv_MsjError, 
                                                                      Lv_PlanConDetalleWdb, 
                                                                      Lv_PlanConDetalleEdb);
          IF Lv_Status = 'ERROR' THEN
            RAISE Le_Exception;
          END IF;
          --Se verifica si el nuevo plan tiene el detalle del Wifi Dual Band
          IF Lv_PlanConDetalleWdb = 'SI' THEN
            --Si el nuevo plan tiene el detalle del Wifi Dual Band
            --Se verifica si el Wifi Dual Band está a nivel de equipos del servicio
            IF Lv_ServicioOrigenSinEquipoWdb = 'SI' THEN
              --El servicio no tiene el Wifi Dual Band en la data técnica
              --Se creará la solicitud de agregar equipo con el detalle del Wifi Dual Band
              Lv_CreaSolAgregarEquipo := 'SI';
              Lv_CreaSolCaractWdb     := 'SI';
            END IF;
            --Se cancelarán/eliminarán lógicamente todos los servicios adicionales Wifi Dual Band
            --Si tiene el equipo Wifi Dual Band, se elimina para regularizar aquellas solicitudes que quedaron abiertas y ya no aplican
            --Si no tiene el equipo Wifi Dual Band, se elimina  solicitudes que están abiertas ya que se creará una nueva
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                  Lv_NombreTecnicoWdb, 
                                                                                  NULL, 
                                                                                  NULL, 
                                                                                  NULL, 
                                                                                  Lv_ObsProcesoEjecutante, 
                                                                                  Lv_UsrCreacion, 
                                                                                  Lv_IpCreacion, 
                                                                                  Lv_Status, 
                                                                                  Lv_MsjError );
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegInfoServicioDestino.ID_PUNTO, 
                                                                                  Lv_NombreTecnicoWdb, 
                                                                                  NULL, 
                                                                                  NULL, 
                                                                                  NULL, 
                                                                                  Lv_ObsProcesoEjecutante, 
                                                                                  Lv_UsrCreacion, 
                                                                                  Lv_IpCreacion, 
                                                                                  Lv_Status, 
                                                                                  Lv_MsjError);
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
          ELSE
            --Si el plan no tiene el detalle del wifi Dual Band
            --Se verifica si el Wifi Dual Band está a nivel de equipos del servicio
            IF Lv_ServicioOrigenSinEquipoWdb = 'NO' THEN
              --El servicio si tiene el Wifi Dual Band en la data técnica
              --Se obtiene el último servicio adicional Wifi Dual Band válido que está relacionado al equipo Wifi Dual Band
              OPEN Lc_GetServAdicDualBandValido(Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                Lr_RegClienteOrigenAVerificar.ID_ONT, 
                                                Lr_RegClienteOrigenAVerificar.ID_INTERFACE_ONT, 
                                                Lv_NombreTecnicoWdb);
              FETCH Lc_GetServAdicDualBandValido INTO Ln_IdServicioWdbAdic;
              CLOSE Lc_GetServAdicDualBandValido;
              IF Ln_IdServicioWdbAdic IS NOT NULL THEN
                --Existe un servicio adicional Wifi Dual Band válido con los datos de los equipos
                --Se elimina el resto de servicios adicionales Wifi Dual Band que existieran
                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                      Lv_NombreTecnicoWdb, 
                                                                                      NULL, 
                                                                                      Ln_IdServicioWdbAdic, 
                                                                                      NULL, 
                                                                                      Lv_ObsProcesoEjecutante, 
                                                                                      Lv_UsrCreacion, 
                                                                                      Lv_IpCreacion, 
                                                                                      Lv_Status, 
                                                                                      Lv_MsjError);
                IF Lv_Status = 'ERROR' THEN
                  RAISE Le_Exception;
                END IF;
              END IF;
            END IF;
          END IF;
          --Se verifica si el plan tiene el detalle del Extender Dual Band
          IF Lv_PlanConDetalleEdb = 'SI' THEN
            --Si el plan tiene el detalle del Extender Dual Band
            --Se verifica si el Extender Dual Band está a nivel de equipos del servicio
            IF Lv_ServicioOrigenSinEquipoEdb = 'NO' THEN
              --El servicio si tiene el Extender Dual Band en la data técnica por lo que se valida si pertenece a un servicio adicional
              OPEN Lc_GetServAdicDualBandValido(Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                Ln_IdElementoSiguiente, 
                                                Ln_IdInterfaceEleSiguiente, 
                                                Lv_NombreTecnicoEdb);
              FETCH Lc_GetServAdicDualBandValido INTO Ln_IdServicioEdbAdic;
              CLOSE Lc_GetServAdicDualBandValido;
              IF Ln_IdServicioEdbAdic IS NOT NULL THEN
                --El equipo pertenece a un servicio Extender Dual Band adicional, por lo que se elimina dicho servicio,
                --ya que ahora dicho extender será el que pasará a formar parte del plan
                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                      Lv_NombreTecnicoEdb, 
                                                                                      Ln_IdServicioEdbAdic, 
                                                                                      NULL, 
                                                                                      NULL,
                                                                                      Lv_ObsProcesoEjecutante, 
                                                                                      Lv_UsrCreacion, 
                                                                                      Lv_IpCreacion, 
                                                                                      Lv_Status, 
                                                                                      Lv_MsjError );
                IF Lv_Status = 'ERROR' THEN
                  RAISE Le_Exception;
                END IF;
              END IF;
            ELSE
              --El Extender Dual Band no está en la data técnica
              --Se creará la solicitud de agregar equipo con el detalle del Extender Dual Band
              Lv_CreaSolAgregarEquipo := 'SI';
              Lv_CreaSolCaractEdb     := 'SI';
            END IF;
          END IF;
          IF Lv_CreaSolAgregarEquipo                            = 'SI' THEN
            --Se eliminan solicitudes de agregar equipo anteriores asociadas al punto destino
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV(   Lr_DataGeneralClienteServicio.ID_SERVICIO, 
                                                                                    NULL, 
                                                                                    Lv_Status, 
                                                                                    Lv_MsjError, 
                                                                                    Lcl_DetalleSolsEliminadas);
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;
            --Se eliminan solicitudes que gestionen ONTs ya que se lo va a gestionar por medio de la solicitud de agregar equipo
            IF Lv_CreaSolCaractWdb = 'SI' THEN
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_GESTIONA_ONT(   Lr_DataGeneralClienteServicio.ID_SERVICIO, 
                                                                                    NULL, 
                                                                                    Lv_Status, 
                                                                                    Lv_MsjError, 
                                                                                    Lcl_DetalleSolsEliminadas);

            END IF;


            Lr_RegClienteDestinoAVerificar.ID_SERVICIO         := Lr_DataGeneralClienteServicio.ID_SERVICIO;
            Lr_RegClienteDestinoAVerificar.ESTADO_SERVICIO     := Lr_DataGeneralClienteServicio.ESTADO_SERVICIO;
            Lr_RegClienteDestinoAVerificar.ID_PUNTO            := Lr_DataGeneralClienteServicio.ID_PUNTO;
            Lr_RegClienteDestinoAVerificar.LOGIN               := Lr_DataGeneralClienteServicio.LOGIN;
            Lr_RegClienteDestinoAVerificar.CLIENTE             := Lr_RegClienteOrigenAVerificar.CLIENTE;
            Lr_RegClienteDestinoAVerificar.NOMBRE_JURISDICCION := Lr_DataGeneralClienteServicio.NOMBRE_JURISDICCION;
            Lr_RegClienteDestinoAVerificar.ID_PLAN             := Lr_RegClienteOrigenAVerificar.ID_PLAN;
            Lr_RegClienteDestinoAVerificar.NOMBRE_PLAN         := Lr_RegClienteOrigenAVerificar.NOMBRE_PLAN;
            Lr_RegClienteDestinoAVerificar.ID_OLT              := Lr_RegClienteOrigenAVerificar.ID_OLT;
            Lr_RegClienteDestinoAVerificar.NOMBRE_OLT          := Lr_RegClienteOrigenAVerificar.NOMBRE_OLT;
            Lr_RegClienteDestinoAVerificar.NOMBRE_MARCA_OLT    := Lr_RegClienteOrigenAVerificar.NOMBRE_MARCA_OLT;
            Lr_RegClienteDestinoAVerificar.NOMBRE_MODELO_OLT   := Lr_RegClienteOrigenAVerificar.NOMBRE_MODELO_OLT;
            Lr_RegClienteDestinoAVerificar.ID_ONT              := Lr_RegClienteOrigenAVerificar.ID_ONT;
            Lr_RegClienteDestinoAVerificar.NOMBRE_ONT          := Lr_RegClienteOrigenAVerificar.NOMBRE_ONT;
            Lr_RegClienteDestinoAVerificar.NOMBRE_MODELO_ONT   := Lr_RegClienteOrigenAVerificar.NOMBRE_MODELO_ONT;
            Lr_RegClienteDestinoAVerificar.ID_INTERFACE_ONT    := Lr_RegClienteOrigenAVerificar.ID_INTERFACE_ONT;
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CREA_SOL_AGREGAR_DUAL_BAND(Lr_RegClienteDestinoAVerificar, 
                                                                                Ln_IdServicioOrigen,
                                                                                Lv_CreaSolCaractWdb, 
                                                                                Lv_CreaSolCaractEdb, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion,
                                                                                Lv_Status, 
                                                                                Lv_MsjError);
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;



            --Se creará una solicitud de agregar equipo para el extender pero no por el Wifi Dual Band, por lo que se clonarán las solicitides 
            --que gestionan el CPE ONT
            IF Lv_CreaSolCaractWdb <> 'SI' THEN
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CLONACION_SOLICITUDES( Lr_DataGeneralClienteServicio, 
                                                                              Ln_IdServicioOrigen,
                                                                              Lv_ObsProcesoEjecutante,
                                                                              Lv_UsrCreacion, 
                                                                              Lv_IpCreacion,
                                                                              Lv_Status,
                                                                              Lv_MsjError);
              IF Lv_Status = 'ERROR' THEN
                RAISE Le_Exception;
              END IF;
            END IF;
          ELSE
            --Clonación de solicitudes
            --Se clonan las solicitudes que haya tenido el servicio origen
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CLONACION_SOLICITUDES( Lr_DataGeneralClienteServicio, 
                                                                            Ln_IdServicioOrigen,
                                                                            Lv_ObsProcesoEjecutante,
                                                                            Lv_UsrCreacion, 
                                                                            Lv_IpCreacion,
                                                                            Lv_Status,
                                                                            Lv_MsjError);
            IF Lv_Status = 'ERROR' THEN
              RAISE Le_Exception;
            END IF;

            --Servicios cuyos planes no incluyen productos Dual Band, por lo que se procede a verificar si no tiene SmartWifi y si no tiene,
            --se procede a eliminar las solicitudes abiertas en caso que existieran
            Ln_IdItemSmartWifi    := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ITEM_PROD_EN_PLAN(Lr_RegClienteOrigenAVerificar.ID_PLAN, 
                                                                                          NULL, 
                                                                                          NULL, 
                                                                                          'Renta SmartWiFi (Aironet 1602)');

            Ln_IdDetSolCaractSolCambioOnt   := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ID_DET_SOL_CARACT_VALIDA( NULL, 
                                                                                                            Lr_RegInfoServicioDestino.ID_SERVICIO, 
                                                                                                            'ID_SERVICIO', 
                                                                                                            Lv_CaractMotivoCreacionSol, 
                                                                                                            Lv_ValorMotivoCreacionSol);



            IF Ln_IdItemSmartWifi IS NULL AND Ln_IdDetSolCaractSolCambioOnt IS NULL THEN
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( Lr_RegClienteOrigenAVerificar.ID_SERVICIO, 
                                                                                    NULL, 
                                                                                    Lv_Status, 
                                                                                    Lv_MsjError, 
                                                                                    Lcl_DetalleSolsEliminadas );
              IF Lv_Status                           = 'OK' THEN
                IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
                  Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                  Lr_ServicioHistorial              := NULL;
                  Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegClienteOrigenAVerificar.ID_SERVICIO;
                  Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
                  Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
                  Lr_ServicioHistorial.ESTADO       := Lr_RegClienteOrigenAVerificar.ESTADO_SERVICIO;
                  Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
                  DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
                  IF Lv_MsjError IS NOT NULL THEN
                    RAISE Le_Exception;
                  END IF;
                END IF;
              ELSE
                RAISE Le_Exception;
              END IF;
              Lcl_DetalleSolsEliminadas := '';
              DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( Lr_RegInfoServicioDestino.ID_SERVICIO, 
                                                                                    NULL, 
                                                                                    Lv_Status, 
                                                                                    Lv_MsjError, 
                                                                                    Lcl_DetalleSolsEliminadas );
              IF Lv_Status                           = 'OK' THEN
                IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
                  Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                  Lr_ServicioHistorial              := NULL;
                  Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegInfoServicioDestino.ID_SERVICIO;
                  Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
                  Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
                  Lr_ServicioHistorial.ESTADO       := Lr_RegInfoServicioDestino.ESTADO_SERVICIO;
                  Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
                  DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
                  IF Lv_MsjError IS NOT NULL THEN
                    RAISE Le_Exception;
                  END IF;
                END IF;
              ELSE
                RAISE Le_Exception;
              END IF;
            END IF;
          END IF;
        ELSIF Lv_TecnologiaPermitidaDb = 'SI' THEN
          --Se eliminan servicios Wifi Dual Band en caso de que existan de manera errónea para ZTE
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegInfoServicioDestino.ID_PUNTO, 
                                                                                Lv_NombreTecnicoWdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'NO', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                Lv_NombreTecnicoWdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'SI', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
        ELSE
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegInfoServicioDestino.ID_PUNTO, 
                                                                                Lv_NombreTecnicoWdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'NO', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegInfoServicioDestino.ID_PUNTO, 
                                                                                Lv_NombreTecnicoEdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'NO', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                Lv_NombreTecnicoWdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'SI', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CANCEL_ELIM_SERVS_DUAL_BAND( Lr_RegClienteOrigenAVerificar.ID_PUNTO, 
                                                                                Lv_NombreTecnicoEdb, 
                                                                                NULL, 
                                                                                NULL, 
                                                                                'SI', 
                                                                                Lv_ObsProcesoEjecutante, 
                                                                                Lv_UsrCreacion, 
                                                                                Lv_IpCreacion, 
                                                                                Lv_Status, 
                                                                                Lv_MsjError );
          --Servicios cuyos planes no tienen una tecnología permitida para equipos Dual Band, por lo que se procede a verificar si no tiene SmartWifi
          --y si no tiene, se procede a eliminar las solicitudes abiertas en caso que existieran
          Ln_IdItemSmartWifi    := DB_COMERCIAL.TECNK_SERVICIOS.F_GET_ITEM_PROD_EN_PLAN(Lr_RegClienteOrigenAVerificar.ID_PLAN, 
                                                                                        NULL, 
                                                                                        NULL, 
                                                                                        'Renta SmartWiFi (Aironet 1602)');
          IF Ln_IdItemSmartWifi IS NULL THEN
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( Lr_RegClienteOrigenAVerificar.ID_SERVICIO, 
                                                                                  NULL, 
                                                                                  Lv_Status, 
                                                                                  Lv_MsjError, 
                                                                                  Lcl_DetalleSolsEliminadas );
            IF Lv_Status                           = 'OK' THEN
              IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
                Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                Lr_ServicioHistorial              := NULL;
                Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegClienteOrigenAVerificar.ID_SERVICIO;
                Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
                Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
                Lr_ServicioHistorial.ESTADO       := Lr_RegClienteOrigenAVerificar.ESTADO_SERVICIO;
                Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
                IF Lv_MsjError IS NOT NULL THEN
                  RAISE Le_Exception;
                END IF;
              END IF;
            ELSE
              RAISE Le_Exception;
            END IF;
            Lcl_DetalleSolsEliminadas := '';
            DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_ELIMINA_SOLS_DUAL_BAND_SERV( Lr_RegInfoServicioDestino.ID_SERVICIO, 
                                                                                  NULL, 
                                                                                  Lv_Status, 
                                                                                  Lv_MsjError, 
                                                                                  Lcl_DetalleSolsEliminadas );
            IF Lv_Status                           = 'OK' THEN
              IF Lcl_DetalleSolsEliminadas        IS NOT NULL THEN
                Lcl_Observacion                   := LclInicioDetalleSolsEliminadas || Lcl_DetalleSolsEliminadas || LclFinDetalleSolsEliminadas;
                Lr_ServicioHistorial              := NULL;
                Lr_ServicioHistorial.SERVICIO_ID  := Lr_RegInfoServicioDestino.ID_SERVICIO;
                Lr_ServicioHistorial.USR_CREACION := Lv_UsrCreacion;
                Lr_ServicioHistorial.IP_CREACION  := Lv_IpCreacion;
                Lr_ServicioHistorial.ESTADO       := Lr_RegInfoServicioDestino.ESTADO_SERVICIO;
                Lr_ServicioHistorial.OBSERVACION  := Lcl_Observacion;
                DB_COMERCIAL.COMEK_MODELO.COMEP_INSERT_SERVICIO_HISTORIA(Lr_ServicioHistorial, Lv_MsjError);
                IF Lv_MsjError IS NOT NULL THEN
                  RAISE Le_Exception;
                END IF;
              END IF;
            ELSE
              RAISE Le_Exception;
            END IF;
          END IF;

          --Se clonan las solicitudes que haya tenido el servicio origen
          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_CLONACION_SOLICITUDES( Lr_DataGeneralClienteServicio, 
                                                                          Ln_IdServicioOrigen,
                                                                          Pv_ObsProcesoEjecutante,
                                                                          Lv_UsrCreacion, 
                                                                          Lv_IpCreacion,
                                                                          Lv_Status,
                                                                          Lv_MsjError);
          IF Lv_Status = 'ERROR' THEN
            RAISE Le_Exception;
          END IF;

        END IF;
      ELSE
        Lv_MsjError := 'No se ha podido obtener la data técnica del servicio origen con ID' || Ln_IdServicioOrigen;
        RAISE Le_Exception;
      END IF;
    ELSE
      Lv_MsjError := 'No se ha podido obtener el id del servicio origen';
      RAISE Le_Exception;
    END IF;
    Pv_Status   := 'OK';
    Pv_MsjError := '';
    COMMIT;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_MsjError := Lv_MsjError;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_GENERA_SOLS_POR_TRASLADO', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status   := 'ERROR';
    Lv_MsjError := 'Error inesperado ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                    || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    Pv_MsjError := 'Ha ocurrido un error al intentar trasladar las solicitudes del servicio origen del traslado. Por favor comuníquese con Sistemas!';
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 
                                          'INFRK_TRANSACCIONES.P_GENERA_SOLS_POR_TRASLADO', 
                                          Lv_MsjError, 
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 
                                          'DB_INFRAESTRUCTURA'), 
                                          SYSDATE, 
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_GENERA_SOLS_POR_TRASLADO;

  PROCEDURE P_GET_CSV_PUNTOS_CORTE_MASIVO(
    Pcl_JsonFiltrosBusqueda IN CLOB,
    Pv_UsrConsulta          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_MsjError             OUT VARCHAR2,
    Pn_IdDocumento          OUT NUMBER)
  AS
    Lv_UsrConsulta                  VARCHAR2(20);
    Lv_Status                       VARCHAR2(5);
    Lv_MsjError                     VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Ln_TotalPuntosCorteMasivo       NUMBER;
    Lrf_PuntosCorteMasivo           SYS_REFCURSOR;
    Lf_ArchivoCorteMasivo           UTL_FILE.FILE_TYPE;
    Lv_FechaArchivo                 VARCHAR2(20)  := TO_CHAR(SYSDATE, 'DD-MM-YYYY-HH24_MI_SS');
    Lv_NombreArchivo                VARCHAR2(100);
    Lv_PrefijoNombreArchivo         VARCHAR2(100) := 'ClienteCorteMasivo_';
    Lv_Delimitador                  VARCHAR2(1)   := '|';
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_FechaCreacionDoc             VARCHAR2(10);
    Lv_TiposDocumentos              VARCHAR2(100);
    Lv_NombreTipoDocumento          VARCHAR2(400);
    Lv_NombresTiposDocBusqueda      VARCHAR2(4000);
    Lv_NumDocsAbiertos              VARCHAR2(10);
    Lv_ValorMontoCartera            VARCHAR2(10);
    Ln_ValorMinMontoCartera         NUMBER := 5;
    Lv_IdTipoNegocio                VARCHAR2(10);
    Ln_IdTipoNegocio                NUMBER;
    Lv_ValorClienteCanal            VARCHAR2(20);
    Lv_NombreUltimaMilla            VARCHAR2(20);
    Lv_IdCicloFacturacion           VARCHAR2(10);
    Ln_IdCicloFacturacion           NUMBER;
    Lv_IdsOficinas                  VARCHAR2(32767);
    Lv_IdsFormasPago                VARCHAR2(32767);
    Lv_ValorCuentaTarjeta           VARCHAR2(100);
    Lv_EsTarjeta                    VARCHAR2(1);
    Lv_IdsTiposCuentaTarjeta        VARCHAR2(4000);
    Lv_IdsBancos                    VARCHAR2(32767);
    Lv_NombreTipoNegocio            DB_COMERCIAL.ADMI_TIPO_NEGOCIO.NOMBRE_TIPO_NEGOCIO%TYPE;
    Lv_NombreCiclo                  DB_FINANCIERO.ADMI_CICLO.NOMBRE_CICLO%TYPE;
    Lv_NombreOficina                DB_COMERCIAL.INFO_OFICINA_GRUPO.NOMBRE_OFICINA%TYPE;
    Lv_OficinasBusqueda             VARCHAR2(32767);
    Lv_DescripcionFormaPago         DB_GENERAL.ADMI_FORMA_PAGO.DESCRIPCION_FORMA_PAGO%TYPE;
    Lv_FormasPagoBusqueda           VARCHAR2(32767);
    Lv_DescripcionCuenta            DB_GENERAL.ADMI_TIPO_CUENTA.DESCRIPCION_CUENTA%TYPE;
    Lv_CuentasBusqueda              VARCHAR2(4000);
    Lv_DescripcionBanco             DB_GENERAL.ADMI_BANCO.DESCRIPCION_BANCO%TYPE;
    Lv_BancosBusqueda               VARCHAR2(32767);
    Lr_RegPuntosCorteMasivo         DB_INFRAESTRUCTURA.INKG_TYPES.Lr_PuntosCorteMasivo;
    Lt_TPuntosCorteMasivo           DB_INFRAESTRUCTURA.INKG_TYPES.Lt_PuntosCorteMasivo;
    Ln_IndxPuntosCorteMasivo        NUMBER;
    Lcl_JsonFiltrosBusqueda         CLOB;
    Ln_IdDocumento                  DB_COMUNICACION.INFO_DOCUMENTO.ID_DOCUMENTO%TYPE;
    Lv_SubModuloProcesMasivo        VARCHAR2(14) := 'CorteMasivo';
    Lv_NombreParamDirBdArchivosTmp  VARCHAR2(33) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
    Lv_NombreParamUrlMicroNfs       VARCHAR2(33) := 'URL_MICROSERVICIO_NFS';
    Lv_ParamCabNombreParametro      VARCHAR2(36) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_ParamDetValor1CorteMasivo    VARCHAR2(13) := 'CORTE_MASIVO';
    Lv_ParamDetValor2TipoDoc        VARCHAR2(20) := 'TIPOS_DE_DOCUMENTOS';
    Lv_NombreArchivoAdjunto         VARCHAR2(4000);
    Lv_InstaladosHasta              VARCHAR2(1000);
    Lv_PrefijoEmpresa               VARCHAR2(5);
    Lv_CodigoEmpresa                VARCHAR2(5);
    Ln_TamExcluidos                 NUMBER := 0;
    Ln_TamNoExcluidos               NUMBER := 0;
    Ln_TamGeneral                   NUMBER := 0;

    CURSOR Lc_GetValoresParamsGeneral(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1, DET.VALOR2
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;  

    CURSOR Lc_GetConfigNfsCorteMasivo 
    IS
      SELECT TO_CHAR(CODIGO_APP) AS CODIGO_APP, TO_CHAR(CODIGO_PATH) AS CODIGO_PATH 
      FROM DB_GENERAL.ADMI_GESTION_DIRECTORIOS
      WHERE APLICACION ='TelcosWeb' 
      AND SUBMODULO = Lv_SubModuloProcesMasivo
      AND EMPRESA = (SELECT EMP_GRUPO.PREFIJO FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO EMP_GRUPO
                      WHERE EMP_GRUPO.COD_EMPRESA = Lv_CodigoEmpresa);

    Lv_DirectorioBaseDatos          VARCHAR2(100);
    Lv_RutaDirectorioBaseDatos      VARCHAR2(500);
    Lr_RegGetConfigNfsCorteMasivo   Lc_GetConfigNfsCorteMasivo%ROWTYPE;
    Lv_CodigoAppCorteMasivo         VARCHAR2(10);
    Lv_CodigoPathCorteMasivo        VARCHAR2(10);
    Lv_UrlMicroServicioNfs          VARCHAR2(500);
    Lv_PathGuardarArchivo           VARCHAR2(4000);
    Lv_ParamsGuardarArchivo         VARCHAR2(4000);
    Lv_RespuestaGuardarArchivo      VARCHAR2(4000);
    Ln_CodeGuardarArchivo           NUMBER;
    Ln_CountArchivosGuardados       NUMBER;
    Lr_RegGetValoresParamsGeneral   Lc_GetValoresParamsGeneral%ROWTYPE;

  BEGIN
    IF Pv_UsrConsulta IS NOT NULL THEN
      Lv_UsrConsulta := Pv_UsrConsulta;
    ELSE
      Lv_UsrConsulta := 'userAutomatico';
    END IF;

    Lcl_JsonFiltrosBusqueda   := Pcl_JsonFiltrosBusqueda;
    APEX_JSON.PARSE(Lcl_JsonFiltrosBusqueda);
    Lv_FechaCreacionDoc       := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strFechaCreacionDoc'));
    Lv_TiposDocumentos        := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strTiposDocumentos'));
    Lv_NumDocsAbiertos        := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strNumDocsAbiertos'));
    Lv_ValorMontoCartera      := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strValorMontoCartera'));
    Lv_IdTipoNegocio          := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdTipoNegocio'));
    Lv_ValorClienteCanal      := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strValorClienteCanal'));
    Lv_NombreUltimaMilla      := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strNombreUltimaMilla'));
    Lv_IdCicloFacturacion     := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdCicloFacturacion'));
    Lv_IdsOficinas            := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdsOficinas'));
    Lv_IdsFormasPago          := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdsFormasPago'));
    Lv_ValorCuentaTarjeta     := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strValorCuentaTarjeta'));
    Lv_IdsTiposCuentaTarjeta  := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdsTiposCuentaTarjeta'));
    Lv_IdsBancos              := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdsBancos'));
    Lv_NombreArchivoAdjunto   := SUBSTR(TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strNombreArchivoAdjunto')),1,4000);
    Lv_InstaladosHasta        := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strFechaLimActivacion'));
    Lv_CodigoEmpresa          := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strCodEmpresa'));

    IF Lv_InstaladosHasta IS NOT NULL AND LENGTH(Lv_InstaladosHasta) = 10 THEN
        Lv_InstaladosHasta := TO_CHAR(TO_DATE(Lv_InstaladosHasta, 'YYYY-MM-DD'),'MON/YYYY');
    END IF;

    --Filtro por Tipos de documentos
    IF Lv_TiposDocumentos IS NOT NULL THEN
      FOR CURRENT_ROW IN
      ( WITH TEST AS
      (SELECT Lv_TiposDocumentos FROM DUAL
      )
    SELECT REGEXP_SUBSTR(Lv_TiposDocumentos, '[^,]+', 1, ROWNUM) SPLIT
    FROM TEST
      CONNECT BY LEVEL <= LENGTH (REGEXP_REPLACE(Lv_TiposDocumentos, '[^,]+')) + 1
      )
      LOOP
        SELECT DET.VALOR3
        INTO Lv_NombreTipoDocumento
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
        ON DET.PARAMETRO_ID = CAB.ID_PARAMETRO
        WHERE CAB.NOMBRE_PARAMETRO = Lv_ParamCabNombreParametro
        AND CAB.ESTADO = Lv_EstadoActivo
        AND DET.VALOR1 = Lv_ParamDetValor1CorteMasivo
        AND DET.VALOR2 = Lv_ParamDetValor2TipoDoc
        AND DET.VALOR4 = CURRENT_ROW.SPLIT
        AND DET.ESTADO = Lv_EstadoActivo;
        IF(Lv_NombreTipoDocumento IS NOT NULL) THEN
          Lv_NombresTiposDocBusqueda := Lv_NombresTiposDocBusqueda || '' || Lv_NombreTipoDocumento || ', ';
        END IF;
      END LOOP;
    END IF;

    IF Lv_ValorMontoCartera IS NOT NULL THEN
      Lv_ValorMontoCartera := ' >= ' || Lv_ValorMontoCartera;
    ELSE
      Lv_ValorMontoCartera := ' > ' || Ln_ValorMinMontoCartera;
    END IF;

    IF Lv_IdTipoNegocio IS NOT NULL THEN
      Ln_IdTipoNegocio := TO_NUMBER(Lv_IdTipoNegocio, '9999.99');
    END IF;

    IF Lv_IdCicloFacturacion IS NOT NULL THEN
      Ln_IdCicloFacturacion := TO_NUMBER(Lv_IdCicloFacturacion, '9999.99');
    END IF;

    OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamDirBdArchivosTmp);
    FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
    CLOSE Lc_GetValoresParamsGeneral;
    Lv_DirectorioBaseDatos      := Lr_RegGetValoresParamsGeneral.VALOR1;
    IF Lv_DirectorioBaseDatos IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener el directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;
    Lv_RutaDirectorioBaseDatos  := Lr_RegGetValoresParamsGeneral.VALOR2;
    IF Lv_RutaDirectorioBaseDatos IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener la rura del directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;  

    OPEN Lc_GetConfigNfsCorteMasivo;
    FETCH Lc_GetConfigNfsCorteMasivo INTO Lr_RegGetConfigNfsCorteMasivo;
    CLOSE Lc_GetConfigNfsCorteMasivo;
    Lv_CodigoAppCorteMasivo     := Lr_RegGetConfigNfsCorteMasivo.CODIGO_APP;
    Lv_CodigoPathCorteMasivo    := Lr_RegGetConfigNfsCorteMasivo.CODIGO_PATH;
    IF Lv_CodigoAppCorteMasivo IS NULL OR Lv_CodigoPathCorteMasivo IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener la configuraci¿n de la ruta NFS';
      RAISE Le_Exception;
    END IF;

    Lr_RegGetValoresParamsGeneral := NULL;
    OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamUrlMicroNfs);
    FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
    CLOSE Lc_GetValoresParamsGeneral;
    Lv_UrlMicroServicioNfs  := Lr_RegGetValoresParamsGeneral.VALOR1;
    IF Lv_UrlMicroServicioNfs IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener la URL del NFS';
      RAISE Le_Exception;
    END IF;

    --Filtro por tipo de negocio
    IF Ln_IdTipoNegocio IS NOT NULL THEN
      SELECT NOMBRE_TIPO_NEGOCIO INTO Lv_NombreTipoNegocio FROM DB_COMERCIAL.ADMI_TIPO_NEGOCIO WHERE ID_TIPO_NEGOCIO = Ln_IdTipoNegocio;
    END IF;

    --Filtro por ciclo de facturaci¿n
    IF Ln_IdCicloFacturacion IS NOT NULL THEN
      SELECT NOMBRE_CICLO INTO Lv_NombreCiclo FROM DB_FINANCIERO.ADMI_CICLO WHERE ID_CICLO = Ln_IdCicloFacturacion;
    END IF;

    --Filtro por Oficinas
    IF Lv_IdsOficinas IS NOT NULL THEN
      FOR CURRENT_ROW IN
      ( WITH TEST AS
      (SELECT Lv_IdsOficinas FROM DUAL
      )
    SELECT REGEXP_SUBSTR(Lv_IdsOficinas, '[^,]+', 1, ROWNUM) SPLIT
    FROM TEST
      CONNECT BY LEVEL <= LENGTH (REGEXP_REPLACE(Lv_IdsOficinas, '[^,]+')) + 1
      )
      LOOP
        SELECT NOMBRE_OFICINA
        INTO Lv_NombreOficina
        FROM DB_COMERCIAL.INFO_OFICINA_GRUPO
        WHERE ID_OFICINA         = CURRENT_ROW.SPLIT;
        IF(Lv_NombreOficina IS NOT NULL) THEN
          Lv_OficinasBusqueda   := Lv_OficinasBusqueda || '' || Lv_NombreOficina || ', ';
        END IF;
      END LOOP;
    END IF;

    --Filtro por forma de pago
    IF Lv_IdsFormasPago IS NOT NULL THEN
      FOR CURRENT_ROW IN
      ( WITH TEST AS
      (SELECT Lv_IdsFormasPago FROM DUAL
      )
    SELECT REGEXP_SUBSTR(Lv_IdsFormasPago, '[^,]+', 1, ROWNUM) SPLIT
    FROM TEST
      CONNECT BY LEVEL <= LENGTH (REGEXP_REPLACE(Lv_IdsFormasPago, '[^,]+')) + 1
      )
      LOOP
        SELECT DESCRIPCION_FORMA_PAGO 
        INTO Lv_DescripcionFormaPago
        FROM DB_GENERAL.ADMI_FORMA_PAGO
        WHERE ID_FORMA_PAGO = CURRENT_ROW.SPLIT;
        IF(Lv_DescripcionFormaPago IS NOT NULL) THEN
          Lv_FormasPagoBusqueda   := Lv_FormasPagoBusqueda || '' || Lv_DescripcionFormaPago || ', ';
        END IF;
      END LOOP;
    END IF;

    --Filtro por Tipo de Cuenta
    IF Lv_IdsTiposCuentaTarjeta IS NOT NULL THEN
      FOR CURRENT_ROW IN
      ( WITH TEST AS
      (SELECT Lv_IdsTiposCuentaTarjeta FROM DUAL
      )
    SELECT REGEXP_SUBSTR(Lv_IdsTiposCuentaTarjeta, '[^,]+', 1, ROWNUM) SPLIT
    FROM TEST
      CONNECT BY LEVEL <= LENGTH (REGEXP_REPLACE(Lv_IdsTiposCuentaTarjeta, '[^,]+')) + 1
      )
      LOOP
        SELECT DESCRIPCION_CUENTA
        INTO Lv_DescripcionCuenta
        FROM DB_GENERAL.ADMI_TIPO_CUENTA
        WHERE ID_TIPO_CUENTA     = CURRENT_ROW.SPLIT;
        IF(Lv_DescripcionCuenta IS NOT NULL) THEN
          Lv_CuentasBusqueda    := Lv_CuentasBusqueda || '' || Lv_DescripcionCuenta || ', ';
        END IF;
      END LOOP;
    END IF;

    --Filtro por Bancos
    IF Lv_IdsBancos IS NOT NULL THEN
      FOR CURRENT_ROW IN
      ( WITH TEST AS
      (SELECT Lv_IdsBancos FROM DUAL
      )
    SELECT REGEXP_SUBSTR(Lv_IdsBancos, '[^,]+', 1, ROWNUM) SPLIT
    FROM TEST
      CONNECT BY LEVEL <= LENGTH (REGEXP_REPLACE(Lv_IdsBancos, '[^,]+')) + 1
      )
      LOOP
        SELECT DESCRIPCION_BANCO
        INTO Lv_DescripcionBanco
        FROM DB_GENERAL.ADMI_BANCO
        WHERE ID_BANCO          = CURRENT_ROW.SPLIT;
        IF(Lv_DescripcionBanco IS NOT NULL) THEN
          Lv_BancosBusqueda    := Lv_BancosBusqueda || '' || Lv_DescripcionBanco || ', ';
        END IF;
      END LOOP;
    END IF;

    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_PUNTOS_CORTE_MASIVO( Pcl_JsonFiltrosBusqueda,
                                                            'NO',
                                                            Lv_Status,
                                                            Lv_MsjError,
                                                            Ln_TotalPuntosCorteMasivo,
                                                            Lrf_PuntosCorteMasivo);
    IF Lv_Status = 'ERROR' THEN
      RAISE Le_Exception;
    END IF;

    Lv_NombreArchivo        := Lv_PrefijoNombreArchivo || Lv_UsrConsulta || '_' || Lv_FechaArchivo || '.csv';
    Lf_ArchivoCorteMasivo   := UTL_FILE.FOPEN(Lv_DirectorioBaseDatos, Lv_NombreArchivo, 'w', 32767);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'REPORTE DE CLIENTES CONSULTADOS PARA LA EJECUCION DEL CORTE MASIVO' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'FECHA DE GENERACION: ' || TO_CHAR(SYSDATE, 'DD-MM-YYYY, HH24:MI:SS') || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'FECHA CREACION DOC: ' || Lv_FechaCreacionDoc || Lv_Delimitador ||
                                              'TIPO DE DOCUMENTO: ' || Lv_NombresTiposDocBusqueda || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'DOCS. ABIERTOS: ' || Lv_NumDocsAbiertos || Lv_Delimitador ||
                                              'MONTO CARTERA: ' || Lv_ValorMontoCartera || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'TIPO NEGOCIO: ' || Lv_NombreTipoNegocio || Lv_Delimitador ||
                                              'CLIENTES CANAL: ' || Lv_ValorClienteCanal || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'ULTIMA MILLA: ' || Lv_NombreUltimaMilla || Lv_Delimitador ||
                                              'CICLO DE FACTURACION: ' || Lv_NombreCiclo || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'OFICINAS: ' || Lv_OficinasBusqueda || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'FORMA PAGO: ' || Lv_FormasPagoBusqueda || Lv_Delimitador ||
                                              'CUENTA/TARJETA: ' || Lv_ValorCuentaTarjeta || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'TIPOS DE CUENTA/TARJETA: ' || Lv_CuentasBusqueda || Lv_Delimitador ||
                                              'BANCOS: ' || Lv_BancosBusqueda || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    --Se agrega nuevos filtros
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'INSTALADOS HASTA: ' || Lv_InstaladosHasta || Lv_Delimitador ||
                                              'CLIENTES EXLCUIDOS/DOC: ' || Lv_NombreArchivoAdjunto || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    --Fin
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'LOGIN' || Lv_Delimitador ||
                                              'CLIENTE NOMBRE' || Lv_Delimitador ||
                                              'IDENTIFICACION' || Lv_Delimitador ||
                                              'OFICINA' || Lv_Delimitador ||
                                              'CARTERA' || Lv_Delimitador ||
                                              'FORMA PAGO' || Lv_Delimitador ||
                                              'BANCO/TARJETA' || Lv_Delimitador ||
                                              'TIPO CUENTA/TIPO TARJETA' || Lv_Delimitador ||
                                              'FECHA ACTIVACION' || Lv_Delimitador ||
                                              'TIPO NEGOCIO' || Lv_Delimitador ||
                                              'ULTIMA MILLA' || Lv_Delimitador ||
                                              'ES EXCLUIDO' || Lv_Delimitador);

    LOOP
      FETCH Lrf_PuntosCorteMasivo BULK COLLECT INTO Lt_TPuntosCorteMasivo LIMIT 100;
      Ln_IndxPuntosCorteMasivo        := Lt_TPuntosCorteMasivo.FIRST;

      WHILE (Ln_IndxPuntosCorteMasivo IS NOT NULL)
      LOOP
        Lr_RegPuntosCorteMasivo := Lt_TPuntosCorteMasivo(Ln_IndxPuntosCorteMasivo);
        UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  Lr_RegPuntosCorteMasivo.LOGIN || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.NOMBRE_CLIENTE || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.IDENTIFICACION_CLIENTE || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.NOMBRE_OFICINA || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.SALDO || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.DESCRIPCION_FORMA_PAGO || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.DESCRIPCION_BANCO || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.DESCRIPCION_CUENTA || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.FECHA_ACTIVACION || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.NOMBRE_TIPO_NEGOCIO || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.ULTIMA_MILLA || Lv_Delimitador ||
                                                  Lr_RegPuntosCorteMasivo.ES_EXCLUIDO || Lv_Delimitador);
        IF Lr_RegPuntosCorteMasivo.ES_EXCLUIDO = 'SI' THEN Ln_TamExcluidos := Ln_TamExcluidos + 1; ELSE Ln_TamNoExcluidos := Ln_TamNoExcluidos + 1; END IF;
        Ln_TamGeneral := Ln_TamGeneral + 1;
        Ln_IndxPuntosCorteMasivo := Lt_TPuntosCorteMasivo.NEXT(Ln_IndxPuntosCorteMasivo);
      END LOOP;
      EXIT
    WHEN Lrf_PuntosCorteMasivo%NOTFOUND;
    END LOOP;
    CLOSE Lrf_PuntosCorteMasivo;

    --RESUMEN EXCLUIDOS
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'TOTAL GENERAL: ' || Ln_TamGeneral || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'TOTAL EXCLUIDOS: ' || Ln_TamExcluidos || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);                                          
    UTL_FILE.PUT_LINE(Lf_ArchivoCorteMasivo,  'TOTAL NO EXCLUIDOS: ' || Ln_TamNoExcluidos || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador ||
                                              ' ' || Lv_Delimitador);   

    UTL_FILE.FCLOSE(Lf_ArchivoCorteMasivo);

    Lv_ParamsGuardarArchivo := 'URL NFS: ' || Lv_UrlMicroServicioNfs || ', RUTA_DIRECTORIO: ' || Lv_RutaDirectorioBaseDatos 
                                || ', NOMBRE_ARCHIVO: ' || Lv_NombreArchivo || ', CODIGO_APP: ' || Lv_CodigoAppCorteMasivo 
                                || ', CODIGO_PATH: ' || Lv_CodigoPathCorteMasivo;

    Lv_RespuestaGuardarArchivo  := DB_GENERAL.GNRLPCK_UTIL.F_GUARDAR_ARCHIVO_NFS(   Lv_UrlMicroServicioNfs,
                                                                                    Lv_RutaDirectorioBaseDatos || Lv_NombreArchivo,
                                                                                    Lv_NombreArchivo,
                                                                                    NULL,
                                                                                    Lv_CodigoAppCorteMasivo,
                                                                                    Lv_CodigoPathCorteMasivo);

    IF Lv_RespuestaGuardarArchivo IS NULL THEN
      Lv_MsjError   := 'No se ha podido generar el archivo de manera correcta. Por favor consulte al Dep. de Sistemas!';
      RAISE Le_Exception;
    END IF;

    APEX_JSON.PARSE(Lv_RespuestaGuardarArchivo);
    Ln_CodeGuardarArchivo   := APEX_JSON.GET_NUMBER('code');
    IF Ln_CodeGuardarArchivo IS NULL OR Ln_CodeGuardarArchivo <> 200 THEN
      Lv_MsjError := 'Ha ocurrido alg¿n error al generar el archivo. Por favor consulte al Dep. de Sistemas!';
      RAISE Le_Exception;
    END IF;

    Ln_CountArchivosGuardados := APEX_JSON.GET_COUNT(p_path => 'data');
    IF Ln_CountArchivosGuardados IS NULL THEN
      Lv_MsjError := 'No se ha generado correctamente la ruta del archivo. Por favor consulte al Dep. de Sistemas!';
      RAISE Le_Exception;
    END IF;

    IF Ln_CountArchivosGuardados <> 1 THEN
      Lv_MsjError := 'Ha ocurrido un error inesperado al generar el archivo. Por favor consulte al Dep. de Sistemas!';
      RAISE Le_Exception;
    END IF;

    FOR i IN 1 .. Ln_CountArchivosGuardados LOOP
      Lv_PathGuardarArchivo := APEX_JSON.GET_VARCHAR2(p_path => 'data[%d].pathFile', p0 => i);
    END LOOP;

    IF Lv_PathGuardarArchivo IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener la ruta en la que se encuentra el archivo generado. Por favor consulte al Dep. de Sistemas!';
      RAISE Le_Exception;
    END IF;

    Ln_IdDocumento := DB_COMUNICACION.SEQ_INFO_DOCUMENTO.NEXTVAL;
    SELECT EMP_GRUPO.PREFIJO INTO Lv_PrefijoEmpresa FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO EMP_GRUPO WHERE EMP_GRUPO.COD_EMPRESA = Lv_CodigoEmpresa;
    INSERT
    INTO DB_COMUNICACION.INFO_DOCUMENTO
    (
      ID_DOCUMENTO,
      NOMBRE_DOCUMENTO,
      UBICACION_LOGICA_DOCUMENTO,
      UBICACION_FISICA_DOCUMENTO,
      USR_CREACION,
      FE_CREACION,
      IP_CREACION,
      ESTADO,
      MENSAJE,
      EMPRESA_COD
    )
    VALUES
    (
      Ln_IdDocumento,
      'Archivo generado por consulta en corte masivo '|| Lv_PrefijoEmpresa,
      Lv_NombreArchivo,
      Lv_PathGuardarArchivo,
      Lv_UsrConsulta,
      SYSDATE,
      '127.0.0.1',
      'Eliminado',
      'Documento que se genera al exportar consulta en el corte masivo '|| Lv_PrefijoEmpresa,
      Lv_CodigoEmpresa
    );
    UTL_FILE.FREMOVE(Lv_DirectorioBaseDatos, Lv_NombreArchivo);
    COMMIT;
    Pv_Status         := 'OK';
    Pn_IdDocumento    := Ln_IdDocumento;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status               := 'ERROR';
    Pv_MsjError             := Lv_MsjError;
    Pn_IdDocumento          := 0;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.P_GET_CSV_PUNTOS_CORTE_MASIVO',
                                          Lv_MsjError ||
                                          '-- PAR¿METROS GUARDAR EN NFS->' || Lv_ParamsGuardarArchivo ||
                                          ' -- RESPUESTA GUARDAR EN NFS->' || Lv_RespuestaGuardarArchivo,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status               := 'ERROR';
    Pv_MsjError             := 'No se ha podido generar el csv de la consulta';
    Pn_IdDocumento          := 0;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.P_GET_CSV_PUNTOS_CORTE_MASIVO',
                                          'Error al generar el csv - ' || SQLCODE || ' - ERROR_STACK: ' ||
                                          DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE || 
                                          '-- PAR¿METROS GUARDAR EN NFS->' || Lv_ParamsGuardarArchivo ||
                                          ' -- RESPUESTA GUARDAR EN NFS->' || Lv_RespuestaGuardarArchivo,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_GET_CSV_PUNTOS_CORTE_MASIVO;

  PROCEDURE P_ELIMINA_CSVS_CORTE_MASIVO
  AS
    Lv_Valor1DirCsv             VARCHAR2(100) := 'DIRECTORIO_ARCHIVOS_PROCESOS_MASIVOS';
    Lv_Directorio               VARCHAR2(50);
    Lv_CodEmpresa               VARCHAR2(2) := '18';
    Lv_EstadoActivo             VARCHAR2(6) := 'Activo';
    Lv_NombreDocumento          VARCHAR2(100) := 'Archivo generado por consulta en corte masivo MD';
    Lv_NombreParamServiciosMd   VARCHAR2(100) := 'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD';
    Lv_MsjError                 VARCHAR2(4000);
    Le_Exception                EXCEPTION;
    CURSOR Lc_GetDataDirectoriosCsv
    IS
      SELECT DET.VALOR2 AS NOMBRE_DIR_BD
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Lv_NombreParamServiciosMd
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.VALOR1 = Lv_Valor1DirCsv
      AND DET.ESTADO = Lv_EstadoActivo
      AND DET.EMPRESA_COD = Lv_CodEmpresa;

    CURSOR Lc_GetArchivosCsvCorteMasivo
    IS
      SELECT CSVS_CORTE_MASIVO.ID_DOCUMENTO, CSVS_CORTE_MASIVO.UBICACION_LOGICA_DOCUMENTO AS NOMBRE_DOC_ARCHIVO
      FROM DB_COMUNICACION.INFO_DOCUMENTO CSVS_CORTE_MASIVO
      WHERE CSVS_CORTE_MASIVO.NOMBRE_DOCUMENTO = Lv_NombreDocumento
      AND CSVS_CORTE_MASIVO.ESTADO = Lv_EstadoActivo;

  BEGIN
    OPEN Lc_GetDataDirectoriosCsv;
    FETCH Lc_GetDataDirectoriosCsv INTO Lv_Directorio;
    CLOSE Lc_GetDataDirectoriosCsv;
    IF Lv_Directorio IS NULL THEN
      Lv_MsjError := 'No se ha podido obtener el directorio para eliminar los archivos csv';
      RAISE Le_Exception;
    END IF;

    FOR I_GetArchivosCsvCorteMasivo IN Lc_GetArchivosCsvCorteMasivo
    LOOP
      UTL_FILE.FREMOVE(Lv_Directorio, I_GetArchivosCsvCorteMasivo.NOMBRE_DOC_ARCHIVO);
      UPDATE DB_COMUNICACION.INFO_DOCUMENTO
      SET FE_ULT_MOD = SYSDATE,
      USR_ULT_MOD = 'eliminaCsvCorte',
      ESTADO = 'Eliminado'
      WHERE ID_DOCUMENTO = I_GetArchivosCsvCorteMasivo.ID_DOCUMENTO;
    END LOOP;
    COMMIT;
  EXCEPTION
  WHEN Le_Exception THEN
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.P_ELIMINA_CSVS_CORTE_MASIVO',
                                          Lv_MsjError,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.P_ELIMINA_CSVS_CORTE_MASIVO',
                                          'Error al eliminar los csv del corte masivo - ' || SQLCODE || ' - ERROR_STACK: '
                                          || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_ELIMINA_CSVS_CORTE_MASIVO;

  PROCEDURE P_UPGRADE_SERVICIOS_CLIENTE(
    Pcl_JsonRequest         IN CLOB,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lv_RazonSocial          VARCHAR2(100);
    Lv_ExtHistorial         VARCHAR2(200);
    Lv_IdProductos          VARCHAR2(100);
    Lv_IdProductosNotBw     VARCHAR2(100);
    Ln_BwMinimo             NUMBER       := 10240;
    Ln_BwAumento            NUMBER       := 10240;
    Lb_Proporcional         BOOLEAN      := false;
    Ln_BwMinimoInterface    NUMBER       := 1;
    Lb_PrintResult          BOOLEAN      := false;
    Lb_DownGrade            BOOLEAN      := false;

    Ln_ConIdProdNotScripts  INTEGER;
    TYPE R_RegIdProducto IS TABLE OF NUMBER;
    Lr_IdProdNotScripts     R_RegIdProducto := R_RegIdProducto();
    Lv_User                 VARCHAR2(25) := 'controlBWMasivo';
    Lv_Ip                   VARCHAR2(25) := '127.0.0.1';
    Lv_TipoTarea            VARCHAR2(45) := 'UPGRADE_DOWNGRADE_BW';
    Lv_TipoProceso          VARCHAR2(20) := 'ControlBwMasivo';
    Lv_EnlaceDatos          VARCHAR2(20) := 'ENLACE_DATOS';
    Lv_CapacidadUno         VARCHAR2(20) := 'CAPACIDAD1';
    Lv_CapacidadDos         VARCHAR2(20) := 'CAPACIDAD2';

    Lv_IdInterface VARCHAR2(15);
    TYPE R_Registros IS RECORD (
        Ln_IdPunto            NUMBER,
        Ln_IdServicio         NUMBER,
        Ln_IdElemento         NUMBER,
        Ln_IdInterface        NUMBER,
        Ln_TotalCapacidadUno  NUMBER,
        Ln_TotalCapacidadDos  NUMBER
    );
    Lr_R_Registros R_Registros;
    TYPE T_Registros IS TABLE OF R_Registros INDEX BY VARCHAR2(15);
    Lr_Registros T_Registros;

    Lv_IdConcentrador VARCHAR2(15);
    TYPE R_ConRegistros IS RECORD (
        Ln_IdServicio         NUMBER,
        Lv_LoginAux           VARCHAR2(100),
        Lv_Estado             VARCHAR2(45),
        Ln_IdPunto            NUMBER,
        Ln_IdElemento         NUMBER,
        Ln_IdInterface        NUMBER,
        Ln_IdCaractCapUno     NUMBER,
        Ln_IdProdCaractUno    NUMBER,
        Ln_IdCaractCapDos     NUMBER,
        Ln_IdProdCaractDos    NUMBER,
        Ln_TotalCapacidadUno  NUMBER,
        Ln_TotalCapacidadDos  NUMBER,
        Ln_TotalCapacidadUnoNueva NUMBER,
        Ln_TotalCapacidadDosNueva NUMBER
    );
    Lr_R_ConRegistros R_ConRegistros;
    TYPE T_ConRegistros IS TABLE OF R_ConRegistros INDEX BY VARCHAR2(15);
    Lr_ConRegistros T_ConRegistros;

    Ln_ConIdServicio        NUMBER;
    Ln_ConIdPunto           NUMBER;
    Lv_ConLoginAux          VARCHAR2(100);
    Lv_ConEstado            VARCHAR2(45);
    Ln_ConIdElemento        NUMBER;
    Ln_ConIdInterface       NUMBER;

    Ln_IdSolicitud          NUMBER;
    Ln_IdMasivoCab          NUMBER;
    Lv_NombreElemento       VARCHAR2(100);
    Lv_NombreInterface      VARCHAR2(100);
    Lv_EstadoInterface      VARCHAR2(45);

    Lv_EstadoActivo         VARCHAR2(10) := 'Activo';
    Lv_EstadoEliminado      VARCHAR2(10) := 'Eliminado';

    Ln_TotalCapacidadUno    NUMBER;
    Ln_TotalCapacidadDos    NUMBER;
    Ln_TotalCapacidadUnoAnt NUMBER;
    Ln_TotalCapacidadDosAnt NUMBER;

    Ln_IdCaractCapUno       NUMBER;
    Ln_IdCaractCapDos       NUMBER;
    Ln_IdProdCaractUno      NUMBER;
    Ln_IdProdCaractDos      NUMBER;
    Ln_ConCapacidadUno      NUMBER;
    Ln_ConCapacidadDos      NUMBER;
    Ln_ConCapacidadUnoAnt   NUMBER;
    Ln_ConCapacidadDosAnt   NUMBER;

    Ln_ExtIdCaractCapUno    NUMBER;
    Ln_ExtIdCaractCapDos    NUMBER;
    Ln_ExtIdProdCaractUno   NUMBER;
    Ln_ExtIdProdCaractDos   NUMBER;
    Ln_ExtCapacidadUno      NUMBER;
    Ln_ExtCapacidadDos      NUMBER;
    Ln_ExtCapacidadUnoAnt   NUMBER;
    Ln_ExtCapacidadDosAnt   NUMBER;

    CURSOR C_ObtenerDatosExtremos
    IS
        SELECT SER.ID_SERVICIO, SER.PRODUCTO_ID, SER.PUNTO_ID, SER.LOGIN_AUX, SER.ESTADO, TEC.ELEMENTO_ID, TEC.INTERFACE_ELEMENTO_ID
        FROM DB_COMERCIAL.INFO_SERVICIO SER
        INNER JOIN DB_COMERCIAL.INFO_PUNTO PUN ON PUN.ID_PUNTO = SER.PUNTO_ID
        INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL EMR ON EMR.ID_PERSONA_ROL = PUN.PERSONA_EMPRESA_ROL_ID
        INNER JOIN DB_COMERCIAL.INFO_PERSONA PER ON PER.ID_PERSONA = EMR.PERSONA_ID
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO
        WHERE SER.ESTADO = Lv_EstadoActivo
        AND PER.RAZON_SOCIAL = Lv_RazonSocial
        AND EXISTS ( SELECT 1 FROM (SELECT TO_NUMBER(column_value,'99999') as ID_VALUE FROM XMLTABLE(Lv_IdProductos))
          TBL_ARRAY_VALUES_ELE
          WHERE SER.PRODUCTO_ID = TBL_ARRAY_VALUES_ELE.ID_VALUE )
        AND NOT EXISTS ( SELECT 1 FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAR
          INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRC ON PRC.ID_PRODUCTO_CARACTERISITICA = CAR.PRODUCTO_CARACTERISITICA_ID
          INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA C ON C.ID_CARACTERISTICA = PRC.CARACTERISTICA_ID
          WHERE CAR.ESTADO = Lv_EstadoActivo AND C.DESCRIPCION_CARACTERISTICA = Lv_EnlaceDatos
          AND CAR.VALOR = '''' || SER.ID_SERVICIO || '''' )
        AND SER.PRODUCTO_ID IS NOT NULL
        AND TEC.ELEMENTO_ID IS NOT NULL
        AND TEC.INTERFACE_ELEMENTO_ID IS NOT NULL;

    CURSOR C_ObtenerDatosConcentradores(Cv_IdExtremo DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.SERVICIO_ID%TYPE)
    IS
        SELECT SER.ID_SERVICIO, SER.PUNTO_ID, SER.LOGIN_AUX, SER.ESTADO, TEC.ELEMENTO_ID, TEC.INTERFACE_ELEMENTO_ID
        FROM DB_COMERCIAL.INFO_SERVICIO SER
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAR ON CAR.VALOR = SER.ID_SERVICIO
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO
        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRC ON PRC.ID_PRODUCTO_CARACTERISITICA = CAR.PRODUCTO_CARACTERISITICA_ID
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA C ON C.ID_CARACTERISTICA = PRC.CARACTERISTICA_ID
        WHERE CAR.ESTADO = Lv_EstadoActivo AND C.DESCRIPCION_CARACTERISTICA = Lv_EnlaceDatos
        AND CAR.SERVICIO_ID = Cv_IdExtremo AND TEC.ELEMENTO_ID IS NOT NULL
        AND TEC.INTERFACE_ELEMENTO_ID IS NOT NULL AND ROWNUM = 1;

    CURSOR C_GetValorCaracteristica(Cn_IdServicio DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT.SERVICIO_ID%TYPE,
        Cv_Caracteristica DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
        SELECT CAR.ID_SERVICIO_PROD_CARACT, CAR.PRODUCTO_CARACTERISITICA_ID, CAR.VALOR
        FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAR
        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRC ON PRC.ID_PRODUCTO_CARACTERISITICA = CAR.PRODUCTO_CARACTERISITICA_ID
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA C ON C.ID_CARACTERISTICA = PRC.CARACTERISTICA_ID
        WHERE CAR.ESTADO = Lv_EstadoActivo AND C.DESCRIPCION_CARACTERISTICA = Cv_Caracteristica
        AND CAR.SERVICIO_ID = Cn_IdServicio AND ROWNUM = 1;

    CURSOR C_GetTotalCapInterface(Cn_IdInterface DB_COMERCIAL.INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID%TYPE,
        Cv_Caracteristica DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
        SELECT DB_COMERCIAL.TECNK_SERVICIOS.F_GET_BW_TOTAL_INTERFACE(Cn_IdInterface,Cv_Caracteristica) CAPACIDAD FROM DUAL;

    CURSOR C_GetDatosInterface(Cn_IdInterface DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO.ID_INTERFACE_ELEMENTO%TYPE)
    IS
        SELECT ELE.NOMBRE_ELEMENTO, INT.NOMBRE_INTERFACE_ELEMENTO, INT.ESTADO
        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INT
        INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE ON ELE.ID_ELEMENTO = INT.ELEMENTO_ID
        WHERE INT.ID_INTERFACE_ELEMENTO = Cn_IdInterface;

    CURSOR C_GetArrayString(Cv_Values IN VARCHAR2)
    IS
        SELECT TO_NUMBER(column_value,'99999') AS ID_VALUE FROM XMLTABLE(Cv_Values);
    BEGIN
        --setear variables
        APEX_JSON.PARSE(Pcl_JsonRequest);
        Lv_RazonSocial          := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strRazonSocial'));
        Lv_ExtHistorial         := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strExtHistorial'));
        Lv_IdProductos          := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdProductos'));
        IF INSTR(Pcl_JsonRequest, 'strIdProductosNotBw') != 0 THEN
            Lv_IdProductosNotBw    := TRIM(APEX_JSON.GET_VARCHAR2(p_path => 'strIdProductosNotBw'));
        END IF;
        IF INSTR(Pcl_JsonRequest, 'intBwMinimo') != 0 THEN
            Ln_BwMinimo            := APEX_JSON.GET_NUMBER(p_path => 'intBwMinimo');
        END IF;
        IF INSTR(Pcl_JsonRequest, 'intBwAumento') != 0 THEN
            Ln_BwAumento           := APEX_JSON.GET_NUMBER(p_path => 'intBwAumento');
        END IF;
        IF INSTR(Pcl_JsonRequest, 'booleanProporcional') != 0 THEN
            Lb_Proporcional        := APEX_JSON.GET_BOOLEAN(p_path => 'booleanProporcional');
        END IF;
        IF INSTR(Pcl_JsonRequest, 'intBwMinimoInterface') != 0 THEN
            Ln_BwMinimoInterface   := APEX_JSON.GET_NUMBER(p_path => 'intBwMinimoInterface');
        END IF;
        IF INSTR(Pcl_JsonRequest, 'booleanPrintResult') != 0 THEN
            Lb_PrintResult         := APEX_JSON.GET_BOOLEAN(p_path => 'booleanPrintResult');
        END IF;
        IF INSTR(Pcl_JsonRequest, 'booleanDowngrade') != 0 THEN
            Lb_DownGrade           := APEX_JSON.GET_BOOLEAN(p_path => 'booleanDowngrade');
        END IF;

        IF Lb_PrintResult THEN
            DBMS_OUTPUT.put_line('*******************INICIO SERVICIOS*******************');
            DBMS_OUTPUT.put_line('INTERFACE_ID,ID_CONCENTRADOR,LOGIN_CONCENTRADOR,ID_SERVICIO,LOGIN_SERVICIO,ESTADO,' ||
                                 'CAPACIDAD1,CAPACIDAD2,CAPACIDAD1_NUEVA,CAPACIDAD2_NUEVA,UPGRADE_DOWNGRADE');
        END IF;
        --obtengo los ids de los productos que no realizan cambio de capacidad en los equipos
        Ln_ConIdProdNotScripts := 0;
        IF Lv_IdProductosNotBw IS NOT NULL THEN
            FOR I_GetValue IN C_GetArrayString(Lv_IdProductosNotBw)
            LOOP
                Ln_ConIdProdNotScripts := Ln_ConIdProdNotScripts + 1;
                Lr_IdProdNotScripts.extend;
                Lr_IdProdNotScripts(Ln_ConIdProdNotScripts) := I_GetValue.ID_VALUE;
            END LOOP;
        END IF;
        --recorrer los extremos
        FOR I_GetExtremo IN C_ObtenerDatosExtremos
        LOOP
            --seteo variables
            Ln_ExtIdCaractCapUno  := NULL;
            Ln_ExtIdProdCaractUno := NULL;
            Ln_ExtCapacidadUnoAnt := NULL;
            Ln_ExtIdCaractCapDos  := NULL;
            Ln_ExtIdProdCaractDos := NULL;
            Ln_ExtCapacidadDosAnt := NULL;
            Ln_ConIdServicio      := NULL;
            Ln_ConIdPunto         := NULL;
            Lv_ConLoginAux        := NULL;
            Ln_ConIdElemento      := NULL;
            Ln_ConIdInterface     := NULL;
            --obtener total capacidad uno del extremo
            OPEN C_GetValorCaracteristica(I_GetExtremo.ID_SERVICIO,Lv_CapacidadUno);
            FETCH C_GetValorCaracteristica INTO Ln_ExtIdCaractCapUno, Ln_ExtIdProdCaractUno, Ln_ExtCapacidadUnoAnt;
            CLOSE C_GetValorCaracteristica;
            --obtener total capacidad dos del extremo
            OPEN C_GetValorCaracteristica(I_GetExtremo.ID_SERVICIO,Lv_CapacidadDos);
            FETCH C_GetValorCaracteristica INTO Ln_ExtIdCaractCapDos, Ln_ExtIdProdCaractDos, Ln_ExtCapacidadDosAnt;
            CLOSE C_GetValorCaracteristica;
            --obtengo los datos del concentrador
            OPEN C_ObtenerDatosConcentradores(I_GetExtremo.ID_SERVICIO);
            FETCH C_ObtenerDatosConcentradores INTO Ln_ConIdServicio, Ln_ConIdPunto, Lv_ConLoginAux, Lv_ConEstado, Ln_ConIdElemento, Ln_ConIdInterface;
            CLOSE C_ObtenerDatosConcentradores;
            --verifico si la capacidades no este vacia
            IF Ln_ExtCapacidadUnoAnt IS NOT NULL AND Ln_ExtCapacidadDosAnt IS NOT NULL THEN
                --seteo las variables de las capacidades nuevas
                Ln_ExtCapacidadUno := Ln_ExtCapacidadUnoAnt;
                Ln_ExtCapacidadDos := Ln_ExtCapacidadDosAnt;
                --se consulta si es Upgrade o Downgrade
                IF Lb_DownGrade THEN
                  --se verifica la capacidad uno del extremo es mayor al minimo
                  IF Ln_ExtCapacidadUnoAnt > Ln_BwMinimo THEN
                      IF Lb_Proporcional THEN
                          Ln_ExtCapacidadUno := Ln_ExtCapacidadUnoAnt - Ln_BwAumento;
                      ELSE
                          Ln_ExtCapacidadUno := Ln_BwAumento;
                      END IF;
                  END IF;
                  --se verifica la capacidad dos del extremo es menor al minimo
                  IF Ln_ExtCapacidadDosAnt > Ln_BwMinimo THEN
                      IF Lb_Proporcional THEN
                          Ln_ExtCapacidadDos := Ln_ExtCapacidadDosAnt - Ln_BwAumento;
                      ELSE
                          Ln_ExtCapacidadDos := Ln_BwAumento;
                      END IF;
                  END IF;
                ELSE
                  --se verifica la capacidad uno del extremo es menor al minimo
                  IF Ln_ExtCapacidadUnoAnt < Ln_BwMinimo THEN
                      IF Lb_Proporcional THEN
                          Ln_ExtCapacidadUno := Ln_ExtCapacidadUnoAnt + Ln_BwAumento;
                      ELSE
                          Ln_ExtCapacidadUno := Ln_BwAumento;
                      END IF;
                  END IF;
                  --se verifica la capacidad dos del extremo es menor al minimo
                  IF Ln_ExtCapacidadDosAnt < Ln_BwMinimo THEN
                      IF Lb_Proporcional THEN
                          Ln_ExtCapacidadDos := Ln_ExtCapacidadDosAnt + Ln_BwAumento;
                      ELSE
                          Ln_ExtCapacidadDos := Ln_BwAumento;
                      END IF;
                  END IF;

                END IF;
                --verifico si se aumento las capacidades del extremo
                IF Ln_ExtCapacidadUnoAnt != Ln_ExtCapacidadUno OR Ln_ExtCapacidadDosAnt != Ln_ExtCapacidadDos THEN
                    --verifico si se debe ingresar interface
                    IF (I_GetExtremo.PRODUCTO_ID member OF Lr_IdProdNotScripts ) = FALSE AND
                        Lr_Registros.EXISTS('' || I_GetExtremo.INTERFACE_ELEMENTO_ID) = FALSE THEN
                        --obtener total capacidad uno de la interface
                        OPEN C_GetTotalCapInterface(I_GetExtremo.INTERFACE_ELEMENTO_ID,Lv_CapacidadUno);
                        FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadUnoAnt;
                        CLOSE C_GetTotalCapInterface;
                        --obtener total capacidad dos de la interface
                        OPEN C_GetTotalCapInterface(I_GetExtremo.INTERFACE_ELEMENTO_ID,Lv_CapacidadDos);
                        FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadDosAnt;
                        CLOSE C_GetTotalCapInterface;
                        --seteo el arreglo de interfaces
                        Lr_R_Registros.Ln_IdElemento := I_GetExtremo.ELEMENTO_ID;
                        Lr_R_Registros.Ln_IdInterface := I_GetExtremo.INTERFACE_ELEMENTO_ID;
                        Lr_R_Registros.Ln_IdPunto := I_GetExtremo.PUNTO_ID;
                        Lr_R_Registros.Ln_IdServicio := I_GetExtremo.ID_SERVICIO;
                        Lr_R_Registros.Ln_TotalCapacidadUno := Ln_TotalCapacidadUnoAnt;
                        Lr_R_Registros.Ln_TotalCapacidadDos := Ln_TotalCapacidadDosAnt;
                        Lr_Registros('' || I_GetExtremo.INTERFACE_ELEMENTO_ID) := Lr_R_Registros;
                    END IF;
                    --verifico si ya esta ingresado el concentrador
                    IF Ln_ConIdServicio IS NOT NULL THEN
                        IF Lr_ConRegistros.EXISTS('' || Ln_ConIdServicio) = false THEN
                            --obtener total capacidad uno del concentrador
                            OPEN C_GetValorCaracteristica(Ln_ConIdServicio,Lv_CapacidadUno);
                            FETCH C_GetValorCaracteristica INTO Ln_IdCaractCapUno, Ln_IdProdCaractUno, Ln_ConCapacidadUnoAnt;
                            CLOSE C_GetValorCaracteristica;
                            --obtener total capacidad dos del concentrador
                            OPEN C_GetValorCaracteristica(Ln_ConIdServicio,Lv_CapacidadDos);
                            FETCH C_GetValorCaracteristica INTO Ln_IdCaractCapDos, Ln_IdProdCaractDos, Ln_ConCapacidadDosAnt;
                            CLOSE C_GetValorCaracteristica;
                            --seteo el arreglo de concentrador
                            Lr_R_ConRegistros.Ln_IdServicio             := Ln_ConIdServicio;
                            Lr_R_ConRegistros.Lv_LoginAux               := Lv_ConLoginAux;
                            Lr_R_ConRegistros.Lv_Estado                 := Lv_ConEstado;
                            Lr_R_ConRegistros.Ln_IdPunto                := Ln_ConIdPunto;
                            Lr_R_ConRegistros.Ln_IdElemento             := Ln_ConIdElemento;
                            Lr_R_ConRegistros.Ln_IdInterface            := Ln_ConIdInterface;
                            Lr_R_ConRegistros.Ln_IdCaractCapUno         := Ln_IdCaractCapUno;
                            Lr_R_ConRegistros.Ln_IdProdCaractUno        := Ln_IdProdCaractUno;
                            Lr_R_ConRegistros.Ln_IdCaractCapDos         := Ln_IdCaractCapDos;
                            Lr_R_ConRegistros.Ln_IdProdCaractDos        := Ln_IdProdCaractDos;
                            Lr_R_ConRegistros.Ln_TotalCapacidadUno      := Ln_ConCapacidadUnoAnt;
                            Lr_R_ConRegistros.Ln_TotalCapacidadDos      := Ln_ConCapacidadDosAnt;
                            Lr_R_ConRegistros.Ln_TotalCapacidadUnoNueva := Ln_ConCapacidadUnoAnt + ( Ln_ExtCapacidadUno - Ln_ExtCapacidadUnoAnt );
                            Lr_R_ConRegistros.Ln_TotalCapacidadDosNueva := Ln_ConCapacidadDosAnt + ( Ln_ExtCapacidadDos - Ln_ExtCapacidadDosAnt );
                            Lr_ConRegistros('' || Ln_ConIdServicio)     := Lr_R_ConRegistros;
                        ELSE
                            --obtengo las capacidades del concentrador
                            Ln_ConCapacidadUno := Lr_ConRegistros('' || Ln_ConIdServicio).Ln_TotalCapacidadUnoNueva;
                            Ln_ConCapacidadDos := Lr_ConRegistros('' || Ln_ConIdServicio).Ln_TotalCapacidadDosNueva;
                            --aumento las capacidades del concentrador
                            Ln_ConCapacidadUno := Ln_ConCapacidadUno + ( Ln_ExtCapacidadUno - Ln_ExtCapacidadUnoAnt );
                            Ln_ConCapacidadDos := Ln_ConCapacidadDos + ( Ln_ExtCapacidadDos - Ln_ExtCapacidadDosAnt );
                            Lr_ConRegistros('' || Ln_ConIdServicio).Ln_TotalCapacidadUnoNueva := Ln_ConCapacidadUno;
                            Lr_ConRegistros('' || Ln_ConIdServicio).Ln_TotalCapacidadDosNueva := Ln_ConCapacidadDos;
                        END IF;
                    END IF;
                    --se elimanan las caracteristicas de los capacidades anteriores
                    UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SET ESTADO = Lv_EstadoEliminado
                    WHERE ID_SERVICIO_PROD_CARACT = Ln_ExtIdCaractCapUno;
                    UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SET ESTADO = Lv_EstadoEliminado
                    WHERE ID_SERVICIO_PROD_CARACT = Ln_ExtIdCaractCapDos;
                    --se ingresan la nueva caracteristica de la capacidad uno
                    INSERT INTO DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
                    ( ID_SERVICIO_PROD_CARACT, SERVICIO_ID, PRODUCTO_CARACTERISITICA_ID, VALOR, FE_CREACION, USR_CREACION, ESTADO )
                    VALUES
                    ( DB_COMERCIAL.SEQ_INFO_SERVICIO_PROD_CARACT.NEXTVAL, I_GetExtremo.ID_SERVICIO,
                      Ln_ExtIdProdCaractUno, Ln_ExtCapacidadUno, SYSDATE, Lv_User, Lv_EstadoActivo );
                    --se ingresan la nueva caracteristica de la capacidad dos
                    INSERT INTO DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
                    ( ID_SERVICIO_PROD_CARACT, SERVICIO_ID, PRODUCTO_CARACTERISITICA_ID, VALOR, FE_CREACION, USR_CREACION, ESTADO )
                    VALUES
                    ( DB_COMERCIAL.SEQ_INFO_SERVICIO_PROD_CARACT.NEXTVAL, I_GetExtremo.ID_SERVICIO,
                      Ln_ExtIdProdCaractDos, Ln_ExtCapacidadDos, SYSDATE, Lv_User, Lv_EstadoActivo );
                    --ingreso el historial del servicio
                    INSERT INTO DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
                    ( ID_SERVICIO_HISTORIAL, SERVICIO_ID, USR_CREACION, FE_CREACION, IP_CREACION, ESTADO, OBSERVACION )
                    VALUES
                    ( DB_COMERCIAL.SEQ_INFO_SERVICIO_HISTORIAL.NEXTVAL, I_GetExtremo.ID_SERVICIO,
                      Lv_User, SYSDATE, Lv_Ip, Lv_EstadoActivo, Lv_ExtHistorial );
                    INSERT INTO DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
                    ( ID_SERVICIO_HISTORIAL, SERVICIO_ID, USR_CREACION, FE_CREACION, IP_CREACION, ESTADO, OBSERVACION )
                    VALUES
                    ( DB_COMERCIAL.SEQ_INFO_SERVICIO_HISTORIAL.NEXTVAL, I_GetExtremo.ID_SERVICIO,
                      Lv_User, SYSDATE, Lv_Ip, Lv_EstadoActivo, '<b>Cambio de Velocidad Realizado</b><br>' ||
                                       '<b>Velocidad Up anterior :</b> ' || Ln_ExtCapacidadUnoAnt || '<br>' ||
                                       '<b>Velocidad Down anterior:</b> ' || Ln_ExtCapacidadDosAnt  || '<br>' ||
                                       '<b>Velocidad Up Nuevo :</b> ' || Ln_ExtCapacidadUno  || '<br>' ||
                                       '<b>Velocidad Down Nuevo:</b> ' || Ln_ExtCapacidadDos );
                    IF Lb_PrintResult THEN
                        --muestro los cambios
                        DBMS_OUTPUT.put_line(Ln_ConIdInterface || ',' || Ln_ConIdServicio || ',' || Lv_ConLoginAux || ',' ||
                                             I_GetExtremo.ID_SERVICIO || ',' || I_GetExtremo.LOGIN_AUX || ',' || I_GetExtremo.ESTADO || ',' ||
                                             Ln_ExtCapacidadUnoAnt || ',' || Ln_ExtCapacidadDosAnt || ',' ||
                                             Ln_ExtCapacidadUno || ',' || Ln_ExtCapacidadDos || ',SI');
                    END IF;
                ELSE
                    IF Lb_PrintResult THEN
                        --muestro los cambios
                        DBMS_OUTPUT.put_line(Ln_ConIdInterface || ',' || Ln_ConIdServicio || ',' || Lv_ConLoginAux || ',' ||
                                             I_GetExtremo.ID_SERVICIO || ',' || I_GetExtremo.LOGIN_AUX || ',' || I_GetExtremo.ESTADO || ',' ||
                                             Ln_ExtCapacidadUnoAnt || ',' || Ln_ExtCapacidadDosAnt || ',' ||
                                             Ln_ExtCapacidadUno || ',' || Ln_ExtCapacidadDos || ',NO');
                    END IF;
                END IF;
            ELSE
                IF Lb_PrintResult THEN
                    --muestro los cambios
                    DBMS_OUTPUT.put_line(Ln_ConIdInterface || ',' || Ln_ConIdServicio || ',' || Lv_ConLoginAux || ',' ||
                                         I_GetExtremo.ID_SERVICIO || ',' || I_GetExtremo.LOGIN_AUX || ',' || I_GetExtremo.ESTADO || ',' ||
                                         Ln_ExtCapacidadUnoAnt || ',' || Ln_ExtCapacidadDosAnt || ',,,NO');
                END IF;
            END IF;
        END LOOP;

        IF Lb_PrintResult THEN
            DBMS_OUTPUT.put_line('*******************FIN SERVICIOS*******************');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('*******************INICIO CONCENTRADORES*******************');
            DBMS_OUTPUT.put_line('INTERFACE_ID,ID_CONCENTRADOR,LOGIN_CONCENTRADOR,ESTADO,' ||
                                 'CAPACIDAD1,CAPACIDAD2,CAPACIDAD1_NUEVA,CAPACIDAD2_NUEVA,UPGRADE-DOWNGRADE');
        END IF;

        Lv_IdConcentrador := Lr_ConRegistros.FIRST;
        WHILE Lv_IdConcentrador IS NOT NULL LOOP
            Lr_R_ConRegistros := Lr_ConRegistros(Lv_IdConcentrador);
            --verifico si ya esta ingresado la interface
            IF Lr_Registros.EXISTS('' || Lr_R_ConRegistros.Ln_IdInterface) = false THEN
                --obtener total capacidad uno de la interface
                OPEN C_GetTotalCapInterface(Lr_R_ConRegistros.Ln_IdInterface,Lv_CapacidadUno);
                FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadUnoAnt;
                CLOSE C_GetTotalCapInterface;
                --obtener total capacidad dos de la interface
                OPEN C_GetTotalCapInterface(Lr_R_ConRegistros.Ln_IdInterface,Lv_CapacidadDos);
                FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadDosAnt;
                CLOSE C_GetTotalCapInterface;
                --seteo el arreglo de interfaces
                Lr_R_Registros.Ln_IdElemento        := Lr_R_ConRegistros.Ln_IdElemento;
                Lr_R_Registros.Ln_IdInterface       := Lr_R_ConRegistros.Ln_IdInterface;
                Lr_R_Registros.Ln_IdPunto           := Lr_R_ConRegistros.Ln_IdPunto;
                Lr_R_Registros.Ln_IdServicio        := Lr_R_ConRegistros.Ln_IdServicio;
                Lr_R_Registros.Ln_TotalCapacidadUno := Ln_TotalCapacidadUnoAnt;
                Lr_R_Registros.Ln_TotalCapacidadDos := Ln_TotalCapacidadDosAnt;
                Lr_Registros('' || Lr_R_ConRegistros.Ln_IdInterface) := Lr_R_Registros;
            END IF;
            --se elimanan las caracteristicas de los capacidades anteriores
            UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SET ESTADO = Lv_EstadoEliminado
            WHERE ID_SERVICIO_PROD_CARACT = Lr_R_ConRegistros.Ln_IdCaractCapUno;
            UPDATE DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SET ESTADO = Lv_EstadoEliminado
            WHERE ID_SERVICIO_PROD_CARACT = Lr_R_ConRegistros.Ln_IdCaractCapDos;
            --se ingresan la nueva caracteristica de la capacidad uno
            INSERT INTO DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
            ( ID_SERVICIO_PROD_CARACT, SERVICIO_ID, PRODUCTO_CARACTERISITICA_ID, VALOR, FE_CREACION, USR_CREACION, ESTADO )
            VALUES
            ( DB_COMERCIAL.SEQ_INFO_SERVICIO_PROD_CARACT.NEXTVAL, Lr_R_ConRegistros.Ln_IdServicio,
              Lr_R_ConRegistros.Ln_IdProdCaractUno, Lr_R_ConRegistros.Ln_TotalCapacidadUnoNueva, SYSDATE, Lv_User, Lv_EstadoActivo );
            --se ingresan la nueva caracteristica de la capacidad dos
            INSERT INTO DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
            ( ID_SERVICIO_PROD_CARACT, SERVICIO_ID, PRODUCTO_CARACTERISITICA_ID, VALOR, FE_CREACION, USR_CREACION, ESTADO )
            VALUES
            ( DB_COMERCIAL.SEQ_INFO_SERVICIO_PROD_CARACT.NEXTVAL, Lr_R_ConRegistros.Ln_IdServicio,
              Lr_R_ConRegistros.Ln_IdProdCaractDos, Lr_R_ConRegistros.Ln_TotalCapacidadDosNueva, SYSDATE, Lv_User, Lv_EstadoActivo );
            --ingreso el historial del servicio
            INSERT INTO DB_COMERCIAL.INFO_SERVICIO_HISTORIAL
            ( ID_SERVICIO_HISTORIAL, SERVICIO_ID, USR_CREACION, FE_CREACION, IP_CREACION, ESTADO, OBSERVACION )
            VALUES
            ( DB_COMERCIAL.SEQ_INFO_SERVICIO_HISTORIAL.NEXTVAL, Lr_R_ConRegistros.Ln_IdServicio,
              Lv_User, SYSDATE, Lv_Ip, Lv_EstadoActivo, '<b>Cambio de Velocidad Realizado</b><br>' ||
                                       '<b>Velocidad Up anterior :</b> ' || Lr_R_ConRegistros.Ln_TotalCapacidadUno || '<br>' ||
                                       '<b>Velocidad Down anterior:</b> ' || Lr_R_ConRegistros.Ln_TotalCapacidadDos  || '<br>' ||
                                       '<b>Velocidad Up Nuevo :</b> ' || Lr_R_ConRegistros.Ln_TotalCapacidadUnoNueva  || '<br>' ||
                                       '<b>Velocidad Down Nuevo:</b> ' || Lr_R_ConRegistros.Ln_TotalCapacidadDosNueva );
            IF Lb_PrintResult THEN
                --muestro los cambios
                DBMS_OUTPUT.put_line(Lr_R_ConRegistros.Ln_IdInterface || ',' || Lr_R_ConRegistros.Ln_IdServicio || ',' ||
                                     Lr_R_ConRegistros.Lv_LoginAux || ',' || Lr_R_ConRegistros.Lv_Estado || ',' ||
                                     Lr_R_ConRegistros.Ln_TotalCapacidadUno || ',' ||
                                     Lr_R_ConRegistros.Ln_TotalCapacidadDos || ',' ||
                                     Lr_R_ConRegistros.Ln_TotalCapacidadUnoNueva || ',' ||
                                     Lr_R_ConRegistros.Ln_TotalCapacidadDosNueva);
            END IF;
            --obtengo la siguiente llave
            Lv_IdConcentrador := Lr_ConRegistros.NEXT(Lv_IdConcentrador);
        END LOOP;

        IF Lb_PrintResult THEN
            DBMS_OUTPUT.put_line('*******************FIN CONCENTRADORES*******************');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('');
            DBMS_OUTPUT.put_line('*******************INICIO INTERFACES*******************');
            DBMS_OUTPUT.put_line('SOLICITUD_ID,SWITCH,INTERFACE,INTERFACE_ID,ESTADO,CAPACIDAD1,CAPACIDAD2,CAPACIDAD1_NUEVA,CAPACIDAD2_NUEVA,UPGRADE-DOWNGRADE');
        END IF;

        --se recorre la data de los elementos
        Lv_IdInterface := Lr_Registros.FIRST;
        WHILE Lv_IdInterface IS NOT NULL LOOP
            Lr_R_Registros := Lr_Registros(Lv_IdInterface);
            --obtener datos de la interface
            OPEN C_GetDatosInterface(Lr_R_Registros.Ln_IdInterface);
            FETCH C_GetDatosInterface INTO Lv_NombreElemento, Lv_NombreInterface, Lv_EstadoInterface;
            CLOSE C_GetDatosInterface;
            --obtener total capacidad uno nueva de la interface
            OPEN C_GetTotalCapInterface(Lr_R_Registros.Ln_IdInterface,Lv_CapacidadUno);
            FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadUno;
            CLOSE C_GetTotalCapInterface;
            --obtener total capacidad dos nueva de la interface
            OPEN C_GetTotalCapInterface(Lr_R_Registros.Ln_IdInterface,Lv_CapacidadDos);
            FETCH C_GetTotalCapInterface INTO Ln_TotalCapacidadDos;
            CLOSE C_GetTotalCapInterface;
            --verifico si se realiza las ejecuciones en las interfaces
            IF Ln_TotalCapacidadUno >= Ln_BwMinimoInterface AND Ln_TotalCapacidadDos >= Ln_BwMinimoInterface THEN
                --ingreso la solicitud para el proceso masivo
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOLICITUD
                ( ID_DETALLE_SOLICITUD,TIPO_SOLICITUD_ID,ELEMENTO_ID,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL,
                    ( SELECT ID_TIPO_SOLICITUD FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD
                      WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD CONTROL BW MASIVO'
                      AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Lr_R_Registros.Ln_IdElemento,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                ) RETURNING ID_DETALLE_SOLICITUD INTO Ln_IdSolicitud;
                --ingreso el historial de la solicitud
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_HIST
                ( ID_SOLICITUD_HISTORIAL,DETALLE_SOLICITUD_ID,ESTADO,USR_CREACION,FE_CREACION,IP_CREACION )
                VALUES
                ( DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL,Ln_IdSolicitud,'Pendiente',Lv_User,SYSDATE,Lv_Ip );
                --ingreso la caracteristica para el tipo de proceso que se va a ejecutar
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'TIPO_PROCESO' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Lv_TipoTarea,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso la caracteristica para el id de la interface
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Lr_R_Registros.Ln_IdInterface,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso la caracteristica para la capacidad uno
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD1' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Ln_TotalCapacidadUno,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso la caracteristica para la capacidad dos
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD2' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Ln_TotalCapacidadDos,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso la caracteristica para la capacidad uno anterior
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD1 ANTERIOR' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Lr_R_Registros.Ln_TotalCapacidadUno,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso la caracteristica para la capacidad dos anterior
                INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
                ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
                VALUES
                (
                    DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                    Ln_IdSolicitud,
                    ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                      WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD2 ANTERIOR' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                    Lr_R_Registros.Ln_TotalCapacidadDos,
                    'Pendiente',
                    Lv_User,
                    SYSDATE
                );
                --ingreso el proceso masivo
                INSERT INTO DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_CAB
                ( ID_PROCESO_MASIVO_CAB,TIPO_PROCESO,CANTIDAD_SERVICIOS,SOLICITUD_ID,EMPRESA_ID,ESTADO,USR_CREACION,FE_CREACION,IP_CREACION )
                VALUES
                (
                    DB_INFRAESTRUCTURA.SEQ_INFO_PROCESO_MASIVO_CAB.NEXTVAL,
                    Lv_TipoProceso,
                    1,
                    Ln_IdSolicitud,
                    ( SELECT COD_EMPRESA FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO WHERE PREFIJO = 'TN' AND ROWNUM = 1 ),
                    'Pendiente',
                    Lv_User,
                    SYSDATE,
                    Lv_Ip
                ) RETURNING ID_PROCESO_MASIVO_CAB INTO Ln_IdMasivoCab;
                --ingreso los detalles del proceso masivo
                INSERT INTO DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_DET
                ( ID_PROCESO_MASIVO_DET,PROCESO_MASIVO_CAB_ID,PUNTO_ID,SERVICIO_ID,SOLICITUD_ID,
                  ESTADO,USR_CREACION,FE_CREACION,IP_CREACION )
                VALUES
                (
                    DB_INFRAESTRUCTURA.SEQ_INFO_PROCESO_MASIVO_DET.NEXTVAL,
                    Ln_IdMasivoCab,
                    Lr_R_Registros.Ln_IdPunto,
                    Lr_R_Registros.Ln_IdServicio,
                    Ln_IdSolicitud,
                    'Pendiente',
                    Lv_User,
                    SYSDATE,
                    Lv_Ip
                );
                IF Lb_PrintResult THEN
                    --muestro los cambios
                    DBMS_OUTPUT.put_line(Ln_IdSolicitud || ',' || Lv_NombreElemento || ',' || Lv_NombreInterface || ',' ||
                                         Lv_IdInterface || ',' || Lv_EstadoInterface || ',' ||
                                         Lr_R_Registros.Ln_TotalCapacidadUno || ',' || Lr_R_Registros.Ln_TotalCapacidadDos || ',' ||
                                         Ln_TotalCapacidadUno || ',' || Ln_TotalCapacidadDos || ',SI');
                END IF;
            ELSE
                IF Lb_PrintResult THEN
                    --muestro los cambios
                    DBMS_OUTPUT.put_line('0,' || Lv_NombreElemento || ',' || Lv_NombreInterface || ',' ||
                                         Lv_IdInterface || ',' || Lv_EstadoInterface || ',' ||
                                         Lr_R_Registros.Ln_TotalCapacidadUno || ',' || Lr_R_Registros.Ln_TotalCapacidadDos || ',' ||
                                         Ln_TotalCapacidadUno || ',' || Ln_TotalCapacidadDos || ',NO');
                END IF;
            END IF;
            --obtengo la siguiente llave
            Lv_IdInterface := Lr_Registros.NEXT(Lv_IdInterface);
        END LOOP;

        IF Lb_PrintResult THEN
            DBMS_OUTPUT.put_line('*******************FIN INTERFACES*******************');
        END IF;

        --se guardan los cambios
        COMMIT;
        Pv_Status  := 'OK';
        Pv_Mensaje := 'El proceso finalizo correctamente';
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        Pv_Status  := 'ERROR';
        Pv_Mensaje := 'Error al generar upgrade de servicios';
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                              'INFRK_TRANSACCIONES.P_UPGRADE_SERVICIOS_CLIENTE',
                                              'Error al generar upgrade de servicios - ' || SQLCODE || ' - ERROR_STACK: '
                                              || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                              NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                              SYSDATE,
                                              NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_UPGRADE_SERVICIOS_CLIENTE;




PROCEDURE SUBNETEAR_CLASE_B( pn_idElemento       IN NUMBER,
                             pv_subred_ip        IN VARCHAR2,
                             pv_subred_mascara   IN VARCHAR2,
                             pv_uso              IN VARCHAR2,
                             pv_tipo             IN VARCHAR2,
                             pv_msg_error        OUT VARCHAR2) AS

lv_idPe              number       := pn_idElemento;
lv_mascara_maxima    varchar2(100);
lv_subred            varchar2(30) := pv_subred_ip;
lv_mascara           varchar2(30) := pv_subred_mascara;
lv_aux_mascara       varchar2(30) := pv_subred_mascara;
lv_1octeto           varchar2(30) := '';
lv_2octetos          varchar2(30) := '';
lv_3erocteto         varchar2(30) := '';
lv_4octeto           varchar2(30) := '';
ln_contador          number       := 0;
ln_contadorAux       number       := 0;
ln_contadorAux2      number       := 0;
ln_subred_padre      number;
lv_ipMascara         varchar2(100);
lv_aux3erOcteto      varchar2(100);
lv_aux4toOcteto      varchar2(100);
lv_cantidadIps       varchar2(100)  := '0';
lv_cantidadIpXOcteto varchar2(100)  := '0';
ln_idPadre           number;
lv_uso               varchar2(30) := pv_uso;
lv_user              varchar2(30) := 'telcos_db';
lv_ipCreacion        varchar2(30) := NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'),'127.0.0.1');
ln_cantSubredes      number;
lv_comodin           varchar2(100);
Lv_MensajeError      varchar2(4000);
Pn_existeSubred      number;

lv_campo_subred    varchar2(30) := '';
lv_campo_gateway   varchar2(30) := '';
lv_campo_ipInicial varchar2(30) := '';
lv_campo_ipFinal   varchar2(30) := '';
lv_tipoRed         varchar2(5)  := pv_tipo;
Le_Exception       EXCEPTION;

TYPE subredesPorMascara is VARRAY(16) of number;
arraySubredesPorMascara subredesPorMascara := subredesPorMascara(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768);


CURSOR Lc_GetParametros(cv_nombre_parametro varchar2,cv_descripcion varchar2) IS
select valor1,valor2,valor3
from DB_GENERAL.ADMI_PARAMETRO_CAB apc,DB_GENERAL.ADMI_PARAMETRO_DET apt
where apc.id_parametro = apt.parametro_id
AND apc.nombre_parametro = cv_nombre_parametro
and apt.descripcion = cv_descripcion;

CURSOR C_ValidarSubred(Cv_Subred DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED%TYPE,Cv_Uso DB_INFRAESTRUCTURA.INFO_SUBRED.USO%TYPE)
IS
SELECT COUNT(ISU.ID_SUBRED)
FROM INFO_SUBRED ISU
WHERE ISU.SUBRED = Cv_Subred
AND ISU.USO = Cv_Uso
AND ISU.ESTADO IN ('Ocupado','Activo');


begin

lv_1octeto   := CONCAT(regexp_substr(lv_subred, '[^.]+', 1, 1),'.');
lv_2octetos  := CONCAT(lv_1octeto, regexp_substr(lv_subred, '[^.]+', 1, 2));
lv_2octetos  := CONCAT(lv_2octetos,'.');
lv_3erocteto := to_char(regexp_substr(TRIM(lv_subred), '[^.]+', 1, 3));
lv_4octeto   := regexp_substr(lv_subred, '[^.]+', 1, 4);

OPEN Lc_GetParametros('SUBNETEO DE CLASE B','mascara_maxima');
FETCH Lc_GetParametros INTO lv_mascara_maxima,lv_comodin,lv_comodin;
CLOSE Lc_GetParametros;

--Si el campo es null se asigna por default LAN
if(pv_tipo is null) then
    lv_tipoRed := 'LAN';
end if;

--Validar si la subred ya fue subneteada
while (lv_aux_mascara <= lv_mascara_maxima) loop

  open C_ValidarSubred(lv_subred||'/'||lv_aux_mascara,pv_uso);
  fetch C_ValidarSubred into Pn_existeSubred;
  close C_ValidarSubred;

  if(Pn_existeSubred != 0) then
    RAISE Le_Exception;
  end if;

  lv_aux_mascara := lv_aux_mascara + 1;

end loop;

--se recorre todas las mascaras
while (lv_mascara <= lv_mascara_maxima) loop

  if(ln_cantSubredes = 1) then
      delete from DB_INFRAESTRUCTURA.subtening_tmp where id_subred = (select min(id_subred) 
      from DB_INFRAESTRUCTURA.subtening_tmp);
  end if;

  ln_contador     := ln_contador + 1;
  ln_contadorAux  := 0;
  ln_contadorAux2 := 0;
  ln_cantSubredes := arraySubredesPorMascara(ln_contador);
  lv_aux3erOcteto := lv_3erocteto;
  lv_aux4toOcteto := lv_4octeto;
  --se crea las cantidad de subredes por mascara
  for j in 1 .. ln_cantSubredes loop

   --obtengo el valor de la mascara
   --obtengo la cantidad de ips por mascara
    OPEN Lc_GetParametros('SUBNETEO DE CLASE B',lv_mascara);
    FETCH Lc_GetParametros INTO lv_cantidadIps,lv_ipMascara,lv_cantidadIpXOcteto;
    CLOSE Lc_GetParametros;   


    ln_contadorAux  := ln_contadorAux + 1;
    ln_contadorAux2 := ln_contadorAux2 + 1;

    --obtengo la secuencia
    ln_idPadre := DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL;   

    --Insertando los ids en tabla temporal para realacionar cuales son las subredes padre
    insert into DB_INFRAESTRUCTURA.subtening_tmp values(ln_idPadre,lv_2octetos || lv_aux3erOcteto || '.0' || '/' || lv_mascara);


      IF C_ValidarSubred%ISOPEN THEN
        CLOSE C_ValidarSubred;
      END IF;

      Pn_existeSubred := 0;

      IF(lv_mascara < 25) THEN

        lv_campo_subred    := lv_2octetos || lv_aux3erOcteto || '.0' || '/' || lv_mascara;
        lv_campo_gateway   := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_4octeto + 1));
        lv_campo_ipInicial := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_4octeto + 2));
        lv_campo_ipFinal   := lv_2octetos || to_char(to_number(lv_aux3erOcteto) + to_number(lv_cantidadIps) - 1) || '.' || '254';

      ELSIF(lv_mascara >24) THEN

        if(lv_ipMascara = '255.255.255.254') then

            lv_campo_subred    := lv_2octetos || lv_aux3erOcteto || '.' || lv_aux4toOcteto || '/' || lv_mascara;
            lv_campo_gateway   := lv_2octetos || lv_aux3erOcteto || '.' || lv_aux4toOcteto;
            lv_campo_ipInicial := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_aux4toOcteto + 1));
            lv_campo_ipFinal   := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_aux4toOcteto + 1));

        else        

            lv_campo_subred    := lv_2octetos || lv_aux3erOcteto || '.' || lv_aux4toOcteto || '/' || lv_mascara;
            lv_campo_gateway   := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_aux4toOcteto + 1));
            lv_campo_ipInicial := lv_2octetos || lv_aux3erOcteto || '.' || to_char(to_number(lv_aux4toOcteto + 2));
            lv_campo_ipFinal   := lv_2octetos || lv_aux3erOcteto || '.' || 
                                  to_char(to_number(lv_aux4toOcteto + lv_cantidadIps) - 2);             

        end if;        

      END IF;      

      open C_ValidarSubred(lv_campo_subred,pv_uso);
      fetch C_ValidarSubred into Pn_existeSubred;
      close C_ValidarSubred;

      IF (Pn_existeSubred = 0) THEN      

        INSERT INTO DB_INFRAESTRUCTURA.INFO_SUBRED
        (
          ID_SUBRED,
          RED_ID,
          SUBRED,
          MASCARA,
          GATEWAY,
          IP_INICIAL,
          IP_FINAL,
          SUBRED_ID,
          EMPRESA_COD,
          VERSION_IP,
          ELEMENTO_ID,
          TIPO,
          USO,
          ESTADO,
          FE_CREACION,
          USR_CREACION,
          IP_CREACION
        )
        VALUES
        (
          ln_idPadre,
          lv_mascara,
          lv_campo_subred,
          lv_ipMascara,
          lv_campo_gateway,
          lv_campo_ipInicial,
          lv_campo_ipFinal,
          ln_subred_padre,
          '10',
          'IPv4',
          lv_idPe,
          lv_tipoRed,
          lv_uso,
          'Activo',
          SYSDATE,
          lv_user,
          lv_ipCreacion
        );   

    ELSE

      pv_msg_error := 'La subred ('||lv_campo_subred||') no ha sido creada porque ya existe';

    END IF;        

    --Se elimina el primer id_subred
    if(ln_contadorAux = 2) then
      select id_subred into ln_subred_padre from DB_INFRAESTRUCTURA.subtening_tmp where id_subred = 
      (select min(id_subred) from DB_INFRAESTRUCTURA.subtening_tmp);    

      delete from DB_INFRAESTRUCTURA.subtening_tmp 
      where id_subred = (select min(id_subred) from DB_INFRAESTRUCTURA.subtening_tmp);
      ln_contadorAux := 0;                  
    end if;  

    --Se obtiene la subred_padre
    if(ln_cantSubredes = 1) then
        select id_subred into ln_subred_padre from DB_INFRAESTRUCTURA.subtening_tmp 
        where id_subred = (select min(id_subred) from subtening_tmp);    
    end if;

    if(ln_cantSubredes > 1) then      

      IF(lv_mascara < 25) THEN

            lv_aux3erOcteto := TO_CHAR(TO_NUMBER(lv_aux3erOcteto) + TO_NUMBER(lv_cantidadIps));

      ELSIF(lv_mascara > 24) THEN

            lv_aux4toOcteto := TO_CHAR(TO_NUMBER(lv_aux4toOcteto) + TO_NUMBER(lv_cantidadIps));

            if(ln_contadorAux2 = lv_cantidadIpXOcteto) then

                ln_contadorAux2 := 0;
                lv_aux4toOcteto := '0';
                lv_aux3erOcteto := to_char(to_number(lv_aux3erOcteto + 1));

            end if;

      END IF;        

    end if;

    end loop;

    lv_mascara := TO_CHAR(TO_NUMBER(lv_mascara) + 1);

end loop;

    --Se elimina la tabla temporal
    delete from DB_INFRAESTRUCTURA.subtening_tmp;
    COMMIT;  

    pv_msg_error := 'Proceso realizado con exito!';

EXCEPTION
WHEN Le_Exception THEN
    ROLLBACK;
    Lv_MensajeError := 'Subred ya se encuentra subneteada en mascaras superiores';
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.SUBNETEAR_CLASE_B',
                                          Lv_MensajeError,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

    pv_msg_error := 'Subred ya se encuentra subneteada en mascaras superiores';                                          

WHEN OTHERS THEN
    ROLLBACK;                                    
    Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                          'INFRK_TRANSACCIONES.SUBNETEAR_CLASE_B',
                                          Lv_MensajeError,
                                          NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                          SYSDATE,
                                          NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );

    pv_msg_error := 'Error al subnetear la red: ' || lv_subred;

END SUBNETEAR_CLASE_B;  

PROCEDURE P_GENERAR_MASIVO_CONTROL_BW(
      Pv_TipoMasivo             IN VARCHAR2,
      Pn_IdParametroEjecucion   IN NUMBER,
      Pn_IdElemento             IN NUMBER,
      Pn_IdInterface            IN NUMBER,
      Pv_Ciudad                 IN VARCHAR2,
      Pv_Historial              IN VARCHAR2,
      Pv_UserWs                 IN VARCHAR2,
      Pcl_Capacidades           IN CLOB,
      Pv_Status                 OUT VARCHAR2,
      Pv_Mensaje                OUT VARCHAR2)
  AS
    ---
    Lv_TipoSolicitud              VARCHAR2(45)  := 'SOLICITUD CONTROL BW MASIVO';
    Lv_TipoProceso                VARCHAR2(20)  := 'ControlBwMasivo';
    Lv_ParametroEstadosServicios  VARCHAR2(45)  := 'ESTADOS_SERVICIOS_BW_INTERFACE';
    Lv_EstadoActivo               VARCHAR2(15)  := 'Activo';
    Lv_EstadoPendiente            VARCHAR2(15)  := 'Pendiente';
    Lv_PrefijoEmpresa             VARCHAR2(5)   := 'TN';
    Lv_IpWs                       VARCHAR2(15)  := '127.0.0.1';
    Ln_IdServicio                 NUMBER;
    Ln_IdPunto                    NUMBER;
    Ln_IdSolicitud                NUMBER;
    Ln_IdMasivoCab                NUMBER;
    Ln_IdHistorial                NUMBER;
    Lv_EstadoElemento             VARCHAR2(15);
    Ln_CapacidadUno               NUMBER;
    Ln_CapacidadDos               NUMBER;
    Ln_CapacidadAnterior          NUMBER;
    ---
    CURSOR C_ObtenerServPuntoInterface
    IS
        SELECT SER.ID_SERVICIO, SER.PUNTO_ID FROM DB_COMERCIAL.INFO_SERVICIO SER 
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO 
        WHERE TEC.INTERFACE_ELEMENTO_ID = Pn_IdInterface 
        AND EXISTS ( 
            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_EST 
            WHERE PAR_EST.PARAMETRO_ID = ( 
                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                WHERE NOMBRE_PARAMETRO = Lv_ParametroEstadosServicios AND ESTADO = Lv_EstadoActivo 
                AND ROWNUM = 1 ) 
            AND PAR_EST.ESTADO = Lv_EstadoActivo AND PAR_EST.VALOR1 = SER.ESTADO 
        ) AND ROWNUM = 1;
    ---
    CURSOR C_ObtenerServPuntoElemento
    IS
        SELECT SER.ID_SERVICIO, SER.PUNTO_ID FROM DB_COMERCIAL.INFO_SERVICIO SER 
        INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC ON TEC.SERVICIO_ID = SER.ID_SERVICIO 
        WHERE TEC.ELEMENTO_ID = Pn_IdElemento 
        AND EXISTS ( 
            SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_EST 
            WHERE PAR_EST.PARAMETRO_ID = ( 
                SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                WHERE NOMBRE_PARAMETRO = Lv_ParametroEstadosServicios AND ESTADO = Lv_EstadoActivo 
                AND ROWNUM = 1 ) 
            AND PAR_EST.ESTADO = Lv_EstadoActivo AND PAR_EST.VALOR1 = SER.ESTADO 
        ) AND ROWNUM = 1;
    ---
    CURSOR C_GetEstadoElemento
    IS
        SELECT ESTADO FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO WHERE ID_ELEMENTO = Pn_IdElemento;
    ---
    BEGIN
        --SE PROCEDE A CREAR EL PROCESO MASIVO
        --setear variables
        IF Pcl_Capacidades IS NOT NULL THEN
            APEX_JSON.PARSE(Pcl_Capacidades);
            IF INSTR(Pcl_Capacidades, 'capacidadUno') != 0 THEN
                Ln_CapacidadUno := APEX_JSON.GET_NUMBER(p_path => 'capacidadUno');
            END IF;
            IF INSTR(Pcl_Capacidades, 'capacidadDos') != 0 THEN
                Ln_CapacidadDos := APEX_JSON.GET_NUMBER(p_path => 'capacidadDos');
            END IF;
            IF INSTR(Pcl_Capacidades, 'capacidadAnterior') != 0 THEN
                Ln_CapacidadAnterior := APEX_JSON.GET_NUMBER(p_path => 'capacidadAnterior');
            END IF;
        END IF;
        --obtengo el servicio y el punto
        IF Pn_IdInterface IS NOT NULL THEN
            OPEN C_ObtenerServPuntoInterface;
            FETCH C_ObtenerServPuntoInterface INTO Ln_IdServicio, Ln_IdPunto;
            CLOSE C_ObtenerServPuntoInterface;
        ELSE
            OPEN C_ObtenerServPuntoElemento;
            FETCH C_ObtenerServPuntoElemento INTO Ln_IdServicio, Ln_IdPunto;
            CLOSE C_ObtenerServPuntoElemento;
        END IF;
        --ingreso la solicitud para el proceso masivo
        INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOLICITUD
        ( ID_DETALLE_SOLICITUD,TIPO_SOLICITUD_ID,ELEMENTO_ID,ESTADO,USR_CREACION,FE_CREACION )
        VALUES
        (
            DB_COMERCIAL.SEQ_INFO_DETALLE_SOLICITUD.NEXTVAL,
            ( SELECT ID_TIPO_SOLICITUD FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD
              WHERE DESCRIPCION_SOLICITUD = Lv_TipoSolicitud AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
            Pn_IdElemento,
            Lv_EstadoPendiente,
            Pv_UserWs,
            SYSDATE
        ) RETURNING ID_DETALLE_SOLICITUD INTO Ln_IdSolicitud;
        --ingreso el historial de la solicitud
        INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_HIST
        ( ID_SOLICITUD_HISTORIAL,DETALLE_SOLICITUD_ID,ESTADO,OBSERVACION,USR_CREACION,FE_CREACION,IP_CREACION )
        VALUES
        ( DB_COMERCIAL.SEQ_INFO_DETALLE_SOL_HIST.NEXTVAL,Ln_IdSolicitud,Lv_EstadoPendiente,Pv_Historial,Pv_UserWs,SYSDATE,Lv_IpWs );
        --ingreso la caracteristica para el tipo de proceso que se va a ejecutar
        INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
        ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
        VALUES
        (
            DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
            Ln_IdSolicitud,
            ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
              WHERE DESCRIPCION_CARACTERISTICA = 'TIPO_PROCESO' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
            Pv_TipoMasivo,
            Lv_EstadoPendiente,
            Pv_UserWs,
            SYSDATE
        );
        --ingreso la caracteristica para el id de la ejecucion
        INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
        ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
        VALUES
        (
            DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
            Ln_IdSolicitud,
            ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
              WHERE DESCRIPCION_CARACTERISTICA = 'ID_EJECUCION' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
            Pn_IdParametroEjecucion,
            Lv_EstadoPendiente,
            Pv_UserWs,
            SYSDATE
        );
        --valido los datos para ingresar el historial
        IF Pv_Historial IS NOT NULL THEN
            --obtengo el estado del elemento
            OPEN C_GetEstadoElemento;
            FETCH C_GetEstadoElemento INTO Lv_EstadoElemento;
            CLOSE C_GetEstadoElemento;
            --ingreso el historial del elemento
            INSERT INTO DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO
            ( ID_HISTORIAL,ELEMENTO_ID,ESTADO_ELEMENTO,OBSERVACION,USR_CREACION,FE_CREACION,IP_CREACION )
            VALUES
            ( DB_INFRAESTRUCTURA.SEQ_INFO_HISTORIAL_ELEMENTO.NEXTVAL,Pn_IdElemento,Lv_EstadoElemento,
              Pv_Historial,Pv_UserWs,SYSDATE,Lv_IpWs )
            RETURNING ID_HISTORIAL INTO Ln_IdHistorial;
            --ingreso la caracteristica para el id del historial
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'HISTORIAL_ELEMENTO_ID' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Ln_IdHistorial,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --valido los datos para ingresar la ciudad
        IF Pv_Ciudad IS NOT NULL THEN
            --ingreso la caracteristica para el nombre de la ciudad
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'NOMBRE_CIUDAD' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Pv_Ciudad,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --valido los datos para ingresar la interface
        IF Pn_IdInterface IS NOT NULL THEN
            --ingreso la caracteristica para el id de la interface
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Pn_IdInterface,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --ingreso la caracteristica para la capacidad uno
        IF Ln_CapacidadUno IS NOT NULL THEN
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD1' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Ln_CapacidadUno,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --ingreso la caracteristica para la capacidad dos
        IF Ln_CapacidadDos IS NOT NULL THEN
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD2' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Ln_CapacidadDos,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --ingreso la caracteristica para la capacidad uno y dos anterior
        IF Ln_CapacidadAnterior IS NOT NULL THEN
            --ingreso la caracteristica para la capacidad uno anterior
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD1 ANTERIOR' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Ln_CapacidadAnterior,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
            --ingreso la caracteristica para la capacidad dos anterior
            INSERT INTO DB_COMERCIAL.INFO_DETALLE_SOL_CARACT
            ( ID_SOLICITUD_CARACTERISTICA,DETALLE_SOLICITUD_ID,CARACTERISTICA_ID,VALOR,ESTADO,USR_CREACION,FE_CREACION )
            VALUES
            (
                DB_COMERCIAL.SEQ_INFO_DET_SOL_CARACT.NEXTVAL,
                Ln_IdSolicitud,
                ( SELECT ID_CARACTERISTICA FROM DB_COMERCIAL.ADMI_CARACTERISTICA
                  WHERE DESCRIPCION_CARACTERISTICA = 'CAPACIDAD2 ANTERIOR' AND ESTADO = Lv_EstadoActivo AND ROWNUM = 1 ),
                Ln_CapacidadAnterior,
                Lv_EstadoPendiente,
                Pv_UserWs,
                SYSDATE
            );
        END IF;
        --ingreso el proceso masivo
        INSERT INTO DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_CAB
        ( ID_PROCESO_MASIVO_CAB,TIPO_PROCESO,CANTIDAD_SERVICIOS,SOLICITUD_ID,EMPRESA_ID,ESTADO,USR_CREACION,FE_CREACION,IP_CREACION )
        VALUES
        (
            DB_INFRAESTRUCTURA.SEQ_INFO_PROCESO_MASIVO_CAB.NEXTVAL,
            Lv_TipoProceso,
            1,
            Ln_IdSolicitud,
            ( SELECT COD_EMPRESA FROM DB_COMERCIAL.INFO_EMPRESA_GRUPO WHERE PREFIJO = Lv_PrefijoEmpresa AND ROWNUM = 1 ),
            Lv_EstadoPendiente,
            Pv_UserWs,
            SYSDATE,
            Lv_IpWs
        ) RETURNING ID_PROCESO_MASIVO_CAB INTO Ln_IdMasivoCab;
        --ingreso los detalles del proceso masivo
        INSERT INTO DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_DET
        ( ID_PROCESO_MASIVO_DET,PROCESO_MASIVO_CAB_ID,PUNTO_ID,SERVICIO_ID,SOLICITUD_ID,
          ESTADO,USR_CREACION,FE_CREACION,IP_CREACION )
        VALUES
        (
            DB_INFRAESTRUCTURA.SEQ_INFO_PROCESO_MASIVO_DET.NEXTVAL,
            Ln_IdMasivoCab,
            Ln_IdPunto,
            Ln_IdServicio,
            Ln_IdSolicitud,
            Lv_EstadoPendiente,
            Pv_UserWs,
            SYSDATE,
            Lv_IpWs
        );
        --se guardan los cambios
        COMMIT;
        Pv_Status  := 'OK';
        Pv_Mensaje := 'OK';
    EXCEPTION
    WHEN OTHERS THEN
      --se resetean los cambios
      ROLLBACK;
      Pv_Status  := 'ERROR';
      Pv_Mensaje := 'Error al generar la solicitud masiva del control bw de interfaces';
      --se guarda el error
      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                'INFRK_TRANSACCIONES.P_GENERAR_MASIVO_CONTROL_BW',
                SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                SYSDATE,
                NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    --
END P_GENERAR_MASIVO_CONTROL_BW;

PROCEDURE P_UPLOAD_CSV_POLICY_SCOPE(
    Pn_IdArchivoCsvCpm      IN NUMBER,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lv_NombreParametroDirCsv        VARCHAR2(100) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
    Lv_CodEmpresa                   VARCHAR2(2) := '18';
    Lv_ContenidoPrimeraLinea        VARCHAR2(4000);
    Lv_ContenidoCabArchivoCorreo    VARCHAR2(4000);
    Lv_Delimitador                  VARCHAR2(1) := ',';
    Lv_Directorio                   VARCHAR2(50);
    Lv_RutaDirectorio               VARCHAR2(300);
    Lf_VerifPrimerLineaArchivo      UTL_FILE.FILE_TYPE;
    Lf_Archivo                      UTL_FILE.FILE_TYPE;
    Lv_ContenidoLinea               VARCHAR2(4000);
    Lv_StatusLineaCsv               VARCHAR2(5);
    Lr_RegDataPorProcesarLineaCsv   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm;
    Ln_IndxRegsDataPorProcesarPsm   NUMBER;
    Lt_TRegsDataPorProcesarPsm      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_DataPorProcesarPsm;
    Lt_TCamposPrimeraLineaCsv       DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Ln_CantidadColumnas             NUMBER;
    Lv_NombreCompletoArchivo        VARCHAR2(500);
    Lv_NombreArchivoCorreo          VARCHAR2(500);
    Lv_NombreArchivoCorreoZip       VARCHAR2(500);
    Lf_ArchivoProcesoMasivoPsm      UTL_FILE.FILE_TYPE;
    Lr_RegDataPorProcesarPsm        DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm;
    Lv_Mensaje                      VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Ln_Rownum                       NUMBER := 1;
    Lr_AdmiPolicy                   DB_INFRAESTRUCTURA.ADMI_POLICY%ROWTYPE;
    Lr_InfoSubRed                   DB_INFRAESTRUCTURA.INFO_SUBRED%ROWTYPE;
    Lr_InfoSubredTag                DB_INFRAESTRUCTURA.INFO_SUBRED_TAG%ROWTYPE;
    Lr_InfoDetalleElemento          DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE;
    Lt_PolicyOk                     DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lt_PolicyRepetidos              DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lt_ScopeOk                      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lt_ScopeRepetidos               DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Ln_IdPolicy                     DB_INFRAESTRUCTURA.ADMI_POLICY.ID_POLICY%TYPE := 0;
    Ln_IdSubRed                     DB_INFRAESTRUCTURA.INFO_SUBRED.ID_SUBRED%TYPE := 0;
    Ln_IdTag                        DB_INFRAESTRUCTURA.ADMI_TAG.ID_TAG%TYPE;
    Ln_IdDetalleElemento            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE;
    Lr_InfoHistorialElemento        DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE;
    Lv_TipoErrorLineaCsv            VARCHAR2(100);
    Lv_Gzip                         VARCHAR2(500);
    Luh_http_request                UTL_HTTP.req;
    Luh_http_response               UTL_HTTP.resp;
    LBL_CSV                         CLOB;
    Lv_NombreParamMapeoUrlHttps     VARCHAR2(24) := 'MAPEO_URLS_HTTPS_A_HTTP';
    Lv_Valor1UrlMsGuardarArchivos   VARCHAR2(24) := 'URL_MS_GUARDAR_ARCHIVOS';
    Lt_ArraySplitNombreArchivo      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_NombreArchivoPsm             VARCHAR2(500);
    TYPE type_array IS TABLE OF VARCHAR2(50);
    Lt_ArrayTags type_array;  

    CURSOR Lc_GetDataArchivoCsvCpm(Cn_IdDocumentoCpm NUMBER)
    IS
      SELECT UBICACION_LOGICA_DOCUMENTO, UBICACION_FISICA_DOCUMENTO
      FROM DB_COMUNICACION.INFO_DOCUMENTO
      WHERE ID_DOCUMENTO = Cn_IdDocumentoCpm;
      
    CURSOR Lc_GetNombrePolicy(Cv_NombrePolicy DB_INFRAESTRUCTURA.ADMI_POLICY.NOMBRE_POLICY%TYPE)
    IS
      SELECT NOMBRE_POLICY
      FROM DB_INFRAESTRUCTURA.ADMI_POLICY
      WHERE NOMBRE_POLICY = Cv_NombrePolicy
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetDataDirectoriosCsv(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1 AS NOMBRE_DIR_BD, DET.VALOR2 AS RUTA_DIR_BD
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdTag(Cv_NombreTag DB_INFRAESTRUCTURA.ADMI_TAG.DESCRIPCION%TYPE)
    IS
      SELECT ID_TAG
      FROM DB_INFRAESTRUCTURA.ADMI_TAG
      WHERE DESCRIPCION = Cv_NombreTag
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdDetalleElemento(Cv_ElementoId DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ELEMENTO_ID%TYPE,
                                   Cv_DetalleValor DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE)
    IS
      SELECT ID_DETALLE_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
      WHERE ELEMENTO_ID = Cv_ElementoId
      AND DETALLE_NOMBRE = 'SUBRED'
      AND DETALLE_VALOR = Cv_DetalleValor;

    CURSOR Lc_GetExtractCadena(Cv_ExtractTags VARCHAR2)
    IS
      SELECT REGEXP_SUBSTR(Cv_ExtractTags,'[^|]+', 1, LEVEL) TAG FROM dual
      CONNECT BY REGEXP_SUBSTR(Cv_ExtractTags, '[^|]+', 1, LEVEL) IS NOT NULL;
    
    CURSOR Lc_GetValoresParamsXValor1(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE,
                                      Cv_Valor1          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR3
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.VALOR1 = Cv_Valor1
      AND DET.ESTADO = Lv_EstadoActivo;
    
    Lr_RegGetValoresParamsXValor1   Lc_GetValoresParamsXValor1%ROWTYPE;
    Lr_RegGetDataArchivoCsvCpm      Lc_GetDataArchivoCsvCpm%ROWTYPE;
    
    Ln_NumRegistrosTotal            NUMBER := 0;
    Ln_NumRegistrosOk               NUMBER := 0;
    Ln_NumValidaScope               NUMBER := 0;
    Ln_NumValidaPolicy              NUMBER := 0;
    Ln_NumValidaElemento            NUMBER := 0;
    Ln_NumValidaIp                  NUMBER := 0;
    Ln_NumValidaDataCsv             NUMBER := 0;
    Ln_NumDesconocido               NUMBER := 0;
    Ln_NumMas1Registro              NUMBER := 0;
    Lv_Asunto                       VARCHAR2(200) := 'Notificación de proceso de subidas masivas';
    Lv_Remitente                    VARCHAR2(50) := 'notificaciones_telcos@telconet.ec';
    Lv_PlantillaInicial             VARCHAR2(4000);
    Lv_PlantillaCorreo              VARCHAR2(32767);
    Lr_GetAliasPlantillaCorreo      DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_ContenidoCorreo              VARCHAR2(4000);
    Lv_IpCreacion                   VARCHAR2(15);
    Ln_RedIp                        NUMBER := 0;
    Lv_DnsServers                   VARCHAR2(4000);
    Lv_Observacion                  VARCHAR2(2000);
    Lv_FormatoUrlArchivoHttps       VARCHAR2(300);
    Lv_FormatoUrlArchivoHttp        VARCHAR2(300);  
    Lv_UrlNfsArchivoCsvCpm          VARCHAR2(1500);
    Lv_UrlNfsHttpArchivoCsvCpm      VARCHAR2(1500);
    Lv_NombreArchivoCsvCpm          VARCHAR2(1500);
  BEGIN
    OPEN Lc_GetDataDirectoriosCsv(Lv_NombreParametroDirCsv);
    FETCH Lc_GetDataDirectoriosCsv INTO Lv_Directorio, Lv_RutaDirectorio;
    CLOSE Lc_GetDataDirectoriosCsv;

    IF Lv_Directorio IS NULL OR Lv_RutaDirectorio IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener el directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;

    Lv_IpCreacion  := '127.0.0.1';
    Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('PSMSUBIDA');
    Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
    IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
    ELSE 
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
    END IF;

    IF Lv_PlantillaInicial IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener la plantilla del correo enviado al procesar un archivo csv';
      RAISE Le_Exception;
    END IF;
    
    -- CAMBIOS
    OPEN Lc_GetDataArchivoCsvCpm(Pn_IdArchivoCsvCpm);
    FETCH Lc_GetDataArchivoCsvCpm INTO Lr_RegGetDataArchivoCsvCpm;
    CLOSE Lc_GetDataArchivoCsvCpm;
    Lv_UrlNfsArchivoCsvCpm  := Lr_RegGetDataArchivoCsvCpm.UBICACION_FISICA_DOCUMENTO;
    Lv_NombreArchivoCsvCpm  := Lr_RegGetDataArchivoCsvCpm.UBICACION_LOGICA_DOCUMENTO;
    IF Lv_NombreArchivoCsvCpm IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el nombre del archivo CSV Policy/Scope masivo';
      RAISE Le_Exception;
    END IF;
    IF Lv_UrlNfsArchivoCsvCpm IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener la ruta en la que se guard¿ el archivo CSV Policy/Scope masivo';
      RAISE Le_Exception;
    END IF;
    
    Lt_ArraySplitNombreArchivo  := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_NombreArchivoCsvCpm, '.');

    IF Lt_ArraySplitNombreArchivo.COUNT <> 2 THEN
      Lv_Mensaje := 'El nombre del archivo CSV de cambio ingreso de rutas no tiene el formato correcto';
      RAISE Le_Exception;
    END IF;
    Lv_NombreArchivoPsm := Lt_ArraySplitNombreArchivo(0);
    
    OPEN Lc_GetValoresParamsXValor1(Lv_NombreParamMapeoUrlHttps, Lv_Valor1UrlMsGuardarArchivos);
    FETCH Lc_GetValoresParamsXValor1 INTO Lr_RegGetValoresParamsXValor1;
    CLOSE Lc_GetValoresParamsXValor1;
    Lv_FormatoUrlArchivoHttps   := Lr_RegGetValoresParamsXValor1.VALOR2;
    Lv_FormatoUrlArchivoHttp    := Lr_RegGetValoresParamsXValor1.VALOR3;
    IF Lv_FormatoUrlArchivoHttps IS NULL OR Lv_FormatoUrlArchivoHttp IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el mapeo para la url del archivo';
      RAISE Le_Exception;
    END IF;

    Lv_UrlNfsHttpArchivoCsvCpm := REPLACE(Lv_UrlNfsArchivoCsvCpm, Lv_FormatoUrlArchivoHttps, Lv_FormatoUrlArchivoHttp);
    Lv_NombreCompletoArchivo    := Lv_NombreArchivoCsvCpm;
    
    -- CAMBIOS 
    -- Initialize the CLOB.
    DBMS_LOB.createtemporary(LBL_CSV, FALSE);

    -- Make a HTTP request and get the response.
    Luh_http_request  := UTL_HTTP.begin_request(Lv_UrlNfsHttpArchivoCsvCpm);
    Luh_http_response := UTL_HTTP.get_response(Luh_http_request);
    
    Lv_NombreArchivoCorreo     := Lv_NombreArchivoPsm || '_RegistrosProcesoCreacionPsm.csv';
    Lf_ArchivoProcesoMasivoPsm := UTL_FILE.FOPEN(Lv_Directorio, Lv_NombreArchivoCorreo, 'w', 4000);

    BEGIN
      LOOP   
        UTL_HTTP.read_line(Luh_http_response, LBL_CSV);
        Lv_ContenidoLinea             := '';
        Lv_StatusLineaCsv             := '';
        Lv_TipoErrorLineaCsv          := '';
        Lr_RegDataPorProcesarLineaCsv := NULL;
        Lv_ContenidoLinea             := REPLACE(LBL_CSV,  CHR(13), '');
        Ln_NumRegistrosTotal          := Ln_NumRegistrosTotal + 1;
        
        IF Ln_NumRegistrosTotal = 1 THEN
            IF Lv_ContenidoLinea IS NOT NULL THEN
              Lt_TCamposPrimeraLineaCsv := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_ContenidoLinea, Lv_Delimitador);
              Ln_CantidadColumnas := Lt_TCamposPrimeraLineaCsv.COUNT;
              IF Ln_CantidadColumnas = 13 THEN
                Lv_ContenidoCabArchivoCorreo := 'Policy' || Lv_Delimitador || 
                                                'Scope' || Lv_Delimitador || 
                                                'IP Olt' || Lv_Delimitador ||
                                                'Estado' || Lv_Delimitador ||
                                                'Observación';
              ELSE
                Lv_Mensaje := 'El archivo tiene un número de columnas no permitidas. Sólo se permiten 13 columnas con el formato correcto para la subida masiva de policy/scopes';
                RAISE Le_Exception;
              END IF;
            ELSE
              Lv_Mensaje := 'El archivo no tiene data para procesar';
              RAISE Le_Exception;
            END IF;
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoCabArchivoCorreo);
        END IF;    

        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_VALIDA_LINEA_CSV_PSM(  Lv_ContenidoLinea, Lv_Delimitador, Lv_StatusLineaCsv, Lv_TipoErrorLineaCsv, 
                                                              Lr_RegDataPorProcesarLineaCsv);
        IF Lv_StatusLineaCsv = 'OK' THEN
          IF Lt_PolicyOk.EXISTS(Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY) AND NOT Lt_PolicyRepetidos.EXISTS(Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY) THEN
            Lt_PolicyRepetidos(Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY) := Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY;
          END IF;
          Lt_PolicyOk(Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY) := Lr_RegDataPorProcesarLineaCsv.NOMBRE_POLICY;

          IF Lt_ScopeOk.EXISTS(Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR) AND NOT Lt_ScopeRepetidos.EXISTS(Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR) THEN
            Lt_ScopeRepetidos(Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR) := Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR;
          END IF;
          Lt_ScopeOk(Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR) := Lr_RegDataPorProcesarLineaCsv.DETALLE_VALOR;

          Lt_TRegsDataPorProcesarPsm(Lt_TRegsDataPorProcesarPsm.COUNT) := Lr_RegDataPorProcesarLineaCsv;
        ELSE
          IF Lv_TipoErrorLineaCsv = 'ErrorValidaNombreScope' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Nombre de Scope ya existe');
            Ln_NumValidaScope := Ln_NumValidaScope + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdPolicy' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Policy ya existe');
            Ln_NumValidaPolicy := Ln_NumValidaPolicy + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIdElemento' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Elemento no existe');
            Ln_NumValidaElemento := Ln_NumValidaElemento + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaIp' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Ip no existe');
            Ln_NumValidaIp := Ln_NumValidaIp + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaDataCsv' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'La data no está completa en el archivo');
            Ln_NumValidaDataCsv := Ln_NumValidaDataCsv + 1;

          ELSE
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lv_ContenidoLinea || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador 
                                                    || 'Archivo con error desconocido');
            Ln_NumDesconocido := Ln_NumDesconocido + 1;
          END IF;
          --Fin de validaci¿n de tipos de errores
        END IF;
        --Fin de validaci¿n del StatusLineaCsv
        END LOOP;
        EXCEPTION WHEN UTL_HTTP.end_of_body THEN
          UTL_HTTP.end_response(Luh_http_response);
      END;
    
    DBMS_LOB.freetemporary(LBL_CSV);
    
    Ln_IndxRegsDataPorProcesarPsm := Lt_TRegsDataPorProcesarPsm.FIRST;
    WHILE (Ln_IndxRegsDataPorProcesarPsm IS NOT NULL)
    LOOP
      Lr_RegDataPorProcesarPsm  := Lt_TRegsDataPorProcesarPsm(Ln_IndxRegsDataPorProcesarPsm);
      
      IF NOT Lt_PolicyRepetidos.EXISTS(Lr_RegDataPorProcesarPsm.NOMBRE_POLICY) 
         AND NOT Lt_ScopeRepetidos.EXISTS(Lr_RegDataPorProcesarPsm.DETALLE_VALOR) THEN
         UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lr_RegDataPorProcesarPsm.NOMBRE_POLICY || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.DETALLE_VALOR || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.IP || Lv_Delimitador ||
                                                  'OK' || Lv_Delimitador ||
                                                  'Registro procesado correctamente');
        Lv_DnsServers                      := REPLACE(Lr_RegDataPorProcesarPsm.DNS_SERVERS,',','|');
        Lr_AdmiPolicy                      := NULL;
        Ln_IdPolicy                        := DB_INFRAESTRUCTURA.SEQ_ADMI_POLICY.NEXTVAL;
        Lr_AdmiPolicy.ID_POLICY            := Ln_IdPolicy;
        Lr_AdmiPolicy.NOMBRE_POLICY        := Lr_RegDataPorProcesarPsm.NOMBRE_POLICY;
        Lr_AdmiPolicy.LEASE_TIME           := Lr_RegDataPorProcesarPsm.LEASE_TIME;
        Lr_AdmiPolicy.MASCARA              := Lr_RegDataPorProcesarPsm.MASCARA;
        Lr_AdmiPolicy.DNS_NAME             := Lr_RegDataPorProcesarPsm.DNS_NAME;
        Lr_AdmiPolicy.DNS_SERVERS          := Lv_DnsServers;
        Lr_AdmiPolicy.ESTADO               := Lv_EstadoActivo;
        Lr_AdmiPolicy.USR_CREACION         := Pv_UsrCreacion;
        Lr_AdmiPolicy.IP_CREACION          := Lv_IpCreacion;
        Lr_AdmiPolicy.GATEWAY              := Lr_RegDataPorProcesarPsm.GATEWAY;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_ADMI_POLICY(Lr_AdmiPolicy, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        -- Seleccionamos la red ip
        Ln_RedIp  :=  TO_NUMBER(REGEXP_SUBSTR(Lr_RegDataPorProcesarPsm.SUBRED_0,'([^/]+?)(/|?$)',1,2, '',1));

        -- Grabamos la informaci¿n en la tabla INFO_SUBRED
        Lr_InfoSubred                      := NULL;
        Ln_IdSubRed                        := DB_INFRAESTRUCTURA.SEQ_INFO_SUBRED.NEXTVAL;
        Lr_InfoSubred.ID_SUBRED            := Ln_IdSubRed;
        Lr_InfoSubred.RED_ID               := Ln_RedIp;
        Lr_InfoSubred.SUBRED               := Lr_RegDataPorProcesarPsm.SUBRED;
        Lr_InfoSubred.IP_INICIAL           := Lr_RegDataPorProcesarPsm.IP_INICIAL;
        Lr_InfoSubred.IP_FINAL             := Lr_RegDataPorProcesarPsm.IP_FINAL;
        Lr_InfoSubred.ESTADO               := Lv_EstadoActivo;
        Lr_InfoSubred.USR_CREACION         := Pv_UsrCreacion;
        Lr_InfoSubred.IP_CREACION          := Lv_IpCreacion;
        Lr_InfoSubred.MASCARA              := Lr_RegDataPorProcesarPsm.MASCARA;
        Lr_InfoSubred.NOTIFICACION         := Ln_IdPolicy;
        Lr_InfoSubred.ELEMENTO_ID          := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;

        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_INFO_SUBRED(Lr_InfoSubred, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;
--        
        -- Se carga los valores de los Tags a un arreglo para crearlos en la base
        FOR Lv_Item IN Lc_GetExtractCadena(Lr_RegDataPorProcesarPsm.TAGS)
        LOOP
          -- Se consulta el ID_TAG por medio de la descripc¿n del TAG
          OPEN Lc_GetIdTag(Lv_Item.TAG);
          FETCH Lc_GetIdTag INTO Ln_IdTag;
          CLOSE Lc_GetIdTag;

          -- Grabamos la informaci¿n en la tabla INFO_SUBRED_TAG
          Lr_InfoSubredTag                   := NULL;
          Lr_InfoSubredTag.SUBRED_ID         := Ln_IdSubRed;
          Lr_InfoSubredTag.TAG_ID            := Ln_IdTag;
          Lr_InfoSubredTag.USR_CREACION      := Pv_UsrCreacion;
          Lr_InfoSubredTag.ESTADO            := Lv_EstadoActivo;

          DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_INFO_SUBRED_TAG(Lr_InfoSubredTag, Lv_Mensaje);
          IF Lv_Mensaje IS NOT NULL THEN
             RAISE Le_Exception;
          END IF;
        END LOOP;

        -- Se ingresa elemento SUBRED
        Lr_InfoDetalleElemento                      := NULL;
        Lr_InfoDetalleElemento.ELEMENTO_ID          := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;
        Lr_InfoDetalleElemento.DETALLE_NOMBRE       := 'SUBRED';
        Lr_InfoDetalleElemento.DETALLE_VALOR        := Ln_IdSubRed;
        Lr_InfoDetalleElemento.DETALLE_DESCRIPCION  := 'SUBRED';
        Lr_InfoDetalleElemento.USR_CREACION         := Pv_UsrCreacion;
        Lr_InfoDetalleElemento.IP_CREACION          := Lv_IpCreacion;
        Lr_InfoDetalleElemento.ESTADO               := Lv_EstadoActivo;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        OPEN Lc_GetIdDetalleElemento(Lr_RegDataPorProcesarPsm.ELEMENTO_ID,Ln_IdSubRed);
        FETCH Lc_GetIdDetalleElemento INTO Ln_IdDetalleElemento;
        CLOSE Lc_GetIdDetalleElemento;

        -- Se ingresa elemento SCOPE
        Lr_InfoDetalleElemento                          := NULL;
        Lr_InfoDetalleElemento.ELEMENTO_ID              := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;
        Lr_InfoDetalleElemento.DETALLE_NOMBRE           := 'SCOPE';
        Lr_InfoDetalleElemento.DETALLE_VALOR            := Lr_RegDataPorProcesarPsm.DETALLE_VALOR;
        Lr_InfoDetalleElemento.DETALLE_DESCRIPCION      := 'SCOPE';
        Lr_InfoDetalleElemento.USR_CREACION             := Pv_UsrCreacion;
        Lr_InfoDetalleElemento.IP_CREACION              := Lv_IpCreacion;
        Lr_InfoDetalleElemento.ESTADO                   := Lv_EstadoActivo;
        Lr_InfoDetalleElemento.REF_DETALLE_ELEMENTO_ID  := Ln_IdDetalleElemento;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        -- Se ingresa elemento SUBRED PRIMARIA
        Lr_InfoDetalleElemento                          := NULL;
        Lr_InfoDetalleElemento.ELEMENTO_ID              := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;
        Lr_InfoDetalleElemento.DETALLE_NOMBRE           := 'SUBRED PRIMARIA';
        Lr_InfoDetalleElemento.DETALLE_VALOR            := Lr_RegDataPorProcesarPsm.SUBRED_0;
        Lr_InfoDetalleElemento.DETALLE_DESCRIPCION      := 'SUBRED PRIMARIA';
        Lr_InfoDetalleElemento.USR_CREACION             := Pv_UsrCreacion;
        Lr_InfoDetalleElemento.IP_CREACION              := Lv_IpCreacion;
        Lr_InfoDetalleElemento.ESTADO                   := Lv_EstadoActivo;
        Lr_InfoDetalleElemento.REF_DETALLE_ELEMENTO_ID  := Ln_IdDetalleElemento;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        -- Se ingresa elemento TIPO SCOPE
        Lr_InfoDetalleElemento                          := NULL;
        Lr_InfoDetalleElemento.ELEMENTO_ID              := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;
        Lr_InfoDetalleElemento.DETALLE_NOMBRE           := 'TIPO SCOPE';
        Lr_InfoDetalleElemento.DETALLE_VALOR            := 'Privada';
        Lr_InfoDetalleElemento.DETALLE_DESCRIPCION      := 'TIPO SCOPE';
        Lr_InfoDetalleElemento.USR_CREACION             := Pv_UsrCreacion;
        Lr_InfoDetalleElemento.IP_CREACION              := Lv_IpCreacion;
        Lr_InfoDetalleElemento.ESTADO                   := Lv_EstadoActivo;
        Lr_InfoDetalleElemento.REF_DETALLE_ELEMENTO_ID  := Ln_IdDetalleElemento;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        -- Se ingresa el historial elemnto de creaci¿n de scope
        Lv_Observacion  := 'Se creo Policy '||Lr_RegDataPorProcesarPsm.NOMBRE_POLICY||' y se creó Scope '||Lr_RegDataPorProcesarPsm.DETALLE_VALOR||' por proceso masivo';

        Lr_InfoHistorialElemento                  := NULL;
        Lr_InfoHistorialElemento.ELEMENTO_ID      := Lr_RegDataPorProcesarPsm.ELEMENTO_ID;
        Lr_InfoHistorialElemento.ESTADO_ELEMENTO  := Lr_RegDataPorProcesarPsm.ESTADO_ELEMENTO;
        Lr_InfoHistorialElemento.OBSERVACION      := Lv_Observacion;
        Lr_InfoHistorialElemento.USR_CREACION     := Pv_UsrCreacion;
        Lr_InfoHistorialElemento.IP_CREACION      := Lv_IpCreacion;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_InfoHistorialElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        Ln_NumRegistrosOk := Ln_NumRegistrosOk + 1;
      ELSE
        Ln_NumMas1Registro := Ln_NumMas1Registro + 1;
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoMasivoPsm, Lr_RegDataPorProcesarPsm.NOMBRE_POLICY || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.DETALLE_VALOR || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.IP || Lv_Delimitador ||
                                                  'ERROR' || Lv_Delimitador ||
                                                  'Policy/Scope repetido');

      END IF;
      Ln_IndxRegsDataPorProcesarPsm := Lt_TRegsDataPorProcesarPsm.NEXT(Ln_IndxRegsDataPorProcesarPsm);
    END LOOP;

    UTL_FILE.FCLOSE(Lf_ArchivoProcesoMasivoPsm);

    Lv_PlantillaCorreo  := Lv_PlantillaInicial;
    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{NUM_REGISTROS_TOTAL}}', Ln_NumRegistrosTotal);

    IF Ln_NumRegistrosOk > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumRegistrosOk || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Archivo procesado correctamente</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaScope > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaScope || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Scope ya existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaPolicy > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaPolicy || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Policy ya existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaElemento > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaElemento || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elemento no existe/no es un OLT</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaIp > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaIp || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Ip no existe/estado Eliminado</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaDataCsv > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaDataCsv || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Cliente no tiene la data completa en el archivo</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumMas1Registro > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumMas1Registro || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Policy/Scope repetidos</td>' ||
                            '</tr>';
    END IF;

    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{CUERPO_CORREO}}', Lv_ContenidoCorreo);

    Lv_Gzip := 'gzip ' || Lv_RutaDirectorio || Lv_NombreArchivoCorreo;
    Lv_NombreArchivoCorreoZip  := Lv_NombreArchivoCorreo || '.gz';
    DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND(Lv_Gzip));
--
    BEGIN
      DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, Lv_Asunto, Lv_PlantillaCorreo, 
                                                Lv_Directorio, Lv_NombreArchivoCorreoZip);
      UTL_FILE.FREMOVE(Lv_Directorio, Lv_NombreArchivoCorreoZip);

    EXCEPTION
    WHEN OTHERS THEN
      UTL_MAIL.SEND (   SENDER      => Lv_Remitente, 
                        RECIPIENTS  => Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                        SUBJECT     => Lv_Asunto,
                        MESSAGE     => SUBSTR(Lv_PlantillaCorreo, 1, 32767),
                        MIME_TYPE   => 'text/html; charset=iso-8859-1');

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_POLICY_SCOPE->ENVIO_CORREO', 
                                            'No se ha podido enviar el archivo en la ruta ' || Lv_RutaDirectorio || Lv_NombreArchivoCorreo || ' '
                                            || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') ); 
    END;
    Pv_Status     := 'OK';
    Pv_Mensaje    := 'Proceso realizado correctamente';
    COMMIT;
  EXCEPTION
  WHEN Le_Exception THEN
    Pv_Status   := 'ERROR';
    Pv_Mensaje  := Lv_Mensaje;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_POLICY_SCOPE', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  WHEN OTHERS THEN
    Pv_Status               := 'ERROR';
    Pv_Mensaje              := 'Ha ocurrido un problema al realizar la subida del archivo CSV para creación de scopes y policy. '
                                || 'Por favor comuníquese con Sistemas!';
    Lv_Mensaje              := 'Error en la subida del archivo CSV para creación de scopes y policy ' || SQLCODE || ' - ERROR_STACK: ' 
                                || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_POLICY_SCOPE', 
                                            Lv_Mensaje, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_UPLOAD_CSV_POLICY_SCOPE;

  PROCEDURE P_VALIDA_LINEA_CSV_PSM(
    Pv_ContenidoLinea           IN VARCHAR2,
    Pv_DelimitadorCampo         IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_TipoError                OUT VARCHAR2,
    Pr_RegDataPorProcesar       OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarPsm)
  AS
    Ln_Rownum                       NUMBER := 1;
    Lv_EstadoElemento               VARCHAR2(100);

    CURSOR Lc_GetElementoId(Cv_Ip DB_INFRAESTRUCTURA.INFO_IP.IP%TYPE)
    IS
      SELECT ELEMENTO_ID
      FROM DB_INFRAESTRUCTURA.INFO_IP
      WHERE IP = Cv_Ip
      AND ESTADO = 'Activo'
      AND ROWNUM = Ln_Rownum;
    CURSOR Lc_GetElementoNombre(Cv_ElementoId DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE)
    IS
      SELECT ELE.NOMBRE_ELEMENTO, ELE.ESTADO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE, DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD, 
      DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
      WHERE ELE.ID_ELEMENTO = Cv_ElementoId
      AND MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
      AND TIP.ID_TIPO_ELEMENTO = MOD.TIPO_ELEMENTO_ID
      AND TIP.NOMBRE_TIPO_ELEMENTO = 'OLT'
      AND ROWNUM = Ln_Rownum;
    CURSOR Lc_GetPolicy(Cv_NombrePolicy DB_INFRAESTRUCTURA.ADMI_POLICY.NOMBRE_POLICY%TYPE)
    IS
      SELECT ID_POLICY
      FROM DB_INFRAESTRUCTURA.ADMI_POLICY
      WHERE NOMBRE_POLICY = Cv_NombrePolicy
      AND ROWNUM = Ln_Rownum;  
    CURSOR Lc_GetNombreScope(Cv_IdElemento  DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE, 
                             Cv_NombreScope DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE)
    IS
      SELECT ID_DETALLE_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
      WHERE ELEMENTO_ID = Cv_IdElemento
      AND DETALLE_NOMBRE = 'SCOPE'
      AND DETALLE_VALOR = Cv_NombreScope
      AND ROWNUM = Ln_Rownum;    

    Ln_IndxTCamposXLineaCsv         NUMBER;
    Lt_TCamposXLineaCsv             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_IpOltCsv                     DB_INFRAESTRUCTURA.INFO_IP.IP%TYPE;
    Lv_IdOltElemento                DB_INFRAESTRUCTURA.INFO_IP.ELEMENTO_ID%TYPE;
    Ln_IdOlt                        DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Lv_LeaseTimeCsv                 DB_INFRAESTRUCTURA.ADMI_POLICY.LEASE_TIME%TYPE;
    Lv_DnsNameCsv                   DB_INFRAESTRUCTURA.ADMI_POLICY.DNS_NAME%TYPE;
    Lv_DnsServersCsv                DB_INFRAESTRUCTURA.ADMI_POLICY.DNS_SERVERS%TYPE;
    Lv_GatewayCsv                   DB_INFRAESTRUCTURA.ADMI_POLICY.GATEWAY%TYPE;
    Lv_NombreOlt                    DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_ContinuaValidacion           VARCHAR2(2) := 'NO';
    Lv_NombrePolicy                 VARCHAR2(500);
    Ln_IdPolicy                     DB_INFRAESTRUCTURA.ADMI_POLICY.ID_POLICY%TYPE;
    Lv_NombreScopeCsv               DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.DETALLE_VALOR%TYPE;
    Lv_SubredCsv                    DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED%TYPE;
    Lv_TagsCsv                      VARCHAR2(4000);
    Lv_IpInicioCsv                  DB_INFRAESTRUCTURA.INFO_SUBRED.IP_INICIAL%TYPE;
    Lv_IpFinCsv                     DB_INFRAESTRUCTURA.INFO_SUBRED.IP_FINAL%TYPE;
    Lv_Subred0Csv                   VARCHAR2(200);
    Lv_MascaraCsv                   DB_INFRAESTRUCTURA.INFO_SUBRED.MASCARA%TYPE;
    Lv_NombrePolicyCsv              DB_INFRAESTRUCTURA.ADMI_POLICY.NOMBRE_POLICY%TYPE;
    Ln_IdDetalleElemento            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE;
  BEGIN
    Lt_TCamposXLineaCsv       := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Pv_ContenidoLinea, Pv_DelimitadorCampo);
    Ln_IndxTCamposXLineaCsv   := 0;
    Lv_NombrePolicyCsv        := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_NombrePolicyCsv      := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_IpOltCsv           := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_IpOltCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_LeaseTimeCsv           := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_LeaseTimeCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_DnsNameCsv           := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_DnsNameCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_DnsServersCsv          := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_DnsServersCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_GatewayCsv             := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_GatewayCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_MascaraCsv             := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_MascaraCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_NombreScopeCsv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_NombreScopeCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_SubredCsv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_SubredCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_TagsCsv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_TagsCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_IpInicioCsv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_IpInicioCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_IpFinCsv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_IpFinCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;
    Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
    Lv_Subred0Csv         := '';
    IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
      Lv_Subred0Csv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
    END IF;

    IF Lv_NombrePolicyCsv IS NOT NULL AND Lv_IpOltCsv IS NOT NULL 
      AND Lv_LeaseTimeCsv IS NOT NULL AND Lv_DnsNameCsv IS NOT NULL 
      AND Lv_DnsServersCsv IS NOT NULL AND Lv_GatewayCsv IS NOT NULL 
      AND Lv_NombreScopeCsv IS NOT NULL AND Lv_SubredCsv IS NOT NULL 
      AND Lv_TagsCsv IS NOT NULL AND Lv_IpInicioCsv IS NOT NULL  
      AND Lv_IpFinCsv IS NOT NULL AND Lv_MascaraCsv IS NOT NULL  
      AND Lv_Subred0Csv IS NOT NULL THEN
      OPEN Lc_GetElementoId(Lv_IpOltCsv);
      FETCH Lc_GetElementoId INTO Lv_IdOltElemento;
      CLOSE Lc_GetElementoId;
      IF Lv_IdOltElemento IS NOT NULL THEN
        OPEN Lc_GetElementoNombre(Lv_IdOltElemento);
        FETCH Lc_GetElementoNombre INTO Lv_NombreOlt, Lv_EstadoElemento;
        CLOSE Lc_GetElementoNombre;
        IF Lv_NombreOlt IS NOT NULL THEN
          OPEN Lc_GetPolicy(Lv_NombrePolicyCsv);
          FETCH Lc_GetPolicy INTO Ln_IdPolicy;
          CLOSE Lc_GetPolicy;
          IF Ln_IdPolicy IS NULL THEN
             Lv_ContinuaValidacion := 'SI';
             --Fin de la validaci¿n del nombre de policy
          ELSE
          --Caso contrario de la validaci¿n del id del policy
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaIdPolicy';
          END IF;
          --Fin de la validaci¿n del id del policy
        ELSE
        --Caso contrario de la validaci¿n del elemento
          Pv_Status     := 'ERROR';
          Pv_TipoError  := 'ErrorValidaIdElemento';
        END IF;
        --Fin de la validaci¿n del elemento
      ELSE
      --Caso contrario de la validaci¿n del ip no existe
        Pv_Status     := 'ERROR';
        Pv_TipoError  := 'ErrorValidaIp';
      END IF;
      --Fin de la validaci¿n del id del plan nuevo
    ELSE
    --Caso contrario de la validaci¿n de data del archivo
      Pv_Status     := 'ERROR';
      Pv_TipoError  := 'ErrorValidaDataCsv';
    END IF;
    --Fin de la validaci¿n del elemento, nombre policy, ip y data del archivo

    IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';
      --Consultamos si el nombre del scope existe
      OPEN Lc_GetNombreScope(Lv_IdOltElemento,Lv_NombreScopeCsv);
      FETCH Lc_GetNombreScope INTO Ln_IdDetalleElemento;
      CLOSE Lc_GetNombreScope;
      IF Ln_IdDetalleElemento IS NULL THEN
        Lv_ContinuaValidacion := 'SI';
      ELSE
          --Caso contrario de la validaci¿n del nombre de scope
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaNombreScope';
      END IF;
    END IF;

    IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';

      Pv_Status                                   := 'OK';
      Pv_TipoError                                := '';
      Pr_RegDataPorProcesar                       := NULL;
      Pr_RegDataPorProcesar.NOMBRE_POLICY         := Lv_NombrePolicyCsv;
      Pr_RegDataPorProcesar.IP                    := Lv_IpOltCsv;
      Pr_RegDataPorProcesar.LEASE_TIME            := Lv_LeaseTimeCsv;
      Pr_RegDataPorProcesar.DNS_NAME              := Lv_DnsNameCsv;
      Pr_RegDataPorProcesar.DNS_SERVERS           := Lv_DnsServersCsv;
      Pr_RegDataPorProcesar.GATEWAY               := Lv_GatewayCsv;
      Pr_RegDataPorProcesar.MASCARA               := Lv_MascaraCsv;
      Pr_RegDataPorProcesar.DETALLE_VALOR         := Lv_NombreScopeCsv;
      Pr_RegDataPorProcesar.SUBRED                := Lv_SubredCsv;
      Pr_RegDataPorProcesar.TAGS                  := Lv_TagsCsv;
      Pr_RegDataPorProcesar.IP_INICIAL            := Lv_IpInicioCsv;
      Pr_RegDataPorProcesar.IP_FINAL              := Lv_IpFinCsv;
      Pr_RegDataPorProcesar.SUBRED_0              := Lv_Subred0Csv;
      Pr_RegDataPorProcesar.ELEMENTO_ID           := Lv_IdOltElemento;
      Pr_RegDataPorProcesar.ESTADO_ELEMENTO       := Lv_EstadoElemento;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status               := 'ERROR';
    Pv_TipoError            := 'ErrorDesconocido';
    Pr_RegDataPorProcesar   := NULL;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_VALIDA_LINEA_CSV_PSM', 
                                            'Error en la validaci¿n de la l¿nea del archivo CSV para creaci¿n scopes y policy ' || SQLCODE 
                                            || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_VALIDA_LINEA_CSV_PSM;

  PROCEDURE SUBNETEAR_SUBRED_HIJAS(
                    pn_idElementoAnt    IN NUMBER,
                    pn_idElementoNuevo  IN NUMBER,
                    pv_subred_ip        IN VARCHAR2,
                    pv_subred_mascara   IN VARCHAR2,
                    pv_usoAnterior      IN VARCHAR2,
                    pv_usoNuevo         IN VARCHAR2,
                    pv_tipo             IN VARCHAR2,
                    pv_status           OUT VARCHAR2,
                    pv_mensaje          OUT VARCHAR2) AS
      lv_mascara_maxima   VARCHAR2(100);
      Le_Exception        EXCEPTION;
      ln_cantSubredes     NUMBER;
      Pn_existeSubred     NUMBER;
      lv_comodin          VARCHAR2(100);
      lv_ipMascara        VARCHAR2(100);
      Lv_MensajeError     VARCHAR2(4000);
      ln_contador         NUMBER       := 0;
      ln_contadorAux2     NUMBER       := 0;
      lv_campo_subred     VARCHAR2(30) := '';
      lv_1octeto          VARCHAR2(30) := '';
      lv_2octetos         VARCHAR2(30) := '';
      lv_3erocteto        VARCHAR2(30) := '';
      lv_4octeto          VARCHAR2(30) := '';
      lv_aux3erOcteto     VARCHAR2(30) := '';
      lv_aux4toOcteto     VARCHAR2(30) := '';
      lv_cantidadIps      VARCHAR2(100) := '0';
      lv_cantidadIpXOcteto VARCHAR2(100) := '0';
      --
      ln_IdElementoAnt    NUMBER       := pn_idElementoAnt;
      ln_IdElementoNuevo  NUMBER       := pn_idElementoNuevo;
      lv_subred           VARCHAR2(30) := pv_subred_ip;
      lv_mascara          VARCHAR2(30) := pv_subred_mascara;
      lv_aux_mascara      VARCHAR2(30) := pv_subred_mascara;
      lv_usoAnterior      VARCHAR2(30) := pv_usoAnterior;
      lv_usoNuevo         VARCHAR2(30) := pv_usoNuevo;
      lv_tipoRed          VARCHAR2(5)  := pv_tipo;
      --
      lv_Estado           VARCHAR2(30) := 'Ocupado';

      TYPE subredesPorMascara is VARRAY(16) of number;
      arraySubredesPorMascara subredesPorMascara := subredesPorMascara(1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768);

      CURSOR C_ValidarSubred(Cv_Subred DB_INFRAESTRUCTURA.INFO_SUBRED.SUBRED%TYPE,Cv_Uso DB_INFRAESTRUCTURA.INFO_SUBRED.USO%TYPE)
      IS
        SELECT COUNT(ISU.ID_SUBRED)
        FROM DB_INFRAESTRUCTURA.INFO_SUBRED ISU
        WHERE ISU.SUBRED = Cv_Subred
        AND ISU.USO = Cv_Uso
        AND ISU.ESTADO IN ('Ocupado','Activo');

      CURSOR Lc_GetParametros(cv_nombre_parametro VARCHAR2,cv_descripcion VARCHAR2)
      IS
        SELECT valor1,valor2,valor3
        FROM DB_GENERAL.ADMI_PARAMETRO_CAB apc, DB_GENERAL.ADMI_PARAMETRO_DET apt
        WHERE apc.id_parametro = apt.parametro_id
        AND apc.nombre_parametro = cv_nombre_parametro
        AND apt.descripcion = cv_descripcion;
  BEGIN
      --Si el campo es null se asigna por default LAN
      IF(pv_tipo is null) THEN
          lv_tipoRed := 'LAN';
      END IF;

      lv_1octeto   := CONCAT(regexp_substr(lv_subred, '[^.]+', 1, 1),'.');
      lv_2octetos  := CONCAT(lv_1octeto, regexp_substr(lv_subred, '[^.]+', 1, 2));
      lv_2octetos  := CONCAT(lv_2octetos,'.');
      lv_3erocteto := to_char(regexp_substr(TRIM(lv_subred), '[^.]+', 1, 3));
      lv_4octeto   := regexp_substr(lv_subred, '[^.]+', 1, 4);

      OPEN Lc_GetParametros('SUBNETEO DE CLASE B','mascara_maxima');
      FETCH Lc_GetParametros INTO lv_mascara_maxima,lv_comodin,lv_comodin;
      CLOSE Lc_GetParametros;

      --Validar si la subred ya fue subneteada
      WHILE (lv_aux_mascara <= lv_mascara_maxima) LOOP
        OPEN C_ValidarSubred(lv_subred||'/'||lv_aux_mascara,lv_usoAnterior);
        FETCH C_ValidarSubred into Pn_existeSubred;
        CLOSE C_ValidarSubred;
        IF(Pn_existeSubred = 0) THEN
          RAISE Le_Exception;
        END IF;
        lv_aux_mascara := lv_aux_mascara + 1;
      END LOOP;

      --se recorre todas las mascaras
      WHILE (lv_mascara <= lv_mascara_maxima) LOOP
          --setear los datos
          ln_contadorAux2 := 0;
          ln_contador     := ln_contador + 1;
          ln_cantSubredes := arraySubredesPorMascara(ln_contador);
          lv_aux3erOcteto := lv_3erocteto;
          lv_aux4toOcteto := lv_4octeto;
          --se crea las cantidad de subredes por mascara
          FOR j in 1 .. ln_cantSubredes LOOP
              --
              ln_contadorAux2 := ln_contadorAux2 + 1;
              --obtengo la cantidad de ips por mascara
              OPEN Lc_GetParametros('SUBNETEO DE CLASE B',lv_mascara);
              FETCH Lc_GetParametros INTO lv_cantidadIps,lv_ipMascara,lv_cantidadIpXOcteto;
              CLOSE Lc_GetParametros;
              --se obtiene la subred
              IF(lv_mascara < 25) THEN
                  lv_campo_subred    := lv_2octetos || lv_aux3erOcteto || '.0' || '/' || lv_mascara;
              ELSIF(lv_mascara >24) THEN
                  lv_campo_subred    := lv_2octetos || lv_aux3erOcteto || '.' || lv_aux4toOcteto || '/' || lv_mascara;
              END IF;
              --
              IF(ln_cantSubredes > 1) THEN
                  IF(lv_mascara < 25) THEN
                        lv_aux3erOcteto := TO_CHAR(TO_NUMBER(lv_aux3erOcteto) + TO_NUMBER(lv_cantidadIps));
                  ELSIF(lv_mascara > 24) THEN
                      lv_aux4toOcteto := TO_CHAR(TO_NUMBER(lv_aux4toOcteto) + TO_NUMBER(lv_cantidadIps));
                      if(ln_contadorAux2 = lv_cantidadIpXOcteto) then
                          ln_contadorAux2 := 0;
                          lv_aux4toOcteto := '0';
                          lv_aux3erOcteto := to_char(to_number(lv_aux3erOcteto + 1));
                      END IF;
                  END IF;
              END IF;
              --
              UPDATE DB_INFRAESTRUCTURA.INFO_SUBRED SET ELEMENTO_ID = ln_IdElementoNuevo, USO = lv_usoNuevo, ESTADO = lv_Estado
              WHERE ( ln_IdElementoAnt IS NULL OR ELEMENTO_ID = ln_IdElementoAnt ) AND SUBRED = lv_campo_subred AND USO = lv_usoAnterior AND TIPO = lv_tipoRed;
          END LOOP;
          lv_mascara := TO_CHAR(TO_NUMBER(lv_mascara) + 1);
      END LOOP;
      --se guardan los cambios
      COMMIT;
      --
      pv_status := 'OK';
      pv_mensaje := 'Proceso realizado con exito!';
      --
  EXCEPTION
      WHEN Le_Exception THEN
          ROLLBACK;
          Lv_MensajeError := 'Subred no se encuentra subneteada para las mascaras inferiores';
          DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                                'INFRK_TRANSACCIONES.SUBNETEAR_SUBRED_HIJAS',
                                                Lv_MensajeError,
                                                NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                                SYSDATE,
                                                NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
          pv_status := 'ERROR';
          pv_mensaje := Lv_MensajeError;
      WHEN OTHERS THEN
          ROLLBACK;
          Lv_MensajeError := SQLCODE || ' -ERROR- ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
          DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+',
                                                'INFRK_TRANSACCIONES.SUBNETEAR_SUBRED_HIJAS',
                                                Lv_MensajeError,
                                                NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'),
                                                SYSDATE,
                                                NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
          pv_status := 'ERROR';
          pv_mensaje := 'Error al subnetear la red: ' || lv_subred;
  END SUBNETEAR_SUBRED_HIJAS;

  PROCEDURE P_NOTIFICA_FIN_SEGURIDAD_CPE
  AS
    Le_Exception          EXCEPTION;
    Lv_Error              VARCHAR2(4000);
    Lv_MensajeError       VARCHAR2(4000);
    lv_correos            VARCHAR2(1000);
    Lb_TieneDatos         BOOLEAN;
    Lv_NumerosDias        VARCHAR2(5);
    Lcl_Plantilla         CLOB;
    Lv_Remitente          VARCHAR2(50)   := 'notificaciones_telcos@telconet.ec';
    Lv_SufijoCorreoVendedor VARCHAR2(20) := '@telconet.ec';
    Lv_AsuntoVendedor     VARCHAR2(300)  := 'Notificaci¿n Autom¿tica por Fin de Licencia de Seguridad de usuario ';
    Lv_Fecha              DATE;
    Lv_Fecha2             DATE;
    Lr_GetAliasPlantillaCorreo      DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_PlantillaInicial             VARCHAR2(4000);
    Lv_Opcion             VARCHAR2(21)   := 'devicesLicensedExpire';
    Lv_Estado             VARCHAR2(6)    := 'Activo';
    Lv_Producto           VARCHAR2(4000);
    Lv_InfoIp             VARCHAR2(16);
    Lcl_Request           CLOB;
    Lcl_Respuesta         CLOB;
    Lcl_Json              CLOB;
    Lcl_IpEquipos         CLOB;
    Lb_ControlError       BOOLEAN;
    Le_MyException        EXCEPTION;
    Ln_ControlError       NUMBER := 0;

  CURSOR c_finalizacion_seguridad(Cv_Fecha DATE)IS
  SELECT datos.* FROM (
    select ap.DESCRIPCION_PRODUCTO Producto,ip.login,ispc.valor Fecha,
    iser.usr_creacion, iser.usr_vendedor,iser.ID_SERVICIO Servicio, ip.id_punto punto from 
    db_comercial.info_punto ip,
    db_comercial.admi_producto ap,
    db_comercial.info_servicio iser, 
    db_comercial.admi_caracteristica ac, 
    db_comercial.admi_producto_caracteristica apc,
    db_comercial.info_servicio_prod_caract ispc
    where ap.DESCRIPCION_PRODUCTO='SECURE CPE' and ap.estado='Activo'
    and iser.PRODUCTO_ID=ap.ID_PRODUCTO and iser.estado='Activo'
    and ac.DESCRIPCION_CARACTERISTICA='FECHA_EXPIRACION_SEGURIDAD_CPE' and ac.estado='Activo'
    and apc.producto_id=ap.id_producto and apc.caracteristica_id=ac.id_caracteristica
    and ispc.servicio_id=iser.id_servicio and ispc.producto_caracterisitica_id=apc.id_producto_caracterisitica
    and iser.punto_id=ip.id_punto
    and Cv_Fecha>TO_DATE(ispc.valor))datos where datos.fecha  is not null;

  Cursor c_dias_finalizacion IS
    Select apd.valor1 From Db_General.Admi_Parametro_Cab apc,
    Db_General.Admi_Parametro_Det apd
    where apc.nombre_parametro='DIAS_FIN_SEGURIDAD_CPE' and apc.estado='Activo' and
    apc.id_parametro=apd.parametro_id;

  CURSOR C_GetPlantilla(Cv_CodigoPlantilla DB_COMUNICACION.ADMI_PLANTILLA.CODIGO%TYPE)
    IS
      SELECT AP.PLANTILLA
      FROM DB_COMUNICACION.ADMI_PLANTILLA AP 
      WHERE AP.CODIGO = Cv_CodigoPlantilla
      AND AP.ESTADO <> 'Eliminado';

  CURSOR C_GetInfoIp(Cn_IdServicio DB_INFRAESTRUCTURA.INFO_IP.SERVICIO_ID%TYPE)
    IS
      SELECT IP
      FROM DB_INFRAESTRUCTURA.INFO_IP
      WHERE SERVICIO_ID = Cn_IdServicio;

  CURSOR C_GetInfoServicioTradicional(Cn_PuntoId DB_COMERCIAL.INFO_SERVICIO.PUNTO_ID%TYPE,
                                      Cv_Estado  DB_COMERCIAL.INFO_SERVICIO.ESTADO%TYPE)
    IS
      SELECT PROD.DESCRIPCION_PRODUCTO Producto, SER.ID_SERVICIO Servicio
      FROM DB_COMERCIAL.INFO_SERVICIO SER, DB_COMERCIAL.ADMI_PRODUCTO PROD
      WHERE SER.PUNTO_ID = Cn_PuntoId
      AND SER.ESTADO = Cv_Estado
      AND PROD.ID_PRODUCTO = SER.PRODUCTO_ID;

  CURSOR C_GetInfoParametro (Cv_Producto DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE)
    IS
      SELECT DET.VALOR3
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
           DB_GENERAL.ADMI_PARAMETRO_DET DET
      WHERE CAB.NOMBRE_PARAMETRO = 'PRODUCTO_RELACIONADO_SECURE_CPE'
      AND DET.PARAMETRO_ID = CAB.ID_PARAMETRO
      AND DET.VALOR1 = Cv_Producto
      AND DET.EMPRESA_COD = '10';

  /* Cursos para obtener los parametros del webservice */
    CURSOR C_PARAMETROS_WS(Cv_EmpresaId VARCHAR2, Cv_NombreParametro VARCHAR2) IS
      SELECT DET.VALOR1,
             DET.VALOR2,
             DET.VALOR3,
             DET.VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
        DB_GENERAL.ADMI_PARAMETRO_DET DET
      WHERE CAB.ID_PARAMETRO   =  DET.PARAMETRO_ID
      AND CAB.ESTADO           = 'Activo'
      AND DET.ESTADO           = 'Activo'
      AND CAB.MODULO           = 'TECNICO'
      AND DET.EMPRESA_COD      =  Cv_EmpresaId
      AND CAB.NOMBRE_PARAMETRO =  Cv_NombreParametro;

  Lc_ServiciosSeguridad  c_finalizacion_seguridad%ROWTYPE;
  Lc_ParametrosWs        C_PARAMETROS_WS%ROWTYPE;
  Lc_ParametrosCd        C_PARAMETROS_WS%ROWTYPE;
  BEGIN

  IF C_PARAMETROS_WS%ISOPEN THEN
      CLOSE C_PARAMETROS_WS;
  END IF;

  OPEN C_PARAMETROS_WS('10','PROCESO_ACTUALIZAR_EXPIRACION');
     FETCH C_PARAMETROS_WS 
        INTO Lc_ParametrosWs;
  CLOSE C_PARAMETROS_WS;

  OPEN C_PARAMETROS_WS('10','CERTIFICADO_DIGITAL_TELCOS');
     FETCH C_PARAMETROS_WS
        INTO Lc_ParametrosCd;
  CLOSE C_PARAMETROS_WS;

  IF c_dias_finalizacion%ISOPEN THEN
      CLOSE c_dias_finalizacion;
  END IF;
  OPEN c_dias_finalizacion;
    FETCH c_dias_finalizacion INTO Lv_NumerosDias;
  CLOSE c_dias_finalizacion;


  IF c_finalizacion_seguridad%ISOPEN THEN
      CLOSE c_finalizacion_seguridad;
  END IF;
    Lv_Fecha := SYSDATE + Lv_NumerosDias;

    APEX_JSON.INITIALIZE_CLOB_OUTPUT;
    APEX_JSON.OPEN_ARRAY('arrayIpEquipos');

    FOR Lc_ServicioSeguridad IN c_finalizacion_seguridad(Lv_Fecha)
    LOOP
        OPEN C_GetPlantilla('SEGURIDAD_CPE');
        FETCH C_GetPlantilla INTO Lcl_Plantilla;
        CLOSE C_GetPlantilla;

        If (Lcl_Plantilla is not null) Then

        Lcl_Plantilla                   := REPLACE(Lcl_Plantilla,'{{producto}}', Lc_ServicioSeguridad.producto);
        Lcl_Plantilla                   := REPLACE(Lcl_Plantilla,'{{login}}', Lc_ServicioSeguridad.LOGIN);
        Lcl_Plantilla                   := REPLACE(Lcl_Plantilla,'{{fecha}}', 
                                                           Lc_ServicioSeguridad.Fecha);

        Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('SEGURIDAD_CPE');
        Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
        IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
          Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
        ELSE 
          Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
        END IF;

        IF Lv_PlantillaInicial IS NULL THEN 
          Lv_Error := 'No se ha podido obtener la plantilla del correo enviado';
          RAISE Le_Exception;
        END IF;

        --Consulta que permite obtener servicio tradicional
        FOR Lc_ServicioTradicional IN C_GetInfoServicioTradicional(Lc_ServicioSeguridad.punto, Lv_Estado)
        LOOP

          OPEN C_GetInfoParametro(Lc_ServicioTradicional.Producto);
          FETCH C_GetInfoParametro INTO Lv_Producto;
          CLOSE C_GetInfoParametro;

          IF Lv_Producto is not null then
            OPEN C_GetInfoIp(Lc_ServicioTradicional.Servicio);
            FETCH C_GetInfoIp INTO Lv_InfoIp;
            CLOSE C_GetInfoIp;  

            IF Lv_InfoIp IS NOT NULL THEN
               DBMS_OUTPUT.PUT_LINE(Lv_InfoIp);
              APEX_JSON.WRITE(Lv_InfoIp);
            END IF;
          END IF;
          Lv_Producto := '';
        END LOOP;

        --Env¿o de correo al vendedor
        DB_GENERAL.GNRLPCK_UTIL.P_SEND_MAIL_SMTP(   Lv_Remitente, 
                                                        Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                                                        ',', 
                                                        Lv_AsuntoVendedor||' ' || Lc_ServicioSeguridad.LOGIN, 
                                                        NULL, 
                                                        NULL, 
                                                        SUBSTR(Lcl_Plantilla, 1, 32767), 
                                                        'text/html; charset=iso-8859-1');                                                


        IF Lv_MensajeError IS NOT NULL THEN 
          DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR( 'Telcos+', 'P_NOTIFICA_FIN_SEGURIDAD_CPE', 
                                                Lv_MensajeError, NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_COMERCIAL'), 
                                                SYSDATE, NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
          Lv_MensajeError := ''; 
        END IF;                                                   
        END IF;

      END LOOP;

      APEX_JSON.CLOSE_ARRAY();
      Lcl_Request := APEX_JSON.GET_CLOB_OUTPUT;
      APEX_JSON.FREE_OUTPUT;

      DBMS_OUTPUT.PUT_LINE(Lcl_Request);

       /* Se Arma el json que sera enviaro al ws */
      Lcl_Json := '{ "data":{"prefijoEmpresa":"prefijoWS","empresaId":"empresaWS",';
      Lcl_Json := Lcl_Json || Lcl_Request || ',';
      Lcl_Json := Lcl_Json ||'"opcion":"opcionWS"},';
      Lcl_Json := Lcl_Json ||'"op":"opWS"}';

      /* se reemplaza los valores respectivos */
      Lcl_Json := REPLACE(Lcl_Json,'prefijoWS'     ,'TN');
      Lcl_Json := REPLACE(Lcl_Json,'empresaWS'     ,'10');
      Lcl_Json := REPLACE(Lcl_Json,'opcionWS'      ,Lv_Opcion);
      Lcl_Json := REPLACE(Lcl_Json,'opWS'          ,Lc_ParametrosWs.VALOR2);

      DBMS_OUTPUT.PUT_LINE(Lcl_Json);

      Lb_ControlError := TRUE;

      WHILE Lb_ControlError LOOP
        DB_GENERAL.GNKG_WEB_SERVICE.P_WEB_SERVICE(Pv_Url             => Lc_ParametrosWs.VALOR1,
                                                  Pcl_Mensaje        => Lcl_Json,
                                                  Pv_Application     => Lc_ParametrosWs.VALOR3,
                                                  Pv_Charset         => Lc_ParametrosWs.VALOR4,
                                                  Pv_UrlFileDigital  => Lc_ParametrosCd.VALOR1,
                                                  Pv_PassFileDigital => Lc_ParametrosCd.VALOR2,
                                                  Pcl_Respuesta      => Lcl_Respuesta,
                                                  Pv_Error           => Lv_Error);

        IF Lv_Error IS NOT NULL THEN
          Ln_ControlError := Ln_ControlError + 1;
        ElSE
          Lb_ControlError := FALSE;
        END IF;

        IF Ln_ControlError = 4 THEN
          RAISE Le_MyException;
        END IF;
      END LOOP;

  EXCEPTION

    WHEN Le_Exception THEN

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                           'P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                            Lv_Error,
                                           'telcos_secure_cpe',
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'),'127.0.0.1'));

    WHEN Le_MyException THEN

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                           'P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                           Lv_Error || Lcl_Json,
                                           'telcos_secure_cpe',
                                           SYSDATE,
                                           NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'),'127.0.0.1'));                                        

    WHEN OTHERS THEN

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                           'P_NOTIFICA_FIN_SEGURIDAD_CPE',
                                            SQLCODE||' - ERROR_STACK:'||
                                              DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: '||
                                              DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
                                           'telcos_secure_cpe',
                                            SYSDATE,
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'),'127.0.0.1'));  
  END P_NOTIFICA_FIN_SEGURIDAD_CPE;

  PROCEDURE P_GET_SECURE_CPE(
    Pn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Pv_PrefijoEmpresa               IN  VARCHAR2,
    Pv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Pv_FechaCreacionDesde           IN  VARCHAR2,
    Pv_FechaCreacionHasta           IN  VARCHAR2,
    Pn_Start                        IN  NUMBER,
    Pn_Limit                        IN  NUMBER,
    Pn_TotalRegistros               OUT NUMBER,
    Pc_Documentos                   OUT SYS_REFCURSOR
  )
  IS

  BEGIN

    Pc_Documentos := DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.F_GET_SECURE_CPE(Pn_EmpresaId,
                                                                      Pv_PrefijoEmpresa,
                                                                      Pv_UsrSesion,
                                                                      NULL,
                                                                      Pv_FechaCreacionDesde,
                                                                      Pv_FechaCreacionHasta,
                                                                      Pn_Start,
                                                                      Pn_Limit,
                                                                      Pn_TotalRegistros
                                                                      );

    EXCEPTION
      WHEN OTHERS THEN
        --
        DB_FINANCIERO.FNCK_TRANSACTION.INSERT_ERROR('INFRK_TRANSACCIONES', 
                                                    'INFRK_TRANSACCIONES.P_GET_SECURE_CPE', 
                                                    SQLERRM
                                                   );
  END P_GET_SECURE_CPE;

  FUNCTION F_GET_SECURE_CPE(
    Fn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Fv_PrefijoEmpresa               IN  VARCHAR2,
    Fv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Fv_EmailUsrSesion               IN  VARCHAR2,
    Fv_FechaCreacionDesde           IN  VARCHAR2,
    Fv_FechaCreacionHasta           IN  VARCHAR2,
    Fn_Start                        IN  NUMBER,
    Fn_Limit                        IN  NUMBER,
    Fn_TotalRegistros               IN  NUMBER
  )
    RETURN SYS_REFCURSOR
  IS

    Lv_DescSerie             VARCHAR2(23)    := 'SERIE_EQUIPO_SECURE_CPE';
    Lv_DescFecha             VARCHAR2(30)    := 'FECHA_EXPIRACION_SEGURIDAD_CPE';
    Lv_DescCpe               VARCHAR2(9)     := 'CPE FORTI';
    Lv_DescPlan              VARCHAR2(19)    := 'SEC PLAN SECURE CPE';
    Ln_TotalReg              NUMBER          := 0;

  CURSOR C_GetProductoCaracteristica(Cv_Descripcion DB_COMERCIAL.ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA%TYPE)
    IS
      SELECT APC.ID_PRODUCTO_CARACTERISITICA
        FROM DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC
        ON APC.CARACTERISTICA_ID = AC.ID_CARACTERISTICA
        WHERE APC.ESTADO = 'Activo'
        AND AC.DESCRIPCION_CARACTERISTICA = Cv_Descripcion
        AND ROWNUM = 1;
  --

    Lv_Query           CLOB;
    --
    Lv_QueryCount      CLOB;
    --
    Lv_QueryAllColumns CLOB;
    --
    Lv_LimitAllColumns CLOB;
    --
    Lv_LimitCount      CLOB;

    Lc_SecureCpe  SYS_REFCURSOR;

    Ln_IdProdCaractSerie            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA%TYPE;
    Ln_IdProdCaractFecha            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA%TYPE;
    Ln_IdProdCaractCpe              DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA%TYPE;
    Ln_IdProdCaractPlan             DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA%TYPE;

  --
  BEGIN

    OPEN C_GetProductoCaracteristica(Lv_DescSerie);
    FETCH C_GetProductoCaracteristica INTO Ln_IdProdCaractSerie;
    CLOSE C_GetProductoCaracteristica;

    OPEN C_GetProductoCaracteristica(Lv_DescFecha);
    FETCH C_GetProductoCaracteristica INTO Ln_IdProdCaractFecha;
    CLOSE C_GetProductoCaracteristica;

    OPEN C_GetProductoCaracteristica(Lv_DescCpe);
    FETCH C_GetProductoCaracteristica INTO Ln_IdProdCaractCpe;
    CLOSE C_GetProductoCaracteristica;

    OPEN C_GetProductoCaracteristica(Lv_DescPlan);
    FETCH C_GetProductoCaracteristica INTO Ln_IdProdCaractPlan;
    CLOSE C_GetProductoCaracteristica;

    Lv_QueryCount      :='SELECT SER.ID_SERVICIO ';
    Lv_QueryAllColumns :='SELECT * FROM (SELECT ROWNUM ID_QUERY, 
                              PUN.LOGIN, 
                              PER.RAZON_SOCIAL, 
                              PRO.DESCRIPCION_PRODUCTO, 
                              CAR.VALOR SERIE, 
                              TO_CHAR(CAR.FE_CREACION,''dd/mm/yyyy hh24:mi:ss'') FE_CREACION, 
                              CARACT.VALOR FECHA,
                              CAT.VALOR CPE,
                              CRT.VALOR PLAN ';

      Lv_Query          := 'FROM DB_COMERCIAL.INFO_SERVICIO SER
                             LEFT JOIN DB_COMERCIAL.INFO_PUNTO PUN ON PUN.ID_PUNTO = SER.PUNTO_ID
                             LEFT JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL ROL ON PUN.PERSONA_EMPRESA_ROL_ID = ROL.ID_PERSONA_ROL
                             LEFT JOIN DB_COMERCIAL.INFO_PERSONA PER ON ROL.PERSONA_ID = PER.ID_PERSONA
                             LEFT JOIN DB_COMERCIAL.ADMI_PRODUCTO PRO ON PRO.ID_PRODUCTO = SER.PRODUCTO_ID
                             AND PRO.ESTADO = ''Activo''
                             LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAR ON CAR.SERVICIO_ID = SER.ID_SERVICIO
                             AND CAR.PRODUCTO_CARACTERISITICA_ID = '||Ln_IdProdCaractSerie||'
                             LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CARACT ON CARACT.SERVICIO_ID = SER.ID_SERVICIO
                             AND CARACT.PRODUCTO_CARACTERISITICA_ID = '||Ln_IdProdCaractFecha||'
                             LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAT ON CAT.SERVICIO_ID = SER.ID_SERVICIO
                             AND CAT.PRODUCTO_CARACTERISITICA_ID = '||Ln_IdProdCaractCpe||'
                             LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CRT ON CRT.SERVICIO_ID = SER.ID_SERVICIO
                             AND CRT.PRODUCTO_CARACTERISITICA_ID = '||Ln_IdProdCaractPlan||'
                             WHERE SER.PRODUCTO_ID = (SELECT ID_PRODUCTO FROM DB_COMERCIAL.ADMI_PRODUCTO WHERE 
                             DESCRIPCION_PRODUCTO = ''SECURE CPE'')
                             AND SER.ESTADO = ''Activo''';

      IF Fv_FechaCreacionDesde IS NOT NULL THEN    
        Lv_Query := Lv_Query || '  AND SER.FE_CREACION BETWEEN TO_DATE('''||Fv_FechaCreacionDesde||''',''DD/MM/YY'')
                                   AND TO_DATE('''||Fv_FechaCreacionHasta||''',''DD/MM/YY'')' ;
      END IF;

      IF Fn_Start   IS NOT NULL AND  Fn_Limit  IS NOT NULL THEN
        Lv_LimitAllColumns := ' ) TB WHERE TB.ID_QUERY >= ' || NVL(Fn_Start, 0) ||
        ' AND TB.ID_QUERY <= ' || (NVL(Fn_Start,0) + NVL(Fn_Limit,0)) || ' ORDER BY TB.ID_QUERY' ;
      ELSE
        Lv_LimitAllColumns := ' )  TB ORDER BY TB.ID_QUERY';
      END IF;     

  Lv_QueryAllColumns := Lv_QueryAllColumns || Lv_Query || Lv_LimitAllColumns;
  Lv_QueryCount      := Lv_QueryCount || Lv_Query;

  OPEN Lc_SecureCpe FOR Lv_QueryAllColumns;

  Ln_TotalReg := INFRK_TRANSACCIONES.F_GET_COUNT_REFCURSOR(Lv_QueryCount);
  --
  RETURN Lc_SecureCpe;
  --
  EXCEPTION
    WHEN OTHERS THEN
      --
      DB_FINANCIERO.FNCK_TRANSACTION.INSERT_ERROR(
                                                  'INFRK_TRANSACCIONES', 
                                                  'INFRK_TRANSACCIONES.F_GET_SECURE_CPE', 
                                                  SQLERRM
                                                 );

      RETURN NULL;
      --
  END F_GET_SECURE_CPE;

  FUNCTION F_GET_COUNT_REFCURSOR(
      Lcl_Consulta IN CLOB)
    RETURN NUMBER
  IS
    Lrf_Count    Lrf_Result;
    Lt_RefCursor Lt_Result;
  BEGIN
    --
    OPEN Lrf_Count FOR Lcl_Consulta;
    --
    FETCH
      Lrf_Count BULK COLLECT
    INTO
      Lt_RefCursor LIMIT 1000;
    --
    RETURN Lt_RefCursor.COUNT;
    --
  END F_GET_COUNT_REFCURSOR;

  PROCEDURE P_REPORTE_SECURE_CPE(
    Pn_EmpresaId                    IN  DB_FINANCIERO.INFO_PAGO_CAB.EMPRESA_ID%TYPE,
    Pv_PrefijoEmpresa               IN  VARCHAR2,
    Pv_UsrSesion                    IN  DB_COMERCIAL.INFO_PERSONA.LOGIN%TYPE,
    Pv_EmailUsrSesion               IN  VARCHAR2,
    Pv_FechaCreacionDesde           IN  VARCHAR2,
    Pv_FechaCreacionHasta           IN  VARCHAR2
  )
  IS

    Lv_Directorio                 VARCHAR2(50)   := 'DIR_REPGERENCIA';
    Lv_NombreArchivo              VARCHAR2(100)  := 'ReporteSecureCpe_'||Pv_PrefijoEmpresa||'_'||Pv_UsrSesion||'.csv';
    Lv_Delimitador                VARCHAR2(1)    := ';';
    Lv_Gzip                       VARCHAR2(100)  := 'gzip /backup/repgerencia/'||Lv_NombreArchivo;
    Lv_Remitente                  VARCHAR2(20)   := 'telcos@telconet.ec';
    Lv_Destinatario               VARCHAR2(100)  := NVL(Pv_EmailUsrSesion,'notificaciones_telcos@telconet.ec')||',';
    Lv_Asunto                     VARCHAR2(300)  := 'Notificacion REPORTE PRODUCTO SECURE CPE ';
    Lv_Cuerpo                     VARCHAR2(9999) := '';
    Ln_Total                      NUMBER         := 0;
    Lv_NombreArchivoZip           VARCHAR2(250)  := Lv_NombreArchivo||'.gz';
    Lc_GetPagosVendedor           SYS_REFCURSOR;
    Lr_Datos                      DB_INFRAESTRUCTURA.INKG_TYPES.Lr_RptSecureCpe;
    Lt_TPuntosCorteMasivo         DB_INFRAESTRUCTURA.INKG_TYPES.Lt_RptSecureCpe;
    Ln_IndxPuntosCorteMasivo      NUMBER;
    Lc_GetAliasPlantilla          DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lfile_Archivo                 UTL_FILE.FILE_TYPE;

  BEGIN

    Lc_GetAliasPlantilla := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('RPT_SECURE');
    Lv_Cuerpo            := Lc_GetAliasPlantilla.PLANTILLA;
    Lfile_Archivo        := UTL_FILE.FOPEN(Lv_Directorio,Lv_NombreArchivo,'w',3000); 

    Lc_GetPagosVendedor  := DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.F_GET_SECURE_CPE(Pn_EmpresaId,
                                                                      Pv_PrefijoEmpresa,
                                                                      Pv_UsrSesion,
                                                                      Pv_EmailUsrSesion,
                                                                      Pv_FechaCreacionDesde,
                                                                      Pv_FechaCreacionHasta,
                                                                      NULL,
                                                                      NULL,
                                                                      Ln_Total
                                                                      );

   -- CABECERA DEL REPORTE
   utl_file.put_line(Lfile_Archivo,'USUARIO QUE GENERA: '||Pv_UsrSesion||Lv_Delimitador  
           ||' '||Lv_Delimitador 
           ||'FECHA DE GENERACION:  '||TO_CHAR(SYSDATE, 'DD-MM-YYYY, HH24:MI:SS')||Lv_Delimitador 
           ||' '||Lv_Delimitador 
           ||' '||Lv_Delimitador 
           ||' '||Lv_Delimitador
           ||' '||Lv_Delimitador
           ||' '||Lv_Delimitador 
            );

   utl_file.put_line(Lfile_Archivo,'DESDE: '||Pv_FechaCreacionDesde||Lv_Delimitador  
           ||' '||Lv_Delimitador 
           ||'HASTA: '||Pv_FechaCreacionHasta||Lv_Delimitador 
           ||' '||Lv_Delimitador 
           ||' '||Lv_Delimitador 
           ||' '||Lv_Delimitador 
           ||' '||Lv_Delimitador
           ||' '||Lv_Delimitador
            );

    utl_file.put_line(Lfile_Archivo,'LOGIN'||Lv_Delimitador  
           ||'RAZON SOCIAL'||Lv_Delimitador 
           ||'PRODUCTO'||Lv_Delimitador 
           ||'SERIE EQUIPO CPE'||Lv_Delimitador 
           ||'FECHA ACTIVACION'||Lv_Delimitador 
           ||'FECHA CADUCIDAD'||Lv_Delimitador 
           ||'EQUIPO CPE'||Lv_Delimitador 
           ||'PLAN SECURE CPE'||Lv_Delimitador
           );  

      LOOP
      FETCH Lc_GetPagosVendedor BULK COLLECT INTO Lt_TPuntosCorteMasivo LIMIT 1000; 

       Ln_IndxPuntosCorteMasivo        := Lt_TPuntosCorteMasivo.FIRST;
       WHILE (Ln_IndxPuntosCorteMasivo IS NOT NULL)
       LOOP

          Lr_Datos := Lt_TPuntosCorteMasivo(Ln_IndxPuntosCorteMasivo);

          UTL_FILE.PUT_LINE(Lfile_Archivo,NVL(Lr_Datos.login, '')||Lv_Delimitador  
             ||NVL(Lr_Datos.razon_social, '')||Lv_Delimitador 
             ||NVL(Lr_Datos.descripcion_producto,'')||Lv_Delimitador 
             ||NVL(Lr_Datos.serie, '')||Lv_Delimitador 
             ||NVL(Lr_Datos.fe_creacion, '')||Lv_Delimitador 
             ||NVL(Lr_Datos.fecha, '')||Lv_Delimitador
             ||NVL(Lr_Datos.cpe, '')||Lv_Delimitador
             ||NVL(Lr_Datos.plan, '')||Lv_Delimitador 
             );

          Ln_IndxPuntosCorteMasivo := Lt_TPuntosCorteMasivo.NEXT(Ln_IndxPuntosCorteMasivo);
       END LOOP; 

      EXIT
       WHEN Lc_GetPagosVendedor%NOTFOUND;
      END LOOP; 

    UTL_FILE.fclose(Lfile_Archivo);
    DBMS_OUTPUT.PUT_LINE( NAF47_TNET.JAVARUNCOMMAND (Lv_Gzip) ) ;  
    DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, 
                                              Lv_Destinatario,
                                              Lv_Asunto, 
                                              Lv_Cuerpo, 
                                              Lv_Directorio,
                                              Lv_NombreArchivoZip);
    UTL_FILE.FREMOVE (Lv_Directorio,Lv_NombreArchivoZip); 

    EXCEPTION
      WHEN OTHERS THEN
        --
        DB_FINANCIERO.FNCK_TRANSACTION.INSERT_ERROR(
                                                    'INFRK_TRANSACCIONES', 
                                                    'INFRK_TRANSACCIONES.P_REPORTE_SECURE_CPE', 
                                                     SQLERRM
                                                   );
  END P_REPORTE_SECURE_CPE;

  PROCEDURE P_UPLOAD_CSV_RUTAS(
    Pn_IdArchivoCsvPsm      IN NUMBER,
    Pv_NombreArchivoPsm     IN VARCHAR2,
    Pv_ExtensionArchivoPsm  IN VARCHAR2,
    Pv_UsrCreacion          IN VARCHAR2,
    Pv_Status               OUT VARCHAR2,
    Pv_Mensaje              OUT VARCHAR2)
  AS
    Lv_NombreParametroDirCsv        VARCHAR2(100) := 'DIRECTORIO_PSM_MD';
    Lv_CodEmpresa                   VARCHAR2(2) := '18';
    Lv_NombreParamDirBdArchivosTmp  VARCHAR2(33) := 'DIRECTORIO_BD_ARCHIVOS_TEMPORALES';
    Lv_NombreParamMapeoUrlHttps     VARCHAR2(24) := 'MAPEO_URLS_HTTPS_A_HTTP';
    Lv_Valor1UrlMsGuardarArchivos   VARCHAR2(24) := 'URL_MS_GUARDAR_ARCHIVOS';
    Lv_ContenidoPrimeraLinea        VARCHAR2(4000);
    Lv_ContenidoCabArchivoCorreo    VARCHAR2(4000);
    Lv_Delimitador                  VARCHAR2(1) := ',';
    Lv_Directorio                   VARCHAR2(50);
    Lv_RutaDirectorio               VARCHAR2(300);
    Lf_VerifPrimerLineaArchivo      UTL_FILE.FILE_TYPE;
    Lf_Archivo                      UTL_FILE.FILE_TYPE;
    Lv_ContenidoLinea               VARCHAR2(4000);
    Lv_StatusLineaCsv               VARCHAR2(5);
    Lr_RegDataPorProcesarLineaCsv   DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarRutas;
    Ln_IndxRegsDataPorProcesarPsm   NUMBER;
    Lt_TRegsDataPorProcesarPsm      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_DataPorProcesarRutas;
    Lt_TCamposPrimeraLineaCsv       DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Ln_CantidadColumnas             NUMBER;
    Ln_CantidadColumnasDetalle      NUMBER;
    Lv_NombreCompletoArchivo        VARCHAR2(500);
    Lv_NombreArchivoCorreo          VARCHAR2(500);
    Lv_NombreArchivoCorreoZip       VARCHAR2(500);
    Lf_ArchivoProcesoPsm            UTL_FILE.FILE_TYPE;
    Lf_ArchivoProcesoMasivoPsm      UTL_FILE.FILE_TYPE;
    Lr_RegDataPorProcesarPsm        DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarRutas;
    Lv_Mensaje                      VARCHAR2(4000);
    Le_Exception                    EXCEPTION;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_TipoLugar                    VARCHAR2(10) := 'TIPO LUGAR';
    Ln_Rownum                       NUMBER := 1;
    Lr_InfoElemento                 DB_INFRAESTRUCTURA.INFO_ELEMENTO%ROWTYPE;
    Lr_InfoEmpresaElemento          DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO%ROWTYPE;
    Lr_InfoDetalleElemento          DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO%ROWTYPE;
    Lr_InfoTramo                    DB_INFRAESTRUCTURA.INFO_TRAMO%ROWTYPE;
    Lr_InfoDetalleTramo             DB_INFRAESTRUCTURA.INFO_DETALLE_TRAMO%ROWTYPE;
    Lt_ElementosOk                  DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Lt_ElementosRepetidos           DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayKeyValue;
    Ln_IdElementoRuta               DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE := 0;
    Ln_IdTipoElemento               DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO%TYPE := 0; 
    Ln_IdModeloElemento             DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO%TYPE;
    Ln_IdElementoInicio             DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE; 
    Ln_IdElementoFin                DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdElementoContenido          DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdElementoTramo              DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdClaseTipoMedio             DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.ID_CLASE_TIPO_MEDIO%TYPE;
    Ln_IdTipoMedio                  DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.TIPO_MEDIO_ID%TYPE;
    Ln_IdDetalleElemento            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE;
    Ln_IdTramo                      DB_INFRAESTRUCTURA.INFO_TRAMO.ID_TRAMO%TYPE;
    Ln_IdDetalleTramo               DB_INFRAESTRUCTURA.INFO_DETALLE_TRAMO.ID_DETALLE_TRAMO%TYPE;
    Lr_InfoHistorialElemento        DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO%ROWTYPE;
    Lv_SecuenciaElemento            INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Lv_SecuenciaTramo               INFO_TRAMO.ID_TRAMO%TYPE;
    Lv_TipoErrorLineaCsv            VARCHAR2(100);
    Lv_Gzip                         VARCHAR2(500);
    Lv_DirectorioBaseDatos          VARCHAR2(100);
    Lv_RutaDirectorioBaseDatos      VARCHAR2(500);
    Lv_IpCreacion                   VARCHAR2(15);
    Lv_NombreArchivoCsvPsm          VARCHAR2(1500);
    TYPE type_array IS TABLE OF VARCHAR2(4000);
    Lt_ArrayElementos type_array; 
    Lt_ArrayContenido               DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lt_ArrayIntermedios             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    LBL_CSV CLOB;
    Luh_http_request   UTL_HTTP.req;
    Luh_http_response  UTL_HTTP.resp;
    LRW_raw RAW(32767);
    Ln_ContadorContenido            NUMBER;
    Ln_ContadorContenidoLast        NUMBER;
    Ln_ContadorInterFirst           NUMBER;
    Ln_ContadorInterLast            NUMBER;
    Lv_TipoElementoA                VARCHAR2(100);
    Lv_TipoElementoB                VARCHAR2(100);
    Lv_NombreTipoElemento           DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Lv_DetalleErrorElemento         CLOB;

    CURSOR Lc_GetValoresParamsGeneral(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1, DET.VALOR2
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;
      
    CURSOR Lc_GetValoresParamsXValor1(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE,
                                      Cv_Valor1          DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE)
    IS
      SELECT DET.VALOR2, DET.VALOR3
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.VALOR1 = Cv_Valor1
      AND DET.ESTADO = Lv_EstadoActivo;
      
    CURSOR Lc_GetTildesParamsGeneral
    IS
      SELECT DET.VALOR1, DET.VALOR2
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = 'FORMATOS_TILDES_BD'
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo;  

    CURSOR Lc_GetDataArchivoCsvPsm(Cn_IdDocumentoCpm NUMBER)
    IS
      SELECT UBICACION_LOGICA_DOCUMENTO, UBICACION_FISICA_DOCUMENTO
      FROM DB_COMUNICACION.INFO_DOCUMENTO
      WHERE ID_DOCUMENTO = Cn_IdDocumentoCpm;

    CURSOR Lc_GetNombreRuta(Cv_NombreRuta DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT NOMBRE_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE NOMBRE_ELEMENTO = Cv_NombreRuta
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetDataDirectoriosCsv(Cv_NombreParametro DB_GENERAL.ADMI_PARAMETRO_CAB.NOMBRE_PARAMETRO%TYPE)
    IS
      SELECT DET.VALOR1 AS NOMBRE_DIR_BD, DET.VALOR2 AS RUTA_DIR_BD
      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
      ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
      WHERE CAB.NOMBRE_PARAMETRO = Cv_NombreParametro
      AND CAB.ESTADO = Lv_EstadoActivo
      AND DET.ESTADO = Lv_EstadoActivo
      AND DET.EMPRESA_COD = Lv_CodEmpresa;

    CURSOR Lc_GetIdTipoElemento(Cv_NombreTipoElemento DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE)
    IS
      SELECT ID_TIPO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO
      WHERE NOMBRE_TIPO_ELEMENTO = Cv_NombreTipoElemento
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdInfoElemento(Cv_NombreElemento DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT ID_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE NOMBRE_ELEMENTO = Cv_NombreElemento
      AND ESTADO = Lv_EstadoActivo;  

    CURSOR Lc_GetIdModeloElemento(Cv_NombreModeloElemento DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
                                  Cv_IdTipoElemento DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.TIPO_ELEMENTO_ID%TYPE)
    IS
      SELECT ID_MODELO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO
      WHERE NOMBRE_MODELO_ELEMENTO = Cv_NombreModeloElemento
      AND TIPO_ELEMENTO_ID = Cv_IdTipoElemento
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdClaseTipoMedio(Cv_NombreClaseTipoMedio DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE)
    IS
      SELECT ID_CLASE_TIPO_MEDIO, TIPO_MEDIO_ID
      FROM DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO
      WHERE NOMBRE_CLASE_TIPO_MEDIO = Cv_NombreClaseTipoMedio
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetNombreElemento(Cv_IdElemento DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE)
    IS
      SELECT NOMBRE_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE ID_ELEMENTO = Cv_IdElemento
      AND ESTADO = Lv_EstadoActivo;

    CURSOR Lc_GetIdInfoDetalleElemento(Cv_IdElemento DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ELEMENTO_ID%TYPE)
    IS
      SELECT DETALLE_VALOR
      FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
      WHERE ELEMENTO_ID = Cv_IdElemento
      AND ESTADO = Lv_EstadoActivo
      AND DETALLE_NOMBRE = Lv_TipoLugar;  

    CURSOR C_SecuenciaElemento
    IS
      SELECT seq_info_elemento.NEXTVAL FROM dual;

    CURSOR C_SecuenciaTramo
    IS
      SELECT seq_info_tramo.NEXTVAL FROM dual;  

    CURSOR Lc_GetExtractCadena(Cv_ExtractCadena CLOB)
    IS
      SELECT REGEXP_SUBSTR(str, '[^*]+', 1, LEVEL) CONTENIDO
        FROM (SELECT Cv_ExtractCadena str FROM dual)
        CONNECT BY LEVEL <= LENGTH(str) - LENGTH(REPLACE(str,'*'));

    CURSOR Lc_GetExtractCadenaElementos(Cv_ExtractElementos CLOB)
    IS
      SELECT REGEXP_SUBSTR(Cv_ExtractElementos,'([^@]+?)(@|?$)', 1, 1, '',1) AS ELEMENTO ,
             REGEXP_SUBSTR(Cv_ExtractElementos,'([^@]+?)(@|?$)', 1, 2, '',1) AS FIBRA
      FROM dual;

    CURSOR Lc_GetTipoElemento(Cv_ElementoNombre DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT TIP.NOMBRE_TIPO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD
      ON MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
      AND MOD.ESTADO = Lv_EstadoActivo
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
      ON TIP.ID_TIPO_ELEMENTO = MOD.TIPO_ELEMENTO_ID
      AND TIP.ESTADO = Lv_EstadoActivo
      WHERE ELE.NOMBRE_ELEMENTO = Cv_ElementoNombre
      AND ELE.ESTADO = Lv_EstadoActivo
      AND ROWNUM = 1; 

    CURSOR C_GetTempRutaCab
    IS
      SELECT ID_RUTA_CAB,NOMBRE_RUTA,DESCRIPCION,TIPO_RUTA,TIPO_INFRAESTRUCTURA,
      PROCESO,ELEMENTO_INICIO,ELEMENTO_FIN,TIPO_FIBRA
      FROM DB_INFRAESTRUCTURA.TEMP_RUTA_CAB;

    Ln_NumRegistrosTotal            NUMBER := 0;
    Ln_NumRegistrosOk               NUMBER := 0;
    Ln_NumValidaRuta                NUMBER := 0;
    Ln_NumValidaTipoRuta            NUMBER := 0;
    Ln_NumValidaTipoInfra           NUMBER := 0;
    Ln_NumValidaElementoInicio      NUMBER := 0;
    Ln_NumValidaElementoFin         NUMBER := 0;
    Ln_NumValidaParametros          NUMBER := 0;
    Ln_NumValidaTipoEleInfra        NUMBER := 0;
    Ln_NumValidaInicioInfra         NUMBER := 0;
    Ln_NumValidaFinInfra            NUMBER := 0;
    Ln_NumValidaElementoInter       NUMBER := 0;
    Ln_NumValidaTramoExistente      NUMBER := 0;
    Ln_NumValidaFibra               NUMBER := 0;
    Ln_NumValidaModeloElemento      NUMBER := 0;
    Ln_NumValidaTipoElemento        NUMBER := 0;
    Ln_NumValidaParroquia           NUMBER := 0;    
    Ln_NumValidaCanton              NUMBER := 0;
    Ln_NumValidaJurisdiccion        NUMBER := 0;
    Ln_NumValidaDataCsv             NUMBER := 0;
    Ln_NumDesconocido               NUMBER := 0;
    Ln_NumMas1Registro              NUMBER := 0;
    Lv_Asunto                       VARCHAR2(200) := 'Notificación de proceso de subidas masivas';
    Lv_Remitente                    VARCHAR2(50)  := 'notificaciones_telcos@telconet.ec';
    Lv_PlantillaInicial             VARCHAR2(4000);
    Lv_PlantillaCorreo              VARCHAR2(32767);
    Lr_GetAliasPlantillaCorreo      DB_FINANCIERO.FNKG_TYPES.Lr_AliasPlantilla;
    Lv_ContenidoCorreo              VARCHAR2(4000);
    Lv_Observacion                  VARCHAR2(2000);
    Lv_ContenidoElemento            VARCHAR2(4000);
    Lv_ContenidoFibra               VARCHAR2(4000);
    Ln_Contador                     NUMBER := 0;
    Ln_ContadorIntermedio           NUMBER := 0;
    Ln_Compara                      NUMBER := 0;
    Ln_GuardaRegistro               NUMBER := 0;
    Lr_RegGetDataArchivoCsvPsm      Lc_GetDataArchivoCsvPsm%ROWTYPE;
    Lt_ArraySplitNombreArchivo      DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_NombreArchivoPsm             VARCHAR2(500);
    Lr_RegGetValoresParamsGeneral   Lc_GetValoresParamsGeneral%ROWTYPE;
    Lv_UrlNfsArchivoCsvPsm          VARCHAR2(1500);
    Lv_UrlNfsHttpArchivoCsvPsm      VARCHAR2(1500);
    Ln_IdEmpresaElemento            DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO.ID_EMPRESA_ELEMENTO%TYPE := 0;
    Lv_TipoTramo                    VARCHAR2(10);
    Lv_ElementoA                    VARCHAR2(100);
    Lv_ElementoB                    VARCHAR2(100);
    Lv_NombreElementoA              VARCHAR2(100);
    Lv_NombreElementoB              VARCHAR2(100);
    Lv_ClaseTipoMedio               VARCHAR2(100);
    Lv_NombreContenido              VARCHAR2(4000);
    Lv_TipoLugarElemento            VARCHAR2(100);
    Lt_TCamposXLineaCsv             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Ln_IndxTCamposXLineaCsv         NUMBER;
    Lv_NombreElementoCsv            DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_Numero                       NUMBER;
    Lv_EsCabecera                   VARCHAR2(2) := 'NO';
    Lv_DescripcionElementoCsv       DB_INFRAESTRUCTURA.INFO_ELEMENTO.DESCRIPCION_ELEMENTO%TYPE;
    Lv_NombreTipoElementoCsv        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Lv_NombreModeloElementoCsv      DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE;
    Lv_ObservacionCsv               VARCHAR2(4000);
    Lv_ElementoInicioCsv            DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_ElementoFinCsv               DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_NombreTipoMedioCsv           DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE;
    Ln_IdTempCab                    NUMBER;
    Ln_IdTempDet                    NUMBER;
    Lv_ContenidoElementoDet         VARCHAR2(4000);
    Lv_ContenidoFibraDet            VARCHAR2(4000);
    Lv_TipoElementoDet              VARCHAR2(4000);
    Lv_NombreElementoDet            VARCHAR2(4000);
    Lv_DescripcionDet               VARCHAR2(4000);
    Lv_ModeloElementoDet            VARCHAR2(4000);
    Lv_JurisdiccionDet              VARCHAR2(4000);
    Lv_CantonDet                    VARCHAR2(4000);
    Lv_ParroquiaDet                 VARCHAR2(4000);
    Lv_DireccionDet                 VARCHAR2(4000);
    Lv_AlturaDet                    VARCHAR2(4000);
    Lv_LatitudDet                   VARCHAR2(4000);
    Lv_LongitudDet                  VARCHAR2(4000);
    Lv_UbicadoDet                   VARCHAR2(4000);
    Lv_NivelDet                     VARCHAR2(4000);
    Lv_TipoLugarDet                 VARCHAR2(4000);
    Lv_FactibilidadDet              VARCHAR2(4000);
    Lr_RegGetValoresParamsXValor1   Lc_GetValoresParamsXValor1%ROWTYPE;
    Lv_FormatoUrlArchivoHttps       VARCHAR2(300);
    Lv_FormatoUrlArchivoHttp        VARCHAR2(300);

  BEGIN
    Lv_IpCreacion  := '127.0.0.1';

    -- Eliminacion de tablas temporales
    DELETE
    FROM DB_INFRAESTRUCTURA.TEMP_RUTA_DET;
    DELETE
    FROM DB_INFRAESTRUCTURA.TEMP_RUTA_CAB;
    COMMIT;

    Lr_GetAliasPlantillaCorreo  := DB_FINANCIERO.FNCK_CONSULTS.F_GET_ALIAS_PLANTILLA('RMSUBIDA');
    Lv_PlantillaInicial         := Lr_GetAliasPlantillaCorreo.PLANTILLA;
    IF Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS IS NOT NULL THEN
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := REPLACE(Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, ';', ',') || ',';
    ELSE 
      Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS := Lv_Remitente || ',';
    END IF;

    IF Lv_PlantillaInicial IS NULL THEN 
      Lv_Mensaje := 'No se ha podido obtener la plantilla del correo enviado al procesar un archivo csv';
      RAISE Le_Exception;
    END IF;

    OPEN Lc_GetDataArchivoCsvPsm(Pn_IdArchivoCsvPsm);
    FETCH Lc_GetDataArchivoCsvPsm INTO Lr_RegGetDataArchivoCsvPsm;
    CLOSE Lc_GetDataArchivoCsvPsm;
    Lv_UrlNfsArchivoCsvPsm  := Lr_RegGetDataArchivoCsvPsm.UBICACION_FISICA_DOCUMENTO;
    Lv_NombreArchivoCsvPsm  := Lr_RegGetDataArchivoCsvPsm.UBICACION_LOGICA_DOCUMENTO;

    IF Lv_NombreArchivoCsvPsm IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el nombre del archivo CSV de ingreso de rutas masivas';
      RAISE Le_Exception;
    END IF;
    
    OPEN Lc_GetValoresParamsXValor1(Lv_NombreParamMapeoUrlHttps, Lv_Valor1UrlMsGuardarArchivos);
    FETCH Lc_GetValoresParamsXValor1 INTO Lr_RegGetValoresParamsXValor1;
    CLOSE Lc_GetValoresParamsXValor1;
    Lv_FormatoUrlArchivoHttps   := Lr_RegGetValoresParamsXValor1.VALOR2;
    Lv_FormatoUrlArchivoHttp    := Lr_RegGetValoresParamsXValor1.VALOR3;
    IF Lv_FormatoUrlArchivoHttps IS NULL OR Lv_FormatoUrlArchivoHttp IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el mapeo para la url del archivo';
      RAISE Le_Exception;
    END IF;
    
    Lv_UrlNfsHttpArchivoCsvPsm := REPLACE(Lv_UrlNfsArchivoCsvPsm, Lv_FormatoUrlArchivoHttps, Lv_FormatoUrlArchivoHttp);

    Lt_ArraySplitNombreArchivo  := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_NombreArchivoCsvPsm, '.');

    IF Lt_ArraySplitNombreArchivo.COUNT <> 2 THEN
      Lv_Mensaje := 'El nombre del archivo CSV de cambio ingreso de rutas no tiene el formato correcto';
      RAISE Le_Exception;
    END IF;
    Lv_NombreArchivoPsm := Lt_ArraySplitNombreArchivo(0);

    OPEN Lc_GetValoresParamsGeneral(Lv_NombreParamDirBdArchivosTmp);
    FETCH Lc_GetValoresParamsGeneral INTO Lr_RegGetValoresParamsGeneral;
    CLOSE Lc_GetValoresParamsGeneral;

    Lv_DirectorioBaseDatos      := Lr_RegGetValoresParamsGeneral.VALOR1;
    IF Lv_DirectorioBaseDatos IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener el directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;
    Lv_RutaDirectorioBaseDatos  := Lr_RegGetValoresParamsGeneral.VALOR2;
    IF Lv_RutaDirectorioBaseDatos IS NULL THEN
      Lv_Mensaje := 'No se ha podido obtener la rura del directorio para guardar los archivos csv';
      RAISE Le_Exception;
    END IF;

    Lv_NombreArchivoCorreo  := Lv_NombreArchivoPsm || '_RegistrosProcesoCreacionRutas.csv';
    Lf_ArchivoProcesoPsm    := UTL_FILE.FOPEN(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreo, 'w', 4000);

    -- Initialize the CLOB.
    DBMS_LOB.createtemporary(LBL_CSV, FALSE);

    -- Make a HTTP request and get the response.
    Luh_http_request  := UTL_HTTP.begin_request(Lv_UrlNfsHttpArchivoCsvPsm);
    Luh_http_response := UTL_HTTP.get_response(Luh_http_request);

    -- Copy the response into the CLOB.
    BEGIN
      LOOP
        UTL_HTTP.read_line(Luh_http_response, LBL_CSV);
        Lv_ContenidoLinea             := '';
        Lv_StatusLineaCsv             := '';
        Lv_TipoErrorLineaCsv          := '';
        Lr_RegDataPorProcesarLineaCsv := NULL;
        Lv_ContenidoLinea             := REPLACE(REPLACE(LBL_CSV, CHR(10), ''), CHR(13), '');
        Ln_NumRegistrosTotal          := Ln_NumRegistrosTotal + 1;

        IF Ln_NumRegistrosTotal = 1 THEN
          IF Lv_ContenidoLinea IS NOT NULL THEN
            Lt_TCamposPrimeraLineaCsv := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(Lv_ContenidoLinea, Lv_Delimitador);
            Ln_CantidadColumnas := Lt_TCamposPrimeraLineaCsv.COUNT;

            IF Ln_CantidadColumnas = 16 OR Ln_CantidadColumnas = 9 THEN
              Lv_ContenidoCabArchivoCorreo := 'Ruta' || Lv_Delimitador || 
                                              'Tipo de Ruta' || Lv_Delimitador || 
                                              'Tipo de Infraestructura' || Lv_Delimitador ||
                                              'Estado' || Lv_Delimitador ||
                                              'Observacion';
            ELSE
              Lv_Mensaje := 'El archivo tiene un número de columnas no permitidas. Sólo se permiten 16 o 9 columnas';
              RAISE Le_Exception;
            END IF;
          ELSE
            Lv_Mensaje := 'El archivo no tiene data para procesar';
            RAISE Le_Exception;
          END IF;
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lv_ContenidoCabArchivoCorreo);
        END IF;

        --GRABAR EN LAS TABLAS TEMPORALES DE CABECERA Y DETALLE
        Lt_TCamposXLineaCsv       := DB_COMERCIAL.TECNK_SERVICIOS.F_SPLIT_VARCHAR2(LBL_CSV, Lv_Delimitador);
        Ln_IndxTCamposXLineaCsv   := 0;
        Lv_NombreElementoCsv      := '';
        Lv_ContenidoElementoDet   := '';
        Lv_EsCabecera             := 'NO';

        IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
            Lv_Numero              := LENGTH(TRIM(TRANSLATE(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv), ' +-.0123456789', ' ')));
        END IF;

        IF Lv_Numero IS NULL THEN
            Lv_EsCabecera             := 'SI';
        END IF;

        IF Lv_EsCabecera = 'SI' THEN
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;

            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_NombreElementoCsv      := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_NombreElementoCsv   := REPLACE(Lv_NombreElementoCsv,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_DescripcionElementoCsv := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_DescripcionElementoCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_DescripcionElementoCsv   := REPLACE(Lv_DescripcionElementoCsv,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_NombreTipoElementoCsv  := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_NombreTipoElementoCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv    := Ln_IndxTCamposXLineaCsv + 1;
            Lv_NombreModeloElementoCsv := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_NombreModeloElementoCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ObservacionCsv         := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ObservacionCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ElementoInicioCsv      := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ElementoInicioCsv := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_ElementoInicioCsv   := REPLACE(Lv_ElementoInicioCsv,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ElementoFinCsv         := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ElementoFinCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_ElementoFinCsv   := REPLACE(Lv_ElementoFinCsv,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_NombreTipoMedioCsv     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_NombreTipoMedioCsv   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            --INSERTAR LOS REGISTROS EN LA TABLA TEMP_RUTA_CAB Ln_IdTempCab
            --obtengo la secuencia
            Ln_IdTempCab := DB_INFRAESTRUCTURA.SEQ_TEMP_RUTA_CAB.NEXTVAL; 
            --Insertando los ids en tabla temporal para realacionar cuales son las subredes padre
            INSERT INTO DB_INFRAESTRUCTURA.TEMP_RUTA_CAB 
            VALUES(Ln_IdTempCab,Lv_NombreElementoCsv,Lv_DescripcionElementoCsv,Lv_NombreTipoElementoCsv,Lv_NombreModeloElementoCsv
                   ,Lv_ObservacionCsv,Lv_ElementoInicioCsv,Lv_ElementoFinCsv,Lv_NombreTipoMedioCsv);
        ELSE
            Ln_CantidadColumnasDetalle := Lt_TCamposXLineaCsv.COUNT;
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ContenidoElementoDet    := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_ContenidoElementoDet   := REPLACE(Lv_ContenidoElementoDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ContenidoFibraDet := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ContenidoFibraDet := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_TipoElementoDet  := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_TipoElementoDet := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_DescripcionDet         := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_DescripcionDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_DescripcionDet   := REPLACE(Lv_DescripcionDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ModeloElementoDet      := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_ModeloElementoDet := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_JurisdiccionDet        := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_JurisdiccionDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_JurisdiccionDet   := REPLACE(Lv_JurisdiccionDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_CantonDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_CantonDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_CantonDet   := REPLACE(Lv_CantonDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_ParroquiaDet     := '';

            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
                Lv_ParroquiaDet     := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
                FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
                LOOP
                    Lv_ParroquiaDet   := REPLACE(Lv_ParroquiaDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
                END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_DireccionDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_DireccionDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              FOR Lc_ParametrosDet IN Lc_GetTildesParamsGeneral
              LOOP
                Lv_DireccionDet   := REPLACE(Lv_DireccionDet,Lc_ParametrosDet.VALOR1,Lc_ParametrosDet.VALOR2);
              END LOOP;
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_AlturaDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_AlturaDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;

            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_LatitudDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_LatitudDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;

            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_LongitudDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_LongitudDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_UbicadoDet     := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_UbicadoDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
            END IF;
            Ln_IndxTCamposXLineaCsv   := Ln_IndxTCamposXLineaCsv + 1;
            Lv_NivelDet         := '';
            Lv_FactibilidadDet  := '';
            IF Lt_TCamposXLineaCsv.EXISTS(Ln_IndxTCamposXLineaCsv) THEN
              Lv_NivelDet   := TRIM(Lt_TCamposXLineaCsv(Ln_IndxTCamposXLineaCsv));
              IF Lv_NivelDet <> 'N' THEN
                Lv_NivelDet := '2';
                Lv_FactibilidadDet := 'S';
              ELSE
                Lv_NivelDet := '';
                Lv_FactibilidadDet := 'N';
              END IF;
            END IF;

            --INSERTAR LOS REGISTROS EN LA TABLA TEMP_RUTA_CAB Ln_IdTempCab
            --obtengo la secuencia
            Ln_IdTempDet   := DB_INFRAESTRUCTURA.SEQ_TEMP_RUTA_DET.NEXTVAL; 

            --Insertando los ids en tabla temporal para realacionar cuales son las rutas padre
            INSERT INTO DB_INFRAESTRUCTURA.TEMP_RUTA_DET 
            VALUES(Ln_IdTempDet,Ln_IdTempCab,Lv_ContenidoElementoDet,Lv_ContenidoFibraDet,Lv_TipoElementoDet
                   ,Lv_DescripcionDet,Lv_ModeloElementoDet,Lv_JurisdiccionDet,Lv_CantonDet
                   ,Lv_ParroquiaDet,Lv_DireccionDet,Lv_AlturaDet,Lv_LatitudDet,Lv_LongitudDet,Lv_UbicadoDet
                   ,Lv_NivelDet,Lv_FactibilidadDet);
        END IF;
        COMMIT;
      END LOOP;
      EXCEPTION
        WHEN UTL_HTTP.end_of_body THEN
          UTL_HTTP.end_response(Luh_http_response);
    END;

    DBMS_LOB.freetemporary(LBL_CSV);

    -- Consulta las tablas temporales para obtener la informaciòn que se grabo del archivo
    FOR Lc_TempRutaCab IN C_GetTempRutaCab
    LOOP
        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_VALIDA_REG_TABLA_RUTAS(  Lc_TempRutaCab, Pv_UsrCreacion,Lv_StatusLineaCsv, Lv_TipoErrorLineaCsv, 
                                                                          Lv_DetalleErrorElemento,Lr_RegDataPorProcesarLineaCsv);

        IF Lv_StatusLineaCsv = 'OK' THEN
          IF Lt_ElementosOk.EXISTS(Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO) AND NOT Lt_ElementosRepetidos.EXISTS(Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO) THEN
            Lt_ElementosRepetidos(Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO) := Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO;
          END IF;
          Lt_ElementosOk(Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO) := Lr_RegDataPorProcesarLineaCsv.NOMBRE_ELEMENTO;
          Lt_TRegsDataPorProcesarPsm(Lt_TRegsDataPorProcesarPsm.COUNT) := Lr_RegDataPorProcesarLineaCsv;
        ELSE
          IF Lv_TipoErrorLineaCsv = 'ErrorValidaNombreRuta' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Nombre de Ruta ya existe');
            Ln_NumValidaRuta := Ln_NumValidaRuta + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaTipoRuta' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Tipo de ruta no existe');
            Ln_NumValidaTipoRuta := Ln_NumValidaTipoRuta + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaTipoInfraestructura' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Tipo de Infraestructura no existe');
            Ln_NumValidaTipoInfra := Ln_NumValidaTipoInfra + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaElementoInicio' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Elemento Inicio no existe');
            Ln_NumValidaElementoInicio := Ln_NumValidaElementoInicio + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaElementoFin' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Elemento Fin no existe');
            Ln_NumValidaElementoFin := Ln_NumValidaElementoFin + 1; 

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaParametros' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Parametrización no existe');
            Ln_NumValidaParametros := Ln_NumValidaParametros + 1; 

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaTipoElementoInfra' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Tipo de Infraestructura no existe');
            Ln_NumValidaTipoEleInfra := Ln_NumValidaTipoEleInfra + 1; 

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaElementoInicioInfraestuctura' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Elemento Inicio no corresponde a tipo de infraestructura');
            Ln_NumValidaInicioInfra := Ln_NumValidaInicioInfra + 1;  

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaElementoFinInfraestuctura' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Elemento Fin no corresponde a tipo de infraestructura');
            Ln_NumValidaFinInfra := Ln_NumValidaFinInfra + 1;  

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaElementoIntermedio' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Elementos Intermedios con inconsistencias:'|| Lv_DetalleErrorElemento);
            Ln_NumValidaElementoInter := Ln_NumValidaElementoInter + 1;   

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaFibra' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Fibra no existe');
            Ln_NumValidaFibra := Ln_NumValidaFibra + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaDataCsv' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'La data no esta completa en el archivo');
            Ln_NumValidaDataCsv := Ln_NumValidaDataCsv + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaModeloElemento' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Modelo no Existe');
            Ln_NumValidaModeloElemento := Ln_NumValidaModeloElemento + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaTipoElemento' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Tipo de Elemento no Existe');
            Ln_NumValidaTipoElemento := Ln_NumValidaTipoElemento + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaParroquia' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Parroquia no Existe');
            Ln_NumValidaParroquia := Ln_NumValidaParroquia + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaCanton' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Canton no Existe');
            Ln_NumValidaCanton := Ln_NumValidaCanton + 1;

          ELSIF Lv_TipoErrorLineaCsv = 'ErrorValidaJurisdiccion' THEN
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Jurisdiccion no Existe');
            Ln_NumValidaJurisdiccion := Ln_NumValidaJurisdiccion + 1;

          ELSE
            UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lc_TempRutaCab.NOMBRE_RUTA || Lv_Delimitador || Lc_TempRutaCab.TIPO_RUTA || Lv_Delimitador || 
                              Lc_TempRutaCab.TIPO_INFRAESTRUCTURA || Lv_Delimitador || Lv_StatusLineaCsv || Lv_Delimitador || 'Archivo con error desconocido');
            Ln_NumDesconocido := Ln_NumDesconocido + 1;
          END IF;
          --Fin de validación de tipos de errores
        END IF;                                                                          
    END LOOP;

    Ln_IndxRegsDataPorProcesarPsm := Lt_TRegsDataPorProcesarPsm.FIRST;
    WHILE (Ln_IndxRegsDataPorProcesarPsm IS NOT NULL)
    LOOP
      Lr_RegDataPorProcesarPsm  := Lt_TRegsDataPorProcesarPsm(Ln_IndxRegsDataPorProcesarPsm);

      IF NOT Lt_ElementosRepetidos.EXISTS(Lr_RegDataPorProcesarPsm.NOMBRE_ELEMENTO) THEN
        UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lr_RegDataPorProcesarPsm.NOMBRE_ELEMENTO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.NOMBRE_TIPO_ELEMENTO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.NOMBRE_MODELO_ELEMENTO || Lv_Delimitador ||
                                                  'OK' || Lv_Delimitador ||
                                                  'Registro procesado correctamente ' || Lv_Delimitador || 
                                                  Lr_RegDataPorProcesarPsm.ELEMENTOS_DETALLE);

        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        Ln_Contador := 0;

        --obtenemos la ultima secuencia del elemento
        OPEN C_SecuenciaElemento;
        FETCH C_SecuenciaElemento INTO Lv_SecuenciaElemento;
        CLOSE C_SecuenciaElemento;

        --obtenemos el id de la ruta  Lc_GetIdTipoElemento
        OPEN Lc_GetIdTipoElemento(Lr_RegDataPorProcesarPsm.NOMBRE_TIPO_ELEMENTO);
        FETCH Lc_GetIdTipoElemento INTO Ln_IdTipoElemento;
        CLOSE Lc_GetIdTipoElemento;

        --obtenemos el id del tipo de infraestructura
        OPEN Lc_GetIdModeloElemento(Lr_RegDataPorProcesarPsm.NOMBRE_MODELO_ELEMENTO,Ln_IdTipoElemento);
        FETCH Lc_GetIdModeloElemento INTO Ln_IdModeloElemento;
        CLOSE Lc_GetIdModeloElemento;

        --inserto el nuevo elemento
        INSERT
        INTO DB_INFRAESTRUCTURA.INFO_ELEMENTO(
          ID_ELEMENTO,
          MODELO_ELEMENTO_ID,
          NOMBRE_ELEMENTO,
          DESCRIPCION_ELEMENTO,
          ESTADO,
          USR_RESPONSABLE,
          USR_CREACION,
          FE_CREACION,
          IP_CREACION
        )
        VALUES
        (
            Lv_SecuenciaElemento,
            Ln_IdModeloElemento,
            Lr_RegDataPorProcesarPsm.NOMBRE_ELEMENTO,
            Lr_RegDataPorProcesarPsm.DESCRIPCION_ELEMENTO,
            Lv_EstadoActivo,
            Pv_UsrCreacion,
            Pv_UsrCreacion,
            SYSDATE,
            Lv_IpCreacion
        );

        --Insertamos en la Info_empresa_elemento
        Ln_IdEmpresaElemento := DB_INFRAESTRUCTURA.SEQ_INFO_EMPRESA_ELEMENTO.NEXTVAL;
        INSERT
        INTO DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO(
          ID_EMPRESA_ELEMENTO,
          EMPRESA_COD,
          ELEMENTO_ID,
          ESTADO,
          USR_CREACION,
          FE_CREACION,
          IP_CREACION
        )
        VALUES
        (
            Ln_IdEmpresaElemento,
            '10',
            Lv_SecuenciaElemento,
            Lv_EstadoActivo,
            Pv_UsrCreacion,
            SYSDATE,
            Lv_IpCreacion
        );

        -- Se ingresa el detalle del elemento
        Lr_InfoDetalleElemento                          := NULL;
        Lr_InfoDetalleElemento.ELEMENTO_ID              := Lv_SecuenciaElemento;
        Lr_InfoDetalleElemento.DETALLE_NOMBRE           := 'CLASE';
        Lr_InfoDetalleElemento.DETALLE_VALOR            := Ln_IdTipoElemento;
        Lr_InfoDetalleElemento.DETALLE_DESCRIPCION      := 'Clase de la ruta.';
        Lr_InfoDetalleElemento.USR_CREACION             := Pv_UsrCreacion;
        Lr_InfoDetalleElemento.IP_CREACION              := Lv_IpCreacion;
        Lr_InfoDetalleElemento.ESTADO                   := Lv_EstadoActivo;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_DETALLE_ELEMENTO(Lr_InfoDetalleElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
           RAISE Le_Exception;
        END IF;

        OPEN Lc_GetIdInfoElemento(Lr_RegDataPorProcesarPsm.ELEMENTO_INICIO);
        FETCH Lc_GetIdInfoElemento INTO Ln_IdElementoInicio;
        CLOSE Lc_GetIdInfoElemento;

        OPEN Lc_GetIdInfoElemento(Lr_RegDataPorProcesarPsm.ELEMENTO_FIN);
        FETCH Lc_GetIdInfoElemento INTO Ln_IdElementoFin;
        CLOSE Lc_GetIdInfoElemento;

        OPEN Lc_GetIdClaseTipoMedio(Lr_RegDataPorProcesarPsm.NOMBRE_CLASE_TIPO_MEDIO);
        FETCH Lc_GetIdClaseTipoMedio INTO Ln_IdClaseTipoMedio,Ln_IdTipoMedio;
        CLOSE Lc_GetIdClaseTipoMedio;

        Lt_ArrayContenido(Ln_Contador) := Ln_IdElementoInicio||'@'||Ln_IdClaseTipoMedio;

        -- Se carga los valores de los Tags a un arreglo para crearlos en la base
        FOR Lv_Item IN Lc_GetExtractCadena(Lr_RegDataPorProcesarPsm.ELEMENTOS_CONTENIDO)
        LOOP

            OPEN Lc_GetExtractCadenaElementos(Lv_Item.Contenido);
            FETCH Lc_GetExtractCadenaElementos INTO Lv_ContenidoElemento,Lv_ContenidoFibra;
            CLOSE Lc_GetExtractCadenaElementos;

            OPEN Lc_GetIdInfoElemento(Lv_ContenidoElemento);
            FETCH Lc_GetIdInfoElemento INTO Ln_IdElementoContenido;
            CLOSE Lc_GetIdInfoElemento;

            OPEN Lc_GetIdClaseTipoMedio(Lv_ContenidoFibra);
            FETCH Lc_GetIdClaseTipoMedio INTO Ln_IdClaseTipoMedio,Ln_IdTipoMedio;
            CLOSE Lc_GetIdClaseTipoMedio;

            IF Lv_ContenidoElemento <> ' ' THEN
              Ln_Contador := Ln_Contador + 1;
              Lt_ArrayContenido(Ln_Contador) := Ln_IdElementoContenido||'@'||Ln_IdClaseTipoMedio;
            END IF;

        END LOOP;
        Ln_Contador := Ln_Contador + 1;        
        Lt_ArrayContenido(Ln_Contador) := Ln_IdElementoFin;

        Lv_TipoTramo := 'INICIAL';

        Ln_ContadorContenido     := Lt_ArrayContenido.FIRST;
        Ln_ContadorContenidoLast := Lt_ArrayContenido.LAST;

        Ln_GuardaRegistro    := 0;

        WHILE (Ln_ContadorContenido IS NOT NULL AND Ln_ContadorContenido <= Ln_ContadorContenidoLast - 1)
        LOOP

          OPEN Lc_GetExtractCadenaElementos(Lt_ArrayContenido(Ln_ContadorContenido));
          FETCH Lc_GetExtractCadenaElementos INTO Lv_ContenidoElemento,Lv_ContenidoFibra;
          CLOSE Lc_GetExtractCadenaElementos;

          Lv_ElementoA      := Lv_ContenidoElemento;
          Lv_ClaseTipoMedio := Lv_ContenidoFibra;

          OPEN Lc_GetIdInfoElemento(Lv_ElementoA);
          FETCH Lc_GetIdInfoElemento INTO Ln_IdElementoTramo;
          CLOSE Lc_GetIdInfoElemento;

          IF Ln_ContadorContenido < Lt_ArrayContenido.count THEN
            OPEN Lc_GetExtractCadenaElementos(Lt_ArrayContenido(Ln_ContadorContenido + 1));
            FETCH Lc_GetExtractCadenaElementos INTO Lv_ContenidoElemento,Lv_ContenidoFibra;
            CLOSE Lc_GetExtractCadenaElementos;

            Lv_ElementoB      := Lv_ContenidoElemento;
          ELSE
            Lv_ElementoB      := '';
          END IF;

          OPEN Lc_GetNombreElemento(Lv_ElementoA);
          FETCH Lc_GetNombreElemento INTO Lv_NombreElementoA;
          CLOSE Lc_GetNombreElemento;

          OPEN Lc_GetNombreElemento(Lv_ElementoB);
          FETCH Lc_GetNombreElemento INTO Lv_NombreElementoB;
          CLOSE Lc_GetNombreElemento;

          Lv_NombreContenido := Lv_NombreElementoA||'-'||Lv_NombreElementoB;

          --obtenemos la ultima secuencia del elemento
          OPEN C_SecuenciaTramo;
          FETCH C_SecuenciaTramo INTO Lv_SecuenciaTramo;
          CLOSE C_SecuenciaTramo;

          -- Se inserta los registros en la tabla INFO_TRAMO
          INSERT
          INTO DB_INFRAESTRUCTURA.INFO_TRAMO(
            ID_TRAMO,
            ELEMENTO_A_ID,
            ELEMENTO_B_ID,
            TIPO_TRAMO,
            ESTADO,
            RUTA_ID,
            USR_CREACION,
            FE_CREACION,
            IP_CREACION,
            NOMBRE_TRAMO
          )
          VALUES
          (
            Lv_SecuenciaTramo,
            Lv_ElementoA,
            Lv_ElementoB,
            Lv_TipoTramo,
            Lv_EstadoActivo,
            Lv_SecuenciaElemento,
            Pv_UsrCreacion,
            SYSDATE,
            Lv_IpCreacion,
            Lv_NombreContenido||'-T'||Lv_SecuenciaTramo
          );

          -- Se inserta los registros en la tabla INFO_DETALLE_TRAMO
          INSERT
          INTO DB_INFRAESTRUCTURA.INFO_DETALLE_TRAMO(
            ID_DETALLE_TRAMO,
            TRAMO_ID,
            NOMBRE_DETALLE,
            VALOR_DETALLE,
            ESTADO,
            USR_CREACION,
            FE_CREACION,
            IP_CREACION
          )
          VALUES
          (
            DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_TRAMO.NEXTVAL,
            Lv_SecuenciaTramo,
            'CLASE_TIPO_MEDIO',
            Lv_ClaseTipoMedio,
            Lv_EstadoActivo,
            Pv_UsrCreacion,
            SYSDATE,
            Lv_IpCreacion
          );

          Lv_TipoElementoA := '';
          Lv_TipoElementoB := '';

          OPEN Lc_GetIdInfoDetalleElemento(Lv_ElementoA);
          FETCH Lc_GetIdInfoDetalleElemento INTO Lv_TipoElementoA;
          CLOSE Lc_GetIdInfoDetalleElemento;

          OPEN Lc_GetIdInfoDetalleElemento(Lv_ElementoB);
          FETCH Lc_GetIdInfoDetalleElemento INTO Lv_TipoElementoB;
          CLOSE Lc_GetIdInfoDetalleElemento;

          IF Lv_TipoElementoB = Lv_TipoElementoA AND Lv_TipoElementoA IS NOT NULL THEN
           Lv_TipoLugarElemento := Lv_TipoElementoB;
          ELSE
           Lv_TipoLugarElemento := 'DUCTO'; 
          END IF;

          -- Se inserta los registros en la tabla INFO_DETALLE_TRAMO
          INSERT
          INTO DB_INFRAESTRUCTURA.INFO_DETALLE_TRAMO(
            ID_DETALLE_TRAMO,
            TRAMO_ID,
            NOMBRE_DETALLE,
            VALOR_DETALLE,
            ESTADO,
            USR_CREACION,
            FE_CREACION,
            IP_CREACION
          )
          VALUES
          (
            DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_TRAMO.NEXTVAL,
            Lv_SecuenciaTramo,
            'TIPO LUGAR',
            Lv_TipoLugarElemento,
            Lv_EstadoActivo,
            Pv_UsrCreacion,
            SYSDATE,
            Lv_IpCreacion
          );

          Lv_TipoTramo         := '';
          Ln_ContadorContenido := Lt_ArrayContenido.NEXT(Ln_ContadorContenido);

        END LOOP;

        Lt_ArrayContenido.DELETE;

        -- Se ingresa el historial elemnto de creación de scope
        Lv_Observacion  := 'Se creó Ruta '||Lr_RegDataPorProcesarPsm.NOMBRE_ELEMENTO||' por proceso masivo';

        Lr_InfoHistorialElemento                  := NULL;
        Lr_InfoHistorialElemento.ELEMENTO_ID      := Lv_SecuenciaElemento;
        Lr_InfoHistorialElemento.ESTADO_ELEMENTO  := Lr_RegDataPorProcesarPsm.ESTADO_ELEMENTO;
        Lr_InfoHistorialElemento.OBSERVACION      := Lv_Observacion;
        Lr_InfoHistorialElemento.USR_CREACION     := Pv_UsrCreacion;
        Lr_InfoHistorialElemento.IP_CREACION      := Lv_IpCreacion;
        DB_INFRAESTRUCTURA.INFRK_DML.INFRP_INSERT_HISTORIAL_ELEMENT(Lr_InfoHistorialElemento, Lv_Mensaje);
        IF Lv_Mensaje IS NOT NULL THEN
          RAISE Le_Exception;
        END IF;

        Ln_NumRegistrosOk := Ln_NumRegistrosOk + 1;
      ELSE
        Ln_NumMas1Registro := Ln_NumMas1Registro + 1;
          UTL_FILE.PUT_LINE(Lf_ArchivoProcesoPsm, Lr_RegDataPorProcesarPsm.NOMBRE_ELEMENTO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.NOMBRE_TIPO_ELEMENTO || Lv_Delimitador ||
                                                  Lr_RegDataPorProcesarPsm.NOMBRE_MODELO_ELEMENTO || Lv_Delimitador ||
                                                  'ERROR' || Lv_Delimitador ||
                                                  'Ruta repetida');

      END IF;
      Ln_IndxRegsDataPorProcesarPsm := Lt_TRegsDataPorProcesarPsm.NEXT(Ln_IndxRegsDataPorProcesarPsm);
    END LOOP;

    UTL_FILE.FCLOSE(Lf_ArchivoProcesoPsm);

    Lv_PlantillaCorreo  := Lv_PlantillaInicial;
    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{NUM_REGISTROS_TOTAL}}', Ln_NumRegistrosTotal);

    IF Ln_NumRegistrosOk > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumRegistrosOk || '</td>' ||
                              '<td>OK</td>' ||
                              '<td>Archivo procesado correctamente</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaRuta > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaRuta || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Ruta ya existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaTipoRuta > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaTipoRuta || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Tipo de Ruta no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaTipoInfra > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaTipoInfra || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Tipo de Infraestructura no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaElementoInicio > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaElementoInicio || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elemento Inicio no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaElementoFin > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaElementoFin || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elemento Fin no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaParametros > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaParametros || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Parametro no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaTipoEleInfra > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaTipoEleInfra || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Tipo de Infraestructura no existe</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaInicioInfra > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaInicioInfra || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elemento Inicio no corresponde a tipo de infraestructura</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumDesconocido > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumDesconocido || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Error desconocido</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaFinInfra > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaFinInfra || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elemento Fin no corresponde a tipo de infraestructura</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumValidaElementoInter > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaElementoInter || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Elementos Intermedios con inconsistencias</td>' ||
                            '</tr>';  
    END IF;

    IF Ln_NumValidaFibra > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaFibra || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Fibra no existe</td>' ||
                            '</tr>';
    END IF;                        

    IF Ln_NumValidaDataCsv > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumValidaDataCsv || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Ruta no tiene la data completa en el archivo</td>' ||
                            '</tr>';
    END IF;

    IF Ln_NumMas1Registro > 0 THEN
      Lv_ContenidoCorreo := Lv_ContenidoCorreo || 
                            '<tr>' ||
                              '<td>' || Ln_NumMas1Registro || '</td>' ||
                              '<td>ERROR</td>' ||
                              '<td>Rutas repetidos</td>' ||
                            '</tr>';
    END IF;

    Lv_PlantillaCorreo  := REPLACE(Lv_PlantillaCorreo, '{{CUERPO_CORREO}}', Lv_ContenidoCorreo);   

    Lv_Gzip := 'gzip ' || Lv_RutaDirectorioBaseDatos || Lv_NombreArchivoCorreo;
    Lv_NombreArchivoCorreoZip  := Lv_NombreArchivoCorreo || '.gz';
    DBMS_OUTPUT.PUT_LINE(NAF47_TNET.JAVARUNCOMMAND(Lv_Gzip));

    BEGIN
      DB_GENERAL.GNRLPCK_UTIL.send_email_attach(Lv_Remitente, Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, Lv_Asunto, Lv_PlantillaCorreo, 
                                                Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);
      UTL_FILE.FREMOVE(Lv_DirectorioBaseDatos, Lv_NombreArchivoCorreoZip);

      UPDATE DB_COMUNICACION.INFO_DOCUMENTO
      SET ESTADO = 'Eliminado'
      WHERE ID_DOCUMENTO = Pn_IdArchivoCsvPsm;

    EXCEPTION
    WHEN OTHERS THEN
      UTL_MAIL.SEND (   SENDER      => Lv_Remitente, 
                        RECIPIENTS  => Lr_GetAliasPlantillaCorreo.ALIAS_CORREOS, 
                        SUBJECT     => Lv_Asunto,
                        MESSAGE     => SUBSTR(Lv_PlantillaCorreo, 1, 32767),
                        MIME_TYPE   => 'text/html; charset=iso-8859-1');

      DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR('Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_RUTAS->ENVIO_CORREO', 
                                            'No se ha podido enviar el archivo en la ruta ' || Lv_RutaDirectorioBaseDatos 
                                            || Lv_NombreArchivoCorreo || ' ' || SQLCODE || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK 
                                            || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
    END;

    Pv_Status     := 'OK';
    Pv_Mensaje    := 'Proceso realizado correctamente';

    COMMIT;

    EXCEPTION
      WHEN Le_Exception THEN
        Pv_Status   := 'ERROR';
        Pv_Mensaje  := Lv_Mensaje;
        ROLLBACK;
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_RUTAS', 
                                                Lv_Mensaje, 
                                                NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                                NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
      WHEN OTHERS THEN
        Pv_Status               := 'ERROR';
        Pv_Mensaje              := 'Ha ocurrido un problema al realizar la subida del archivo CSV para creación de rutas. '
                                    || 'Por favor comuníquese con Sistemas!';
        Lv_Mensaje              := 'Error en la subida del archivo CSV para creación de rutas ' || SQLCODE || ' - ERROR_STACK: ' 
                                    || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        ROLLBACK;
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_UPLOAD_CSV_RUTAS', 
                                                Lv_Mensaje, 
                                                NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                                NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_UPLOAD_CSV_RUTAS;

  PROCEDURE P_VALIDA_REG_TABLA_RUTAS(
    Pv_ContenidoLinea           IN  DB_INFRAESTRUCTURA.TEMP_RUTA_CAB%ROWTYPE,
    Pv_UsrCreacion              IN VARCHAR2,
    Pv_Status                   OUT VARCHAR2,
    Pv_TipoError                OUT VARCHAR2,
    Pv_ErrorElemento            OUT CLOB,
    Pr_RegDataPorProcesar       OUT DB_INFRAESTRUCTURA.INKG_TYPES.Lr_DataPorProcesarRutas)
  AS
    Ln_Rownum                       NUMBER := 1;
    Lv_EstadoActivo                 VARCHAR2(6) := 'Activo';
    Lv_EsCabecera                   VARCHAR2(2) := 'NO';
    Lv_SecuenciaElemento            INFO_ELEMENTO.ID_ELEMENTO%TYPE;

    CURSOR Lc_GetElementoNombre(Cv_ElementoNombre DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT ID_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE NOMBRE_ELEMENTO = Cv_ElementoNombre
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;
    CURSOR Lc_GetTipoNombre(Cv_NombreTipo DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE)
    IS
      SELECT ID_TIPO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO
      WHERE NOMBRE_TIPO_ELEMENTO = Cv_NombreTipo
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;  
    CURSOR Lc_GetModeloNombre(Cv_NombreModelo DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE,
                              Cv_TipoElemento DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.TIPO_ELEMENTO_ID%TYPE)
    IS
      SELECT ID_MODELO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO
      WHERE NOMBRE_MODELO_ELEMENTO = Cv_NombreModelo
      AND TIPO_ELEMENTO_ID = Cv_TipoElemento
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;   
    CURSOR Lc_GetParametrosElementos(Cv_TipoInfraestructura DB_GENERAL.ADMI_PARAMETRO_DET.DESCRIPCION%TYPE,
                                     Cv_Valor1 DB_GENERAL.ADMI_PARAMETRO_DET.VALOR1%TYPE) 
    IS
      SELECT VALOR2, VALOR3, VALOR4
      FROM DB_GENERAL.ADMI_PARAMETRO_DET DET
      WHERE DET.PARAMETRO_ID = (SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
      WHERE CAB.NOMBRE_PARAMETRO = 'TIPO_DE_INFRAESTRUCTURA_POR_RUTAS')
      AND DET.DESCRIPCION = Cv_TipoInfraestructura
      AND DET.VALOR1 = Cv_Valor1
      AND DET.ESTADO = Lv_EstadoActivo
      AND ROWNUM = Ln_Rownum;

    CURSOR Lc_GetTipoElemento(Cv_ElementoNombre DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT TIP.NOMBRE_TIPO_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD
      ON MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
      AND MOD.ESTADO = Lv_EstadoActivo
      INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
      ON TIP.ID_TIPO_ELEMENTO = MOD.TIPO_ELEMENTO_ID
      AND TIP.ESTADO = Lv_EstadoActivo
      WHERE ELE.NOMBRE_ELEMENTO = Cv_ElementoNombre
      AND ELE.ESTADO = Lv_EstadoActivo
      AND ROWNUM = 1;

    CURSOR Lc_GetExtractCadena(Cv_ExtractCadena VARCHAR2)
    IS
      SELECT REGEXP_SUBSTR(Cv_ExtractCadena,'[^*]+', 1, LEVEL) CONTENIDO FROM dual
      CONNECT BY REGEXP_SUBSTR(Cv_ExtractCadena, '[^*]+', 1, LEVEL) IS NOT NULL;

    CURSOR Lc_GetExtractCadenaElementos(Cv_ExtractElementos CLOB)
    IS
      SELECT REGEXP_SUBSTR(Cv_ExtractElementos,'([^@]+?)(@|?$)', 1, 1, '',1) AS ELEMENTO ,
             REGEXP_SUBSTR(Cv_ExtractElementos,'([^@]+?)(@|?$)', 1, 2, '',1) AS FIBRA
      FROM dual; 

    CURSOR Lc_GetIdInfoElemento(Cv_NombreElemento DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE)
    IS
      SELECT ID_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE NOMBRE_ELEMENTO = Cv_NombreElemento
      AND ESTADO = Lv_EstadoActivo; 

    CURSOR Lc_GetNombreInfoElemento(Cv_IdElemento DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE)
    IS
      SELECT NOMBRE_ELEMENTO
      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
      WHERE ID_ELEMENTO = Cv_IdElemento
      AND ESTADO = Lv_EstadoActivo;   

    CURSOR Lc_GetIdClaseTipoMedio(Cv_NombreClaseTipoMedio DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE)
    IS
      SELECT ID_CLASE_TIPO_MEDIO, TIPO_MEDIO_ID
      FROM DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO
      WHERE NOMBRE_CLASE_TIPO_MEDIO = Cv_NombreClaseTipoMedio
      AND ESTADO = Lv_EstadoActivo;  

    CURSOR Lc_GetNombreClaseTipoMedio(Cv_IdClaseTipoMedio DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE)
    IS
      SELECT NOMBRE_CLASE_TIPO_MEDIO
      FROM DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO
      WHERE ID_CLASE_TIPO_MEDIO = Cv_IdClaseTipoMedio
      AND ESTADO = Lv_EstadoActivo;    

    CURSOR Lc_GetInfoTramo(Cv_ElementoId DB_INFRAESTRUCTURA.INFO_TRAMO.ELEMENTO_A_ID%TYPE)
    IS
      SELECT ID_TRAMO
      FROM DB_INFRAESTRUCTURA.INFO_TRAMO
      WHERE (ELEMENTO_B_ID = Cv_ElementoId
      OR ELEMENTO_A_ID    = Cv_ElementoId)
      AND ESTADO = Lv_EstadoActivo
      AND ROWNUM = 1;  

    CURSOR Lc_GetParametroDet(Cv_Valor4 VARCHAR2)
    IS
      SELECT REGEXP_SUBSTR(Cv_Valor4,'[^|,]+', 1, LEVEL) CONTENIDO_DET FROM dual
      CONNECT BY REGEXP_SUBSTR(Cv_Valor4, '[^|,]+', 1, LEVEL) IS NOT NULL; 

    CURSOR C_GetTempRutaDet(Cv_IdRutaCab DB_INFRAESTRUCTURA.TEMP_RUTA_DET.RUTA_ID_CAB%TYPE)
    IS
      SELECT ID_RUTA_DET, RUTA_ID_CAB, NOMBRE_ELEMENTO, TIPO_FIBRA, TIPO_ELEMENTO, DESCRIPCION, MODELO_ELEMENTO,
      JURISDICCION, CANTON, PARROQUIA, DIRECCION, ALTURA, LATITUD, LONGITUD, UBICADO_EN, NIVEL, FACTIBILIDAD   
      FROM DB_INFRAESTRUCTURA.TEMP_RUTA_DET
      WHERE RUTA_ID_CAB = Cv_IdRutaCab ORDER BY ID_RUTA_DET ASC;

    CURSOR C_GetIdJurisdiccion(Cv_NombreJurisdiccion DB_INFRAESTRUCTURA.ADMI_JURISDICCION.NOMBRE_JURISDICCION%TYPE)
    IS  
      SELECT ID_JURISDICCION  
      FROM DB_INFRAESTRUCTURA.ADMI_JURISDICCION
      WHERE UPPER(NOMBRE_JURISDICCION) = UPPER(Cv_NombreJurisdiccion);

    CURSOR C_GetIdCanton(Cv_NombreCanton DB_GENERAL.ADMI_CANTON.NOMBRE_CANTON%TYPE)
    IS  
      SELECT ID_CANTON  
      FROM DB_GENERAL.ADMI_CANTON
      WHERE UPPER(NOMBRE_CANTON) = UPPER(Cv_NombreCanton);

    CURSOR C_GetIdParroquia(Cv_NombreParroquia DB_GENERAL.ADMI_PARROQUIA.NOMBRE_PARROQUIA%TYPE,
                            Cn_IdCanton DB_GENERAL.ADMI_PARROQUIA.CANTON_ID%TYPE)
    IS  
      SELECT ID_PARROQUIA  
      FROM DB_GENERAL.ADMI_PARROQUIA
      WHERE UPPER(NOMBRE_PARROQUIA) = UPPER(Cv_NombreParroquia)
      AND CANTON_ID = Cn_IdCanton;  

    CURSOR C_SecuenciaElemento
    IS
      SELECT seq_info_elemento.NEXTVAL FROM dual;

    Ln_IndxTCamposXLineaCsv         NUMBER;
    Lt_TCamposXLineaCsv             DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Lv_NombreTipoElementoCsv        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Lv_NombreTipoElementoDet        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Ln_IdTipoElemento               DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO%TYPE;
    Ln_IdTipoElementoDet            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO%TYPE;
    Lv_NombreElemento               DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Ln_IdElemento                   DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdElementoInicio             DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdElementoFin                DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Lv_NombreModeloElementoCsv      DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE;
    Lv_NombreModeloElementoDet      DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO%TYPE;
    Lv_ElementoInicioCsv            DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_ElementoFinCsv               DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_NombreTipoMedioCsv           DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE;
    Lv_NombreClaseTipoMedio         DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.NOMBRE_CLASE_TIPO_MEDIO%TYPE;
    Lv_ContinuaValidacion           VARCHAR2(2) := 'NO';
    Lv_ContinuaValidacionDetalle    VARCHAR2(2) := 'NO';
    Ln_IdModeloElemento             DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO%TYPE;
    Ln_IdModeloElementoDet          DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO%TYPE;
    Lv_ObservacionCsv               VARCHAR2(4000);
    Lv_ElementosContenidoCsv        CLOB;
    Lv_ElementosIntermediosCsv      CLOB;
    Lv_DetalleError                 CLOB;
    Lv_NombreElementoCsv            DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_DescripcionElementoCsv       DB_INFRAESTRUCTURA.INFO_ELEMENTO.DESCRIPCION_ELEMENTO%TYPE;
    Lv_Valor2                       DB_GENERAL.ADMI_PARAMETRO_DET.VALOR2%TYPE;
    Lv_Valor3                       DB_GENERAL.ADMI_PARAMETRO_DET.VALOR3%TYPE;
    Lv_Valor4                       DB_GENERAL.ADMI_PARAMETRO_DET.VALOR4%TYPE;
    Lv_NombreTipoElemento           DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Lv_NombreElementoInter          DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.NOMBRE_TIPO_ELEMENTO%TYPE;
    Lt_ArrayContenido               DB_INFRAESTRUCTURA.INKG_TYPES.Lt_ArrayOfVarchar;
    Ln_ContadorContenido            NUMBER;
    Ln_ContadorContenidoLast        NUMBER;
    Ln_Contador                     NUMBER := 0;
    Lv_ContenidoElemento            VARCHAR2(4000);
    Lv_ContenidoFibra               VARCHAR2(4000);
    Ln_IdElementoContenido          DB_INFRAESTRUCTURA.INFO_ELEMENTO.ID_ELEMENTO%TYPE;
    Ln_IdClaseTipoMedio             DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.ID_CLASE_TIPO_MEDIO%TYPE;
    Ln_IdTipoMedio                  DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.TIPO_MEDIO_ID%TYPE;
    Ln_IdClaseTipoMedioP            DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.ID_CLASE_TIPO_MEDIO%TYPE;
    Ln_IdTipoMedioP                 DB_INFRAESTRUCTURA.ADMI_CLASE_TIPO_MEDIO.TIPO_MEDIO_ID%TYPE;
    Ln_IdTramo                      DB_INFRAESTRUCTURA.INFO_TRAMO.ID_TRAMO%TYPE;
    Lv_ElementoIntermedio           DB_INFRAESTRUCTURA.INFO_ELEMENTO.NOMBRE_ELEMENTO%TYPE;
    Lv_Numero                       NUMBER;
    Ln_IdRutaCab                    NUMBER;
    Ln_IdJurisdiccion               DB_INFRAESTRUCTURA.ADMI_JURISDICCION.ID_JURISDICCION%TYPE;
    Ln_IdCanton                     DB_GENERAL.ADMI_CANTON.ID_CANTON%TYPE;
    Ln_IdParroquia                  DB_GENERAL.ADMI_PARROQUIA.ID_PARROQUIA%TYPE;
    Ln_IdUbicacion                  DB_INFRAESTRUCTURA.INFO_UBICACION.ID_UBICACION%TYPE;
    Ln_IdEmpresaElementoUbicacion   DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA.ID_EMPRESA_ELEMENTO_UBICACION%TYPE;
    Lv_IpCreacion                   VARCHAR2(15);
    Ln_IdEmpresaElemento            DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO.ID_EMPRESA_ELEMENTO%TYPE := 0;
    Ln_IdDetalleElemento            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO.ID_DETALLE_ELEMENTO%TYPE := 0;

  BEGIN
      Lv_NombreElementoCsv          := Pv_ContenidoLinea.NOMBRE_RUTA;
      Lv_DescripcionElementoCsv     := Pv_ContenidoLinea.DESCRIPCION;
      Lv_NombreTipoElementoCsv      := Pv_ContenidoLinea.TIPO_RUTA;
      Lv_NombreModeloElementoCsv    := Pv_ContenidoLinea.TIPO_INFRAESTRUCTURA;
      Lv_ObservacionCsv             := Pv_ContenidoLinea.PROCESO;
      Lv_ElementoInicioCsv          := Pv_ContenidoLinea.ELEMENTO_INICIO;
      Lv_ElementoFinCsv             := Pv_ContenidoLinea.ELEMENTO_FIN;
      Lv_NombreTipoMedioCsv         := Pv_ContenidoLinea.TIPO_FIBRA;
      Ln_IdRutaCab                  := Pv_ContenidoLinea.ID_RUTA_CAB;
      Lv_IpCreacion                 := '127.0.0.1';

    IF Lv_NombreElementoCsv IS NOT NULL AND Lv_DescripcionElementoCsv IS NOT NULL 
      AND Lv_NombreTipoElementoCsv IS NOT NULL 
      AND Lv_NombreModeloElementoCsv IS NOT NULL AND Lv_ObservacionCsv IS NOT NULL 
      AND Lv_ElementoInicioCsv IS NOT NULL AND Lv_ElementoFinCsv IS NOT NULL 
      AND Lv_NombreTipoMedioCsv IS NOT NULL THEN

      OPEN Lc_GetElementoNombre(Lv_NombreElementoCsv);
      FETCH Lc_GetElementoNombre INTO Ln_IdElemento;
      CLOSE Lc_GetElementoNombre;

      IF Ln_IdElemento IS NULL THEN
        OPEN Lc_GetTipoNombre(Lv_NombreTipoElementoCsv);
        FETCH Lc_GetTipoNombre INTO Ln_IdTipoElemento;
        CLOSE Lc_GetTipoNombre;
        IF Ln_IdTipoElemento IS NOT NULL THEN
          OPEN Lc_GetModeloNombre(Lv_NombreModeloElementoCsv,Ln_IdTipoElemento);
          FETCH Lc_GetModeloNombre INTO Ln_IdModeloElemento;
          CLOSE Lc_GetModeloNombre;
          IF Ln_IdModeloElemento IS NOT NULL THEN
             Lv_ContinuaValidacion := 'SI';
             --Fin de la validaci¿n
          ELSE
          --Caso contrario de la validación del id del policy
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaTipoInfraestructura';

          END IF;
          --Fin de la validaci¿n del id del policy
        ELSE
        --Caso contrario de la validacion del elemento
          Pv_Status     := 'ERROR';
          Pv_TipoError  := 'ErrorValidaTipoRuta';

        END IF;
        --Fin de la validaci¿n del elemento
      ELSE
      --Caso contrario de la validacion del nombre de la Ruta ya existe
        Pv_Status     := 'ERROR';
        Pv_TipoError  := 'ErrorValidaNombreRuta';

      END IF;
      --Fin de la validaci¿n del id del plan nuevo
    ELSE
    --Caso contrario de la validacion de data del archivo
      Pv_Status     := 'ERROR';
      Pv_TipoError  := 'ErrorValidaDataCsv';
    END IF;

    --Fin de la validación del elemento, tipo de infraestructura, tipo de ruta y data del archivo
    IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';

      --Consultamos si el nombre del elemento inicio existe
      OPEN Lc_GetElementoNombre(Lv_ElementoInicioCsv);
      FETCH Lc_GetElementoNombre INTO Ln_IdElementoInicio;
      CLOSE Lc_GetElementoNombre;
      IF Ln_IdElementoInicio IS NOT NULL THEN
          OPEN Lc_GetElementoNombre(Lv_ElementoFinCsv);
          FETCH Lc_GetElementoNombre INTO Ln_IdElementoFin;
          CLOSE Lc_GetElementoNombre;
          IF Ln_IdElementoFin IS NOT NULL THEN
            OPEN Lc_GetIdClaseTipoMedio(Lv_NombreTipoMedioCsv);
            FETCH Lc_GetIdClaseTipoMedio INTO Ln_IdClaseTipoMedioP,Ln_IdTipoMedioP;
            CLOSE Lc_GetIdClaseTipoMedio;

            IF Ln_IdClaseTipoMedioP IS NOT NULL THEN
               Lv_ContinuaValidacion := 'SI';
            ELSE
               --Caso contrario error de la validación elemento fin
               Pv_Status     := 'ERROR';
               Pv_TipoError  := 'ErrorValidaFibra'; 
            END IF;
             --Fin de la validaci¿n
          ELSE
          --Caso contrario error de la validación elemento fin
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaElementoFin';
          END IF;
      ELSE
          --Caso contrario error de la validación elemento inicio
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaElementoInicio';
      END IF;
    END IF;

    -- Validamos el elemento inicio pertenezca al parametro del tipo de infraestructura
    IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';
      OPEN Lc_GetParametrosElementos(Lv_NombreModeloElementoCsv,Ln_IdTipoElemento);
      FETCH Lc_GetParametrosElementos INTO Lv_Valor2,Lv_Valor3,Lv_Valor4;
      CLOSE Lc_GetParametrosElementos;
      IF Lv_Valor2 IS NOT NULL THEN
        OPEN Lc_GetTipoElemento(Lv_ElementoInicioCsv);
        FETCH Lc_GetTipoElemento INTO Lv_NombreTipoElemento;
        CLOSE Lc_GetTipoElemento;
        IF Lv_NombreTipoElemento IS NOT NULL THEN
          IF Lv_NombreTipoElemento = Lv_Valor2 THEN
            Lv_ContinuaValidacion := 'SI';
          ELSE
            Pv_Status     := 'ERROR';
            Pv_TipoError  := 'ErrorValidaElementoInicioInfraestuctura'; 
          END IF;
        ELSE
          Pv_Status     := 'ERROR';
          Pv_TipoError  := 'ErrorValidaTipoElementoInfra';  
        END IF;
      ELSE
        Pv_Status     := 'ERROR';
        Pv_TipoError  := 'ErrorValidaParametros';
      END IF;
    END IF;

    -- Validamos el elemento fin pertenezca al parametro del tipo de infraestructura
    IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';
      OPEN Lc_GetTipoElemento(Lv_ElementoFinCsv);
      FETCH Lc_GetTipoElemento INTO Lv_NombreTipoElemento;
      CLOSE Lc_GetTipoElemento;
      IF Lv_NombreTipoElemento IS NOT NULL THEN
        IF Lv_NombreTipoElemento = Lv_Valor3 THEN
          Lv_ContinuaValidacion := 'SI';
        ELSE
          Pv_Status     := 'ERROR';
          Pv_TipoError  := 'ErrorValidaElementoFinInfraestuctura'; 
        END IF;
      ELSE
        Pv_Status     := 'ERROR';
        Pv_TipoError  := 'ErrorValidaTipoElementoInfra';  
      END IF;
    END IF;

    -- Validamos los elementos intermedios y si estan correctos lo agregamos a una variable
    IF Lv_ContinuaValidacion = 'SI' THEN
        --Lv_ContinuaValidacion := 'NO';
        FOR Lc_TempRutaDet IN C_GetTempRutaDet(Ln_IdRutaCab)
        LOOP
            Lv_ContinuaValidacionDetalle := 'NO';
            Ln_IdElementoContenido := '';
            Lv_ContenidoElemento   := Lc_TempRutaDet.NOMBRE_ELEMENTO;
            Lv_ContenidoFibra      := Lc_TempRutaDet.TIPO_FIBRA;

            OPEN Lc_GetIdInfoElemento(Lv_ContenidoElemento);
            FETCH Lc_GetIdInfoElemento INTO Ln_IdElementoContenido;
            CLOSE Lc_GetIdInfoElemento;

            IF Ln_IdElementoContenido IS NULL THEN
              Lv_NombreTipoElementoDet      := Lc_TempRutaDet.TIPO_ELEMENTO;
              Lv_NombreModeloElementoDet    := Lc_TempRutaDet.MODELO_ELEMENTO;
              Ln_IdTipoElementoDet          := '';
              -- Creamos el elemento que no existe
                OPEN Lc_GetTipoNombre(Lv_NombreTipoElementoDet);
                FETCH Lc_GetTipoNombre INTO Ln_IdTipoElementoDet;
                CLOSE Lc_GetTipoNombre;
                IF Ln_IdTipoElementoDet IS NOT NULL THEN
                  Ln_IdModeloElementoDet := '';
                  OPEN Lc_GetModeloNombre(Lv_NombreModeloElementoDet,Ln_IdTipoElementoDet);
                  FETCH Lc_GetModeloNombre INTO Ln_IdModeloElementoDet;
                  CLOSE Lc_GetModeloNombre;
                  IF Ln_IdModeloElementoDet IS NOT NULL THEN
                     Lv_ContinuaValidacionDetalle := 'SI';
                     --Fin de la validaci¿n
                  ELSE
                  --Caso contrario de la validación del id del policy
                    Pv_Status     := 'ERROR';
                    Pv_TipoError  := 'ErrorValidaModeloElemento';
                    Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' ErrorValidaModeloElemento'||'|';
                  END IF;
                  --Fin de la validaci¿n del id del policy
                ELSE
                --Caso contrario de la validaci¿n del elemento
                  Pv_Status     := 'ERROR';
                  Pv_TipoError  := 'ErrorValidaTipoElemento';
                  Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' ErrorValidaTipoElemento'||'|';
                END IF;

                IF Lv_ContinuaValidacionDetalle = 'SI' THEN
                    Lv_ContinuaValidacionDetalle := 'NO';
                    Ln_IdJurisdiccion := '';
                    OPEN C_GetIdJurisdiccion(Lc_TempRutaDet.JURISDICCION);
                    FETCH C_GetIdJurisdiccion INTO Ln_IdJurisdiccion;
                    CLOSE C_GetIdJurisdiccion; 

                    IF Ln_IdJurisdiccion IS NOT NULL THEN
                        Ln_IdCanton := '';
                        OPEN C_GetIdCanton(Lc_TempRutaDet.CANTON);
                        FETCH C_GetIdCanton INTO Ln_IdCanton;
                        CLOSE C_GetIdCanton;
                        IF Ln_IdCanton IS NOT NULL THEN
                            Ln_IdParroquia := '';
                            OPEN C_GetIdParroquia(Lc_TempRutaDet.PARROQUIA,Ln_IdCanton);
                            FETCH C_GetIdParroquia INTO Ln_IdParroquia;
                            CLOSE C_GetIdParroquia;
                            IF Ln_IdParroquia IS NOT NULL THEN
                                Lv_ContinuaValidacionDetalle := 'SI';
                            ELSE
                                Pv_Status     := 'ERROR';
                                Pv_TipoError  := 'ErrorValidaParroquia';
                                Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' ErrorValidaParroquia'||'|';
                            END IF;
                        ELSE
                            --Caso contrario de la validación del id del canton
                            Pv_Status     := 'ERROR';
                            Pv_TipoError  := 'ErrorValidaCanton';
                            Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' ErrorValidaCanton'||'|';
                        END IF;

                     --Fin de la validaci¿n
                    ELSE
                        --Caso contrario de la validación del id del policy
                        Pv_Status     := 'ERROR';
                        Pv_TipoError  := 'ErrorValidaJurisdiccion';
                        Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' ErrorValidaJurisdiccion'||'|';
                    END IF;
                END IF;
                IF Lv_ContinuaValidacionDetalle = 'SI' THEN
                    Lv_ContinuaValidacionDetalle := 'NO';
                    Ln_IdClaseTipoMedio := '';
                    OPEN Lc_GetIdClaseTipoMedio(Lv_ContenidoFibra);
                    FETCH Lc_GetIdClaseTipoMedio INTO Ln_IdClaseTipoMedio,Ln_IdTipoMedio;
                    CLOSE Lc_GetIdClaseTipoMedio;

                    IF Ln_IdClaseTipoMedio IS NULL THEN
                        Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' Fibra no existe'||'|';
                    ELSE
                        IF Lv_ContenidoElemento <> ' ' THEN
                           Lv_ContinuaValidacionDetalle := 'SI';
                        END IF;
                    END IF;
                END IF;
                IF Lv_ContinuaValidacionDetalle = 'SI' THEN
                    --INGRESOS EN LAS TABLAS PARA NUEVO ELEMENTO
                    --obtenemos la ultima secuencia del elemento
                    OPEN C_SecuenciaElemento;
                    FETCH C_SecuenciaElemento INTO Lv_SecuenciaElemento;
                    CLOSE C_SecuenciaElemento;
                    INSERT
                    INTO DB_INFRAESTRUCTURA.INFO_ELEMENTO(
                      ID_ELEMENTO,
                      MODELO_ELEMENTO_ID,
                      NOMBRE_ELEMENTO,
                      DESCRIPCION_ELEMENTO,
                      ESTADO,
                      USR_RESPONSABLE,
                      USR_CREACION,
                      FE_CREACION,
                      IP_CREACION
                    )
                    VALUES
                    (
                        Lv_SecuenciaElemento,
                        Ln_IdModeloElementoDet,
                        Lv_ContenidoElemento,
                        Lc_TempRutaDet.DESCRIPCION,
                        Lv_EstadoActivo,
                        Pv_UsrCreacion,
                        Pv_UsrCreacion,
                        SYSDATE,
                        Lv_IpCreacion
                    );
                    --ingreso el historial del elemento
                    INSERT INTO DB_INFRAESTRUCTURA.INFO_HISTORIAL_ELEMENTO
                    ( ID_HISTORIAL,
                      ELEMENTO_ID,
                      ESTADO_ELEMENTO,
                      OBSERVACION,
                      USR_CREACION,
                      FE_CREACION,
                      IP_CREACION )
                    VALUES
                    ( DB_INFRAESTRUCTURA.SEQ_INFO_HISTORIAL_ELEMENTO.NEXTVAL,
                      Lv_SecuenciaElemento,
                      Lv_EstadoActivo,
                      'Se ingreso el elemento: ' || Lv_ContenidoElemento
                      ,Pv_UsrCreacion,
                      SYSDATE,
                      Lv_IpCreacion );
                    --ingreso en la INFO_UBICACION
                    Ln_IdUbicacion := DB_INFRAESTRUCTURA.SEQ_INFO_UBICACION.NEXTVAL;
--                    
                    INSERT INTO DB_INFRAESTRUCTURA.INFO_UBICACION
                    ( ID_UBICACION,
                      PARROQUIA_ID,
                      DIRECCION_UBICACION,
                      LONGITUD_UBICACION,
                      LATITUD_UBICACION,
                      ALTURA_SNM,
                      USR_CREACION,
                      FE_CREACION,
                      IP_CREACION )
                    VALUES
                    ( Ln_IdUbicacion,
                      Ln_IdParroquia,
                      Lc_TempRutaDet.DIRECCION,
                      TO_NUMBER(Lc_TempRutaDet.LONGITUD),
                      TO_NUMBER(Lc_TempRutaDet.LATITUD),
                      TO_NUMBER(Lc_TempRutaDet.ALTURA),
                      Pv_UsrCreacion,
                      SYSDATE,
                      Lv_IpCreacion );
                    --ingreso en la INFO_EMPRESA_ELEMENTO_UBICACION
                    Ln_IdEmpresaElementoUbicacion := DB_INFRAESTRUCTURA.SEQ_INFO_EMPRESA_ELEMENTO_UBI.NEXTVAL;
                    INSERT INTO DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA
                    ( ID_EMPRESA_ELEMENTO_UBICACION,
                      EMPRESA_COD,
                      ELEMENTO_ID,
                      UBICACION_ID,
                      USR_CREACION,
                      FE_CREACION,
                      IP_CREACION )
                    VALUES
                    ( Ln_IdEmpresaElementoUbicacion,
                      '10',
                      Lv_SecuenciaElemento,
                      Ln_IdUbicacion,
                      Pv_UsrCreacion,
                      SYSDATE,
                      Lv_IpCreacion );  

                    --Insertamos en la Info_empresa_elemento
                    Ln_IdEmpresaElemento := DB_INFRAESTRUCTURA.SEQ_INFO_EMPRESA_ELEMENTO.NEXTVAL;
                    INSERT
                    INTO DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO(
                      ID_EMPRESA_ELEMENTO,
                      EMPRESA_COD,
                      ELEMENTO_ID,
                      ESTADO,
                      USR_CREACION,
                      FE_CREACION,
                      IP_CREACION
                    )
                    VALUES
                    (
                        Ln_IdEmpresaElemento,
                        '10',
                        Lv_SecuenciaElemento,
                        Lv_EstadoActivo,
                        Pv_UsrCreacion,
                        SYSDATE,
                        Lv_IpCreacion
                    );
                    IF Lc_TempRutaDet.NIVEL IS NOT NULL THEN
                        --Insertamos en la Info_detalle_elemento
                        Ln_IdDetalleElemento := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                        INSERT
                        INTO DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO(
                            ID_DETALLE_ELEMENTO,
                            ELEMENTO_ID,
                            DETALLE_NOMBRE,
                            DETALLE_VALOR,
                            DETALLE_DESCRIPCION,
                            ESTADO,
                            USR_CREACION,
                            FE_CREACION,
                            IP_CREACION
                        )
                        VALUES
                        (
                            Ln_IdDetalleElemento,
                            Lv_SecuenciaElemento,
                            'NIVEL',
                            Lc_TempRutaDet.NIVEL,
                            'NIVEL '|| Lc_TempRutaDet.NIVEL,
                            Lv_EstadoActivo,
                            Pv_UsrCreacion,
                            SYSDATE,
                            Lv_IpCreacion
                        );
                    END IF;
                    
                    IF Lc_TempRutaDet.UBICADO_EN IS NOT NULL THEN
                        --Insertamos en la Info_detalle_elemento
                        Ln_IdDetalleElemento := DB_INFRAESTRUCTURA.SEQ_INFO_DETALLE_ELEMENTO.NEXTVAL;
                        INSERT
                        INTO DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO(
                            ID_DETALLE_ELEMENTO,
                            ELEMENTO_ID,
                            DETALLE_NOMBRE,
                            DETALLE_VALOR,
                            DETALLE_DESCRIPCION,
                            ESTADO,
                            USR_CREACION,
                            FE_CREACION,
                            IP_CREACION
                        )
                        VALUES
                        (
                            Ln_IdDetalleElemento,
                            Lv_SecuenciaElemento,
                            'UBICADO EN',
                            Lc_TempRutaDet.UBICADO_EN,
                            'Caracteristicas para indicar donde se ubica el Elemento',
                            Lv_EstadoActivo,
                            Pv_UsrCreacion,
                            SYSDATE,
                            Lv_IpCreacion
                        );
                    END IF;

                    Lt_ArrayContenido(Ln_Contador) := Lv_SecuenciaElemento||'@'||Ln_IdClaseTipoMedio;
                    Ln_Contador := Ln_Contador + 1;
                END IF;
            ELSE
              Ln_IdClaseTipoMedio := '';
              OPEN Lc_GetIdClaseTipoMedio(Lv_ContenidoFibra);
              FETCH Lc_GetIdClaseTipoMedio INTO Ln_IdClaseTipoMedio,Ln_IdTipoMedio;
              CLOSE Lc_GetIdClaseTipoMedio;

              IF Ln_IdClaseTipoMedio IS NULL THEN
                Lv_DetalleError := Lv_DetalleError||Lv_ContenidoElemento||' Fibra no existe'||'|';
              ELSE
                IF Lv_ContenidoElemento <> ' ' THEN
                  Lt_ArrayContenido(Ln_Contador) := Ln_IdElementoContenido||'@'||Ln_IdClaseTipoMedio;
                  Ln_Contador := Ln_Contador + 1;
                END IF;
              END IF;
            END IF;

        END LOOP;

        Ln_ContadorContenido     := Lt_ArrayContenido.FIRST;
        Ln_ContadorContenidoLast := Lt_ArrayContenido.LAST;

        WHILE (Ln_ContadorContenido IS NOT NULL AND Ln_ContadorContenido <= Ln_ContadorContenidoLast)
        LOOP
          OPEN Lc_GetExtractCadenaElementos(Lt_ArrayContenido(Ln_ContadorContenido));
          FETCH Lc_GetExtractCadenaElementos INTO Lv_ContenidoElemento,Lv_ContenidoFibra;
          CLOSE Lc_GetExtractCadenaElementos;

          Ln_IdTramo := '';

          -- Buscamos si el elemento existe en el tramo de una ruta
          OPEN Lc_GetInfoTramo(Lv_ContenidoElemento);
          FETCH Lc_GetInfoTramo INTO Ln_IdTramo;
          CLOSE Lc_GetInfoTramo;

          IF Ln_IdTramo IS NULL THEN
            Lv_ElementoIntermedio := '';
            -- Consultamos si pertenece al tipo de infraestructura  
            OPEN Lc_GetNombreInfoElemento(Lv_ContenidoElemento);
            FETCH Lc_GetNombreInfoElemento INTO Lv_ElementoIntermedio;
            CLOSE Lc_GetNombreInfoElemento;

            IF Lv_ElementoIntermedio IS NOT NULL THEN
              OPEN Lc_GetTipoElemento(Lv_ElementoIntermedio);
              FETCH Lc_GetTipoElemento INTO Lv_NombreElementoInter;
              CLOSE Lc_GetTipoElemento;

              OPEN Lc_GetNombreClaseTipoMedio(Lv_ContenidoFibra);
              FETCH Lc_GetNombreClaseTipoMedio INTO Lv_NombreClaseTipoMedio;
              CLOSE Lc_GetNombreClaseTipoMedio;

              FOR Lv_ItemDet IN Lc_GetParametroDet(Lv_Valor4)
              LOOP
                IF Lv_NombreElementoInter = Lv_ItemDet.CONTENIDO_DET THEN
                  Lv_ElementosIntermediosCsv := Lv_ElementosIntermediosCsv||Lv_ElementoIntermedio||'@'||Lv_NombreClaseTipoMedio||'*'; 
                END IF;
              END LOOP;
              IF Lv_ElementosIntermediosCsv IS NULL THEN
                  Lv_DetalleError := Lv_DetalleError||Lv_ElementoIntermedio||' Elemento no se encuentra en el tipo de infraestructura que corresponde'||'|';
              END IF;
            ELSE
              Lv_DetalleError := Lv_DetalleError||Lv_ElementoIntermedio||' Elemento no existe'||'|';  
            END IF;
          ELSE
            -- Consultamos si pertenece al tipo de infraestructura  
            OPEN Lc_GetNombreInfoElemento(Lv_ContenidoElemento);
            FETCH Lc_GetNombreInfoElemento INTO Lv_ElementoIntermedio;
            CLOSE Lc_GetNombreInfoElemento;

            Lv_DetalleError := Lv_DetalleError||Lv_ElementoIntermedio||' Elemento ya se encuentra en un tramo de la ruta'||'|';
            DBMS_OUTPUT.PUT_LINE(Lv_DetalleError);
          END IF;

          Ln_ContadorContenido := Lt_ArrayContenido.NEXT(Ln_ContadorContenido);
        END LOOP; 
        IF Lv_ElementosIntermediosCsv IS NOT NULL THEN
          Lv_ContinuaValidacion := 'SI';
        ELSE
          Pv_Status     := 'ERROR';
          Pv_TipoError  := 'ErrorValidaElementoIntermedio';
          Pv_ErrorElemento := Lv_DetalleError;
        END IF;
    END IF;

   IF Lv_ContinuaValidacion = 'SI' THEN
      Lv_ContinuaValidacion := 'NO';

      Pv_Status                                     := 'OK';
      Pv_TipoError                                  := '';
      Pr_RegDataPorProcesar                         := NULL;
      Pr_RegDataPorProcesar.NOMBRE_ELEMENTO         := Lv_NombreElementoCsv;
      Pr_RegDataPorProcesar.DESCRIPCION_ELEMENTO    := Lv_DescripcionElementoCsv;
      Pr_RegDataPorProcesar.NOMBRE_TIPO_ELEMENTO    := Lv_NombreTipoElementoCsv;
      Pr_RegDataPorProcesar.NOMBRE_MODELO_ELEMENTO  := Lv_NombreModeloElementoCsv;
      Pr_RegDataPorProcesar.OBSERVACION             := Lv_ObservacionCsv;
      Pr_RegDataPorProcesar.ELEMENTO_INICIO         := Lv_ElementoInicioCsv;
      Pr_RegDataPorProcesar.ELEMENTO_FIN            := Lv_ElementoFinCsv;
      Pr_RegDataPorProcesar.NOMBRE_CLASE_TIPO_MEDIO := Lv_NombreTipoMedioCsv;
      Pr_RegDataPorProcesar.ELEMENTOS_CONTENIDO     := Lv_ElementosIntermediosCsv;
      Pr_RegDataPorProcesar.ELEMENTO_ID             := Ln_IdTipoElemento;
      Pr_RegDataPorProcesar.ESTADO_ELEMENTO         := Lv_EstadoActivo;
      Pr_RegDataPorProcesar.VALOR2                  := Lv_Valor2;
      Pr_RegDataPorProcesar.VALOR3                  := Lv_Valor3;
      Pr_RegDataPorProcesar.VALOR4                  := Lv_Valor4;
      Pr_RegDataPorProcesar.ELEMENTOS_DETALLE       := Lv_DetalleError;
    END IF;
  EXCEPTION
  WHEN OTHERS THEN
    Pv_Status               := 'ERROR';
    Pv_TipoError            := 'ErrorDesconocido';
    Pr_RegDataPorProcesar   := NULL;
    ROLLBACK;
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR(   'Telcos+', 'INFRK_TRANSACCIONES.P_VALIDA_REG_TABLA_RUTAS', 
                                            'Error en la validación de la línea del archivo CSV para creación de rutas ' || SQLCODE 
                                            || ' - ERROR_STACK: ' || DBMS_UTILITY.FORMAT_ERROR_STACK || ' - ERROR_BACKTRACE: ' 
                                            || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, 
                                            NVL(SYS_CONTEXT('USERENV','HOST'), 'DB_INFRAESTRUCTURA'), SYSDATE, 
                                            NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1') );
  END P_VALIDA_REG_TABLA_RUTAS;


  PROCEDURE P_CARGA_ADMI_PARAMETRO_CAB(
     Pv_NombreParametro  IN VARCHAR2,
     Pv_Descripcion      IN VARCHAR2,
     Pv_Modulo           IN VARCHAR2,
     Pv_Estado           IN VARCHAR2,
     Pv_UsrCreacion      IN VARCHAR2)
  AS
  BEGIN
    INSERT INTO DB_GENERAL.ADMI_PARAMETRO_CAB
    (
            ID_PARAMETRO
        ,   NOMBRE_PARAMETRO
        ,   DESCRIPCION
        ,   MODULO
        ,   ESTADO
        ,   USR_CREACION
        ,   FE_CREACION
        ,   IP_CREACION
    )
    VALUES
    (
            DB_GENERAL.SEQ_ADMI_PARAMETRO_CAB.NEXTVAL
        ,   Pv_NombreParametro
        ,   Pv_Descripcion
        ,   Pv_Modulo
        ,   Pv_Estado
        ,   Pv_UsrCreacion
        ,   SYSDATE
        ,   '127.0.0.1'
    );
  END P_CARGA_ADMI_PARAMETRO_CAB;
  
  
  
  PROCEDURE P_CARGA_ADMI_PARAMETRO_DET(
    Pv_NombreParametro  IN VARCHAR2,
    Pv_EstadoParametro  IN VARCHAR2,
    Pv_Descripcion      IN VARCHAR2,
    Pv_Valor1           IN VARCHAR2,
    Pv_Valor2           IN VARCHAR2,
    Pv_Valor3           IN VARCHAR2,
    Pv_Estado           IN VARCHAR2,
    Pv_EmpresaCod       IN INTEGER,
    Pv_Valor7           IN VARCHAR2,
    Pv_UsrCreacion      IN VARCHAR2)
AS
BEGIN
    INSERT INTO DB_GENERAL.ADMI_PARAMETRO_DET
    (
            ID_PARAMETRO_DET
        ,   PARAMETRO_ID
        ,   DESCRIPCION
        ,   VALOR1
        ,   VALOR2
        ,   VALOR3
        ,   VALOR4
        ,   ESTADO
        ,   USR_CREACION
        ,   FE_CREACION
        ,   IP_CREACION
        ,   EMPRESA_COD
        ,   VALOR7
    )
    VALUES
    (
            DB_GENERAL.SEQ_ADMI_PARAMETRO_DET.NEXTVAL
        ,   (
                SELECT ID_PARAMETRO
                FROM DB_GENERAL.ADMI_PARAMETRO_CAB
                WHERE NOMBRE_PARAMETRO = Pv_NombreParametro
                AND ESTADO = Pv_EstadoParametro
            )
        ,   Pv_Descripcion
        ,   Pv_Valor1
        ,   Pv_Valor2
        ,   Pv_Valor3
        ,   NULL
        ,   Pv_Estado
        ,   Pv_UsrCreacion
        ,   SYSDATE
        ,   '127.0.0.1'
        ,   Pv_EmpresaCod
        ,   Pv_Valor7
    );
END P_CARGA_ADMI_PARAMETRO_DET;

PROCEDURE P_INS_TIPO_MARCA_MODELO_DET
AS

        -- Declaro cursor
        -- Declaro arrays
        -- UPS
        TYPE arrayUps IS VARRAY(5) OF VARCHAR2(100);
        upsModelos arrayUps;
        -- RECTIFICADOR
        TYPE arrayRectificador IS VARRAY(4) OF VARCHAR2(100);
        rectificadorModelos arrayRectificador;
        -- GENERADOR
        TYPE arrayGenerador IS VARRAY(6) OF VARCHAR2(100);
        generadorModelos arrayGenerador;
        -- TRANSFORMADOR
        TYPE arrayTransformador IS VARRAY(6) OF VARCHAR2(100);
        transformadorModelos arrayTransformador;
        -- CAMARA
        TYPE arrayCamara IS VARRAY(2) OF VARCHAR2(100);
        camaraModelos arrayCamara;
        -- AIRE ACONDICIONADO
        TYPE arrayAireAcondicionado IS VARRAY(7) OF VARCHAR2(100);
        aireAcondicionadoModelos arrayAireAcondicionado;
        -- TABLEROS DE TRANSFERENCIA
        TYPE arrayTablerosTransferencia IS VARRAY(6) OF VARCHAR2(100);
        tablerosTransferenciaModelos arrayTablerosTransferencia;
        -- TABLEROS DE PARALELISMO
        TYPE arrayTablerosParalelismo IS VARRAY(1) OF VARCHAR2(100);
        tablerosParalelismoModelos arrayTablerosParalelismo;
        -- MANTENEDOR DE CARGA
        TYPE arrayMantenedorCarga IS VARRAY(2) OF VARCHAR2(100);
        mantenedorCargaModelos arrayMantenedorCarga;
        -- TARJETAS DE MONITOREO
        TYPE arrayTarjetasMonitoreo IS VARRAY(6) OF VARCHAR2(100);
        tarjetasModelos arrayTarjetasMonitoreo;
        -- TABLERO DC
        TYPE arrayTableroDC IS VARRAY(1) OF VARCHAR2(100);
        tableroDCModelos arrayTableroDC;
        -- BATERIA
        TYPE arrayBateria IS VARRAY(3) OF VARCHAR2(100);
        bateriaModelos arrayBateria;
        -- Declaro integer que almacena el total de mi arreglo
        el NUMBER;
        al NUMBER;
        total INTEGER;
        -- Declaro datos generales para inserción en parametro det
        nombreUsuario VARCHAR2(50)  := 'lfarro';
        estado VARCHAR2(50)         := 'Activo';
        codEmpresa INTEGER          := 10;
BEGIN
        -- Inserto en parametro cab
        P_CARGA_ADMI_PARAMETRO_CAB
        (
                        'LISTADO_ELEMENTOS_NODOS'
                ,       'ALMACENA TIPO, MARCA Y MODELO DE ELEMENTOS NODOS'
                ,       'TECNICO'
                ,       'Activo'
                ,       'lfarro'
        );
        -- Defino los valores

        -- UPS
        upsModelos := arrayUps
        (
                        '1.5 KVA'
                ,       '3 KVA'
                ,       '6 KVA'
                ,       '10 KVA'
                ,       '20 KVA'
        );

        -- RECTIFICADOR
        rectificadorModelos := arrayRectificador
        (
                        '48v 10A'
                ,       '48v 60A'
                ,       '48v 120A'
                ,       '48v 160A'
        );

        -- GENERADOR
        generadorModelos := arrayGenerador
        (
                        '30 KVA'
                ,       '35 KVA'
                ,       '50 KVA'
                ,       '80 KVA'
                ,       '100 KVA'
                ,       '650 KVA'
        );

        -- TRANSFORMADOR
        transformadorModelos := arrayTransformador
        (
                        '10 KVA'
                ,       '20 KVA'
                ,       '37.5 KVA'
                ,       '50 KVA'
                ,       '75 KVA'
                ,       '100 KVA'
        );

        -- CAMARA
        camaraModelos := arrayCamara
        (
                        'Mini PTZ'
                ,       'Domo'
        );

        -- AIRE ACONDICIONADO
        aireAcondicionadoModelos := arrayAireAcondicionado
        (
                        '12000 BTU'
                ,       '24000 BTU'
                ,       '36000 BTU'
                ,       '48000 BTU'
                ,       '60000 BTU'
                ,       '90000 BTU'
                ,       '120000 BTU'
        );

        -- TABLEROS DE TRANSFERENCIA
        tablerosTransferenciaModelos := arrayTablerosTransferencia
        (
                        '80 Amp'
                ,       '100 Amp'
                ,       '120 Amp'
                ,       '150 Amp'
                ,       '300 Amp'
                ,       '400 Amp'

        );
        
        -- TABLEROS DE PARALELISMO
        tablerosParalelismoModelos := arrayTablerosParalelismo
        (
                        'Generico'
        );
        
        -- MANTENEDOR DE CARGA
        mantenedorCargaModelos := arrayMantenedorCarga
        (
                        '12 v'
                ,       '24 v'
        );
        
        -- TARJETAS DE MONITOREO
        tarjetasModelos := arrayTarjetasMonitoreo
        (
                        '1.5 KVA'
                ,       '3 KVA'
                ,       '6 KVA'
                ,       '10 KVA'
                ,       '20 KVA'
                ,       'C2LAN SNMP'
        );
        
        -- TABLERO DC
        tableroDCModelos := arrayTableroDC
        (
                        '48 V'
        );
        
        -- BATERIA
        bateriaModelos := arrayBateria
        (
                        '12 V'
                ,       '12 v 80 Amp'
                ,       '12 v 120 Amp'
        );

        -- Insercion de UPS
        total := upsModelos.count();
        -- APC
        -- Inserto en parametro det
        FOR i in 1 .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'UPS'
                        ,       'APC'
                        ,       upsModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ABB
        -- Inserto en parametro det
        el := 2;
        FOR i in el .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'UPS'
                        ,       'ABB'
                        ,       upsModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- GENERAL ELECTRIC
        -- Inserto en parametro det
        FOR i in el .. (total) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'UPS'
                        ,       'GENERAL ELECTRIC'
                        ,       upsModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- VERTIV
        -- Inserto en parametro det
        al := 2;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'UPS'
                        ,       'VERTIV'
                        ,       upsModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de RECTIFICADOR
        total := rectificadorModelos.count();
        -- ELTEK
        -- Inserto en parametro det
        el := 4;
        al := 4;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'RECTIFICADOR'
                        ,       'ELTEK'
                        ,       rectificadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- VALERE
        -- Inserto en parametro det
        el := 3;
        al := 3;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'RECTIFICADOR'
                        ,       'VALERE'
                        ,       rectificadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- MEAN WELL
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'RECTIFICADOR'
                        ,       'MEAN WELL'
                        ,       rectificadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ERICCSON
        -- Inserto en parametro det
        el := 2;
        al := 2;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'RECTIFICADOR'
                        ,       'ERICCSON'
                        ,       rectificadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- EXXEL POWER
        -- Inserto en parametro det
        al := 2;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'RECTIFICADOR'
                        ,       'EXXEL POWER'
                        ,       rectificadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de GENERADOR
        total := generadorModelos.count();
        -- HIMOINSA
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'GENERADOR'
                        ,       'HIMOINSA'
                        ,       generadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- KOHLER
        -- Inserto en parametro det
        FOR i in 1 .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'GENERADOR'
                        ,       'KOHLER'
                        ,       generadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- SDMO
        -- Inserto en parametro det
        al := 3;
        FOR i in 1 .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'GENERADOR'
                        ,       'SDMO'
                        ,       generadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- STEMAC
        -- Inserto en parametro det
        al := 3;
        FOR i in 1 .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'GENERADOR'
                        ,       'STEMAC'
                        ,       generadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- TRADE WING
        -- Inserto en parametro det
        el := 3;
        FOR i in el .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'GENERADOR'
                        ,       'TRADE WING'
                        ,       generadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de TRANSFORMADOR
        total := transformadorModelos.count();
        -- INATRA
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TRANSFORMADOR'
                        ,       'INATRA'
                        ,       transformadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ECUATRAN
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TRANSFORMADOR'
                        ,       'ECUATRAN'
                        ,       transformadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- MORETRAN
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TRANSFORMADOR'
                        ,       'MORETRAN'
                        ,       transformadorModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de CAMARA
        total := camaraModelos.count();
        -- FOSCAM
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'CAMARA'
                        ,       'FOSCAM'
                        ,       camaraModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- HIKVISION
        -- Inserto en parametro det
        el := 2;
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'CAMARA'
                        ,       'HIKVISION'
                        ,       camaraModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de AIRE ACONDICIONADO
        total := aireAcondicionadoModelos.count();
        -- FRIGOSTAR
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'FRIGOSTAR'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- CONFORSTAR
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'CONFORSTAR'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- INNOVAIR
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'INNOVAIR'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- YORK
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'YORK'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- LENNOX
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'LENNOX'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- MIDEA
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'MIDEA'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- LG
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'AIRE ACONDICIONADO'
                        ,       'LG'
                        ,       aireAcondicionadoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de TABLEROS DE TRANSFERENCIA
        total := tablerosTransferenciaModelos.count();
        -- GENERICO
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLEROS DE TRANSFERENCIA'
                        ,       'GENERICO'
                        ,       tablerosTransferenciaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- HIMOINSA
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLEROS DE TRANSFERENCIA'
                        ,       'HIMOINSA'
                        ,       tablerosTransferenciaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- KOHLER
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLEROS DE TRANSFERENCIA'
                        ,       'KOHLER'
                        ,       tablerosTransferenciaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- DSE
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLEROS DE TRANSFERENCIA'
                        ,       'DSE'
                        ,       tablerosTransferenciaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de TABLEROS DE PARALELISMO
        total := tablerosParalelismoModelos.count();
        -- GENERICO
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLEROS DE PARALELISMO'
                        ,       'GENERICO'
                        ,       tablerosParalelismoModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de MANTENEDOR DE CARGA
        total := mantenedorCargaModelos.count();
        -- DSE
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'MANTENEDOR DE CARGA'
                        ,       'DSE'
                        ,       mantenedorCargaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- HIMOINSA
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'MANTENEDOR DE CARGA'
                        ,       'HIMOINSA'
                        ,       mantenedorCargaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- GENERICO
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'MANTENEDOR DE CARGA'
                        ,       'GENERICO'
                        ,       mantenedorCargaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de TARJETAS DE MONITOREO
        total := tarjetasModelos.count();
        -- APC
        -- Inserto en parametro det
        al := 3;
        FOR i in 1 .. al LOOP
                IF tarjetasModelos(i) != '3 KVA' THEN
                        P_CARGA_ADMI_PARAMETRO_DET
                        (
                                        'LISTADO_ELEMENTOS_NODOS'
                                ,       'Activo'
                                ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                                ,       'TARJETAS DE MONITOREO'
                                ,       'APC'
                                ,       tarjetasModelos(i)
                                ,       estado
                                ,       codEmpresa
                                ,       NULL
                                ,       nombreUsuario
                        );
                END IF;
        END LOOP;
        -- ABB
        -- Inserto en parametro det
        el := 2;
        FOR i in el .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TARJETAS DE MONITOREO'
                        ,       'ABB'
                        ,       tarjetasModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- GE
        -- Inserto en parametro det
        FOR i in el .. (total - 1) LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TARJETAS DE MONITOREO'
                        ,       'GE'
                        ,       tarjetasModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- HIMOINSA
        -- Inserto en parametro det
        FOR i in total .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TARJETAS DE MONITOREO'
                        ,       'HIMOINSA'
                        ,       tarjetasModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- VERTIV
        -- Inserto en parametro det
        al := 2;
        FOR i in el .. al LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TARJETAS DE MONITOREO'
                        ,       'VERTIV'
                        ,       tarjetasModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de TABLERO DC
        total := tableroDCModelos.count();
        -- GENERICO
        -- Inserto en parametro det
        FOR i in 1 .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'TABLERO DC'
                        ,       'GENERICO'
                        ,       tableroDCModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Insercion de BATERIA
        total := bateriaModelos.count();
        -- BOSCH
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'BOSCH'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- EXIWILL
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'EXIWILL'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- DACAR
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'DACAR'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- DUNCAN
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'DUNCAN'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ECUADOR
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'ECUADOR'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ACDELCO
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'ACDELCO'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- MAC
        -- Inserto en parametro det
        FOR i in 1 .. 1 LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'MAC'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- EVEREXCEED
        -- Inserto en parametro det
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'EVEREXCEED'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- UNIVERSAL
        -- Inserto en parametro det
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'UNIVERSAL'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- BLESS POWER
        -- Inserto en parametro det
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'BLESS POWER'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- ENERGY POWER
        -- Inserto en parametro det
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'ENERGY POWER'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;
        -- WADKIN
        -- Inserto en parametro det
        FOR i in el .. total LOOP
                P_CARGA_ADMI_PARAMETRO_DET
                (
                                'LISTADO_ELEMENTOS_NODOS'
                        ,       'Activo'
                        ,       'IDENTIFICA A LISTADO DE ELEMENTOS NODOS'
                        ,       'BATERIA'
                        ,       'WADKIN'
                        ,       bateriaModelos(i)
                        ,       estado
                        ,       codEmpresa
                        ,       NULL
                        ,       nombreUsuario
                );
        END LOOP;

        -- Salvo cambios
        COMMIT;
        -- Excepción en caso de error
        EXCEPTION 
        WHEN OTHERS THEN   
        DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR
        (
                        'TELCOS'
                ,       'P_GENERAR_NUMERO_CASO_INSERCION'
                ,       SUBSTR('ERROR '||SQLERRM,1,4000)
                ,       NVL(SYS_CONTEXT('USERENV','HOST'), 'Telcos')
                ,       SYSDATE
                ,       NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1')
        );

END P_INS_TIPO_MARCA_MODELO_DET;
  
  
  
  PROCEDURE P_CARGA_ELEMENTO_TIPO (
   Pv_NombreTipoElemento  IN VARCHAR2)
  AS
  BEGIN
    INSERT INTO DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO
        (
                ID_TIPO_ELEMENTO
              , NOMBRE_TIPO_ELEMENTO
              , DESCRIPCION_TIPO_ELEMENTO
              , CLASE_TIPO_ELEMENTO
              , ESTADO
              , USR_CREACION
              , FE_CREACION
              , USR_ULT_MOD
              , FE_ULT_MOD
              , ES_DE
        )
        VALUES
        (
                DB_INFRAESTRUCTURA.SEQ_ADMI_TIPO_ELEMENTO.NEXTVAL
              , Pv_NombreTipoElemento
              , 'IDENTIFICA A '||Pv_NombreTipoElemento
              , 'ACTIVO'
              , 'Activo'
              , 'lfarro'
              , SYSDATE
              , NULL
              , NULL
              , NULL
        );
  END P_CARGA_ELEMENTO_TIPO;
  
  PROCEDURE P_CARGA_ELEMENTO_MARCA (
    Pv_NombreMarcaElemento  IN VARCHAR2)
  AS
    BEGIN
    INSERT INTO DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO
    (
         ID_MARCA_ELEMENTO
       , NOMBRE_MARCA_ELEMENTO
       , DESCRIPCION_MARCA_ELEMENTO
       , ESTADO
       , USR_CREACION
       , FE_CREACION
       , USR_ULT_MOD
       , FE_ULT_MOD
  ) 
  VALUES
  (
          DB_INFRAESTRUCTURA.SEQ_ADMI_MARCA_ELEMENTO.NEXTVAL
        , Pv_NombreMarcaElemento
        , 'IDENTIFICA A '||Pv_NombreMarcaElemento
        , 'Activo'
        , 'lfarro'
        , SYSDATE
        , NULL
        , NULL
  );
  END P_CARGA_ELEMENTO_MARCA;

  PROCEDURE P_CARGA_ELEMENTO_MODELO (
    Pv_NombreModeloElemento   IN VARCHAR2,
    Pv_NombreMarcaElemento    IN VARCHAR2,
    Pv_NombreTipoElemento     IN VARCHAR2)
  AS
  BEGIN
  INSERT INTO DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO
  (
          ID_MODELO_ELEMENTO
        , MARCA_ELEMENTO_ID
        , TIPO_ELEMENTO_ID
        , NOMBRE_MODELO_ELEMENTO
        , DESCRIPCION_MODELO_ELEMENTO
        , MTTR
        , UNIDAD_MEDIDA_MTTR
        , MTBF
        , UNIDAD_MEDIDA_MTBF
        , ANCHO_MODELO
        , UNIDAD_MEDIDA_ANCHO
        , LARGO_MODELO
        , UNIDAD_MEDIDA_LARGO
        , ALTO_MODELO
        , UNIDAD_MEDIDA_ALTO
        , PESO_MODELO
        , UNIDAD_MEDIDA_PESO
        , U_RACK
        , CAPACIDAD_ENTRADA
        , UNIDAD_MEDIDA_ENTRADA
        , CAPACIDAD_SALIDA
        , UNIDAD_MEDIDA_SALIDA
        , CAPACIDAD_VA_FABRICA
        , UNIDAD_VA_FABRICA
        , CAPACIDAD_VA_PROMEDIO
        , UNIDAD_VA_PROMEDIO
        , PRECIO_PROMEDIO
        , ESTADO
        , USR_CREACION
        , FE_CREACION
        , USR_ULT_MOD
        , FE_ULT_MOD
  )
  VALUES
  (
          DB_INFRAESTRUCTURA.SEQ_ADMI_MODELO_ELEMENTO.NEXTVAL
        , (SELECT ID_MARCA_ELEMENTO FROM DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO WHERE NOMBRE_MARCA_ELEMENTO=Pv_NombreMarcaElemento)
        , (SELECT ID_TIPO_ELEMENTO FROM DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO WHERE NOMBRE_TIPO_ELEMENTO=Pv_NombreTipoElemento)
        , Pv_NombreModeloElemento
        , Pv_NombreModeloElemento
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , NULL
        , 'Activo'
        , 'lfarro'
        , SYSDATE
        , 'lfarro'
        , SYSDATE
  );
END P_CARGA_ELEMENTO_MODELO;

PROCEDURE P_CARGA_EL_NODOS__DET (Pv_NombreTipoElemento IN VARCHAR2)
AS
BEGIN
  INSERT INTO DB_GENERAL.ADMI_PARAMETRO_DET
  (
      ID_PARAMETRO_DET,
      PARAMETRO_ID,
      DESCRIPCION,
      VALOR1,
      VALOR2,
      VALOR3,
      VALOR4,
      ESTADO,
      USR_CREACION,
      FE_CREACION,
      IP_CREACION,
      EMPRESA_COD,
      VALOR7
  )
  VALUES
  (
          DB_GENERAL.SEQ_ADMI_PARAMETRO_DET.NEXTVAL,
          (
              SELECT ID_PARAMETRO
              FROM DB_GENERAL.ADMI_PARAMETRO_CAB
              WHERE NOMBRE_PARAMETRO = 'ELEMENTOS NODOS'
              AND ESTADO = 'Activo'
          ),
          'IDENTIFICA'||Pv_NombreTipoElemento,
          Pv_NombreTipoElemento,
          NULL,
          NULL,
          NULL,
          'Activo',
          'lfarro',
          SYSDATE,
          '127.0.0.1',
          '10',
          NULL
  );
END;


 PROCEDURE P_INS_TIPO_MARCA_MODELO_EL
 AS
    -- Declaro cursor para almacenar los modelos
  CURSOR C_GetNombreModeloElemento IS
  SELECT VALOR1, VALOR2, VALOR3 FROM DB_GENERAL.ADMI_PARAMETRO_DET WHERE DESCRIPCION = 'IDENTIFICA A LISTADO DE ELEMENTOS NODOS';

  -- Declaro cursor para Tipo Elemento
  CURSOR C_GetNombreTipoElemento IS
  SELECT DISTINCT VALOR1 FROM DB_GENERAL.ADMI_PARAMETRO_DET WHERE DESCRIPCION = 'IDENTIFICA A LISTADO DE ELEMENTOS NODOS';
  
  -- Declaro cursor para Tipo Elemento
  CURSOR C_GetNombreMarcaElemento IS
  SELECT DISTINCT VALOR2 FROM DB_GENERAL.ADMI_PARAMETRO_DET WHERE DESCRIPCION = 'IDENTIFICA A LISTADO DE ELEMENTOS NODOS';
  
  -- Declaro cursor para identificar el ID Tipo Elemento
  CURSOR C_GetIdTipoElemento(Cv_NombreTipoElemento IN VARCHAR2) IS
  -- Realizo una consulta para capturar el ID_TIPO_ELEMENTO por NOMBRE_TIPO_ELEMENTO
  SELECT ID_TIPO_ELEMENTO FROM DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO WHERE NOMBRE_TIPO_ELEMENTO = Cv_NombreTipoElemento;
  Ln_idTipoElemento DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO.ID_TIPO_ELEMENTO%TYPE;
  
  -- Declaro cursor para identificar el ID Marca Elemento
  CURSOR C_GetTipoMarcaElemento(Cv_NombreMarcaElemento IN VARCHAR2) IS
  -- Realizo una consulta para capturar el ID_TIPO_ELEMENTO por NOMBRE_TIPO_ELEMENTO
  SELECT ID_MARCA_ELEMENTO FROM DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO WHERE NOMBRE_MARCA_ELEMENTO = Cv_NombreMarcaElemento;
  Ln_idMarcaElemento DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO.ID_MARCA_ELEMENTO%TYPE;
  
  -- Declaro cursor para identificar el ID Modelo Elemento
  CURSOR C_GetTipoModeloElemento(Cv_NombreModeloElemento IN VARCHAR2, Cv_IdMarca IN INTEGER, Cv_IdTipo IN INTEGER) IS
  -- Realizo una consulta para capturar el ID_MODELO_ELEMENTO por NOMBRE_MODELO_ELEMENTO
  SELECT ID_MODELO_ELEMENTO FROM DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO WHERE NOMBRE_MODELO_ELEMENTO = Cv_NombreModeloElemento AND TIPO_ELEMENTO_ID = Cv_IdTipo AND MARCA_ELEMENTO_ID = Cv_IdMarca;
  Ln_idModeloElemento DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO%TYPE;
  
  -- Declaro cursor para identificar el ID de los tipos en parametro DET
  CURSOR C_GetNombreValorParametroDet(Cv_NombreValorParametroDet IN VARCHAR2) IS
  -- Realizo una consulta para capturar el ID_MODELO_ELEMENTO por NOMBRE_MODELO_ELEMENTO
  SELECT ID_PARAMETRO_DET FROM DB_GENERAL.ADMI_PARAMETRO_DET WHERE VALOR1 = Cv_NombreValorParametroDet AND PARAMETRO_ID = 1019;
  Ln_idParametroDet DB_GENERAL.ADMI_PARAMETRO_DET.ID_PARAMETRO_DET%TYPE;
  
 BEGIN
  
  -- TIPO ELEMENTO
  FOR V_FILA IN C_GetNombreTipoElemento LOOP
    -- DBMS_OUTPUT.PUT_LINE('Nombre Tipo Elemento: ' || V_FILA.VALOR1);
    
    -- Inicio mi cursor
    OPEN  C_GetIdTipoElemento(V_FILA.VALOR1);
    -- Capturo mi ID_TIPO_ELEMENTO
    FETCH C_GetIdTipoElemento INTO Ln_idTipoElemento;
    -- Si no existe un ID_TIPO_ELEMENTO entonces realizo la insercion
    IF Ln_idTipoElemento IS NULL THEN 
      -- SP CARGA_ELEMENTO_TIPO
      P_CARGA_ELEMENTO_TIPO(V_FILA.VALOR1);
      -- Imprimo el NOMBRE_TIPO_ELEMENTO y su ID_TIPO_ELEMENTO iterado
      DBMS_OUTPUT.PUT_LINE(  'NOMBRE_TIPO_ELEMENTO: ' || V_FILA.VALOR1 || ' ID_TIPO_ELEMENTO: ' || Ln_idTipoElemento );
      END IF;
      Ln_idTipoElemento := NULL;
      CLOSE C_GetIdTipoElemento;
  END LOOP;
  
  -- MARCA ELEMENTO
  FOR V_FILA IN C_GetNombreMarcaElemento LOOP
    -- DBMS_OUTPUT.PUT_LINE('Nombre Marca Elemento: ' || V_FILA.VALOR2);
    
    -- Inicio mi cursor
    OPEN  C_GetTipoMarcaElemento(V_FILA.VALOR2);
    -- Capturo mi ID_MARCA_ELEMENTO
    FETCH C_GetTipoMarcaElemento INTO Ln_idMarcaElemento;
    -- Si no existe un ID_TIPO_ELEMENTO entonces realizo la insercion
    IF Ln_idMarcaElemento IS NULL THEN 
      -- SP CARGA_ELEMENTO_MARCA
      P_CARGA_ELEMENTO_MARCA(V_FILA.VALOR2);
      
      -- Imprimo el NOMBRE_TIPO_ELEMENTO y su ID_TIPO_MARCA iterado
      DBMS_OUTPUT.PUT_LINE(  'NOMBRE_MARCA_ELEMENTO: ' || V_FILA.VALOR2 || ' ID_MARCA_ELEMENTO: ' || Ln_idMarcaElemento );
      END IF;
      Ln_idMarcaElemento := NULL;
      CLOSE C_GetTipoMarcaElemento;
  END LOOP;
  
  -- MODELO ELEMENTO
  FOR V_FILA IN C_GetNombreModeloElemento LOOP
    DBMS_OUTPUT.PUT_LINE('Nombre Modelo Elemento: ' || V_FILA.VALOR3);
    
    -- Inicio mi cursor
    OPEN C_GetIdTipoElemento(V_FILA.VALOR1);
    FETCH C_GetIdTipoElemento INTO Ln_idTipoElemento;
    
    OPEN C_GetTipoMarcaElemento(V_FILA.VALOR2);
    FETCH C_GetTipoMarcaElemento INTO Ln_idMarcaElemento;
    
    OPEN  C_GetTipoModeloElemento(V_FILA.VALOR3, Ln_idMarcaElemento, Ln_idTipoElemento);
    -- Capturo mi ID_MARCA_ELEMENTO
    FETCH C_GetTipoModeloElemento INTO Ln_idModeloElemento;
    -- Si no existe un ID_TIPO_ELEMENTO entonces realizo la insercion
    IF  Ln_idTipoElemento IS NOT NULL AND 
        Ln_idMarcaElemento IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE( 'ENTRO AQUI ' || Ln_idTipoElemento || ' ' || Ln_idMarcaElemento);
        
      IF Ln_idModeloElemento IS NULL THEN 
      -- SP CARGA_ELEMENTO_MODELO
      DBMS_OUTPUT.PUT_LINE( 'VALUES ' );
      P_CARGA_ELEMENTO_MODELO(V_FILA.VALOR3, V_FILA.VALOR2 , V_FILA.VALOR1);
      END IF;
    END IF;
    Ln_idModeloElemento := NULL;
    
    CLOSE C_GetIdTipoElemento;
    CLOSE C_GetTipoMarcaElemento;
    CLOSE C_GetTipoModeloElemento;
  END LOOP;
  
    -- DET ELEMENTO
  FOR V_FILA IN C_GetNombreTipoElemento LOOP
    -- DBMS_OUTPUT.PUT_LINE('Nombre Tipo Elemento: ' || V_FILA.VALOR1);
    
    -- Inicio mi cursor
    OPEN  C_GetNombreValorParametroDet(V_FILA.VALOR1);
    -- Capturo mi ID_TIPO_ELEMENTO
    FETCH C_GetNombreValorParametroDet INTO Ln_idParametroDet;
    -- Si no existe un ID_TIPO_ELEMENTO entonces realizo la insercion
    IF Ln_idParametroDet IS NULL THEN 
      -- SP CARGA_ELEMENTO_TIPO
      P_CARGA_EL_NODOS__DET(V_FILA.VALOR1);
      END IF;
      Ln_idParametroDet := NULL;
      CLOSE C_GetNombreValorParametroDet;
  END LOOP;
    
  -- Salvo cambios
  COMMIT;
  -- Excepción en caso de error
  EXCEPTION 
  WHEN OTHERS THEN   
    DB_GENERAL.GNRLPCK_UTIL.INSERT_ERROR
      (
          'TELCOS'
        , 'P_GENERAR_NUMERO_CASO_INSERCION'
        , SUBSTR('ERROR '||SQLERRM,1,4000)
        , NVL(SYS_CONTEXT('USERENV','HOST'), 'Telcos')
        , SYSDATE
        , NVL(SYS_CONTEXT('USERENV','IP_ADDRESS'), '127.0.0.1')
      );
 END P_INS_TIPO_MARCA_MODELO_EL;

END INFRK_TRANSACCIONES;
/
